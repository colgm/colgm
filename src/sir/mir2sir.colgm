use std::map::{ hashmap, pair };
use std::str::{ str };
use std::ptr::{ basic };
use std::io::{ io };

use mir::mir::*;
use mir::context::{ mir_context };
use sir::sir::*;
use sir::context::{ sir_struct, sir_func, sir_context };

use sema::symbol_info::{ symbol_kind };
use sema::context::{ sema_context };
use sema::type::{ type };

use err::panic::{ panic, unreachable };
use package::{ package };
use util::mangling::{ mangle_struct_name };

pub struct mir2sir {
    ctx: sema_context*,
    sctx: sir_context*,
    pkg: package*,
    type_mapper: hashmap<str, basic<symbol_kind>>,
    basic_type_mapper: hashmap<str, str>
}

impl mir2sir {
    pub func instance(ctx: sema_context*,
                      sctx: sir_context*,
                      pkg: package*) -> mir2sir {
        var res = mir2sir {
            ctx: ctx,
            sctx: sctx,
            pkg: pkg,
            type_mapper: hashmap<str, basic<symbol_kind>>::instance(),
            basic_type_mapper: hashmap<str, str>::instance()
        };
        res.init_basic_type_mapper();
        return res;
    }

    pub func delete(self) {
        self->type_mapper.delete();
        self->basic_type_mapper.delete();
    }

    func init_basic_type_mapper(self) {
        var i64_s = str::from("i64");
        var i32_s = str::from("i32");
        var i16_s = str::from("i16");
        var i8_s = str::from("i8");
        var i1_s = str::from("i1");
        var u64_s = str::from("u64");
        var u32_s = str::from("u32");
        var u16_s = str::from("u16");
        var u8_s = str::from("u8");
        var f64_s = str::from("f64");
        var f32_s = str::from("f32");
        var void_s = str::from("void");
        var bool_s = str::from("bool");

        var double_s = str::from("double");
        var float_s = str::from("float");

        self->basic_type_mapper.insert(i64_s.__ptr__(), i64_s.__ptr__());
        self->basic_type_mapper.insert(i32_s.__ptr__(), i32_s.__ptr__());
        self->basic_type_mapper.insert(i16_s.__ptr__(), i16_s.__ptr__());
        self->basic_type_mapper.insert(i8_s.__ptr__(), i8_s.__ptr__());
        self->basic_type_mapper.insert(u64_s.__ptr__(), i64_s.__ptr__());
        self->basic_type_mapper.insert(u32_s.__ptr__(), i32_s.__ptr__());
        self->basic_type_mapper.insert(u16_s.__ptr__(), i16_s.__ptr__());
        self->basic_type_mapper.insert(u8_s.__ptr__(), i8_s.__ptr__());
        self->basic_type_mapper.insert(f64_s.__ptr__(), double_s.__ptr__());
        self->basic_type_mapper.insert(f32_s.__ptr__(), float_s.__ptr__());
        self->basic_type_mapper.insert(void_s.__ptr__(), void_s.__ptr__());
        self->basic_type_mapper.insert(bool_s.__ptr__(), i1_s.__ptr__());

        i64_s.delete();
        i32_s.delete();
        i16_s.delete();
        i8_s.delete();
        i1_s.delete();
        u64_s.delete();
        u32_s.delete();
        u16_s.delete();
        u8_s.delete();
        f64_s.delete();
        f32_s.delete();
        void_s.delete();
        bool_s.delete();
        double_s.delete();
        float_s.delete();
    }
}

impl mir2sir {
    func emit_const_strings(self, mctx: mir_context*) {
        self->sctx->const_strings.delete();
        self->sctx->const_strings = mctx->const_strings.copy_instance();
    }

    func emit_struct(self, mctx: mir_context*) {
        for (var i = mctx->structs.iter(); !i.is_end(); i = i.next()) {
            var m_stct = i.get();

            var s_ty = type::instance();
            s_ty.name.append_str(m_stct->name.__ptr__());
            s_ty.loc_file.append_str(m_stct->location.file.__ptr__());
            
            var s_ty_name = s_ty.full_path_name(self->pkg, false);
            var s_ty_llvm_name = mangle_struct_name(s_ty_name.__ptr__());

            var s_stct = sir_struct::instance(
                s_ty_llvm_name.__ptr__(),
                m_stct->location.__ptr__()
            );
            s_ty_name.delete();
            s_ty_llvm_name.delete();

            for (var j = m_stct->field_type.iter(); !j.is_end(); j = j.next()) {
                var m_field = j.get();
                var mapped_type = self->type_mapping(m_field);

                s_stct.field_type.push(mapped_type.__ptr__());

                mapped_type.delete();
            }

            self->sctx->struct_decls.push(s_stct.__ptr__());
            s_stct.delete();
        }
    }

    func emit_func_decl(self, mctx: mir_context*) {
        for (var i = mctx->decls.iter(); !i.is_end(); i = i.next()) {
            var m_func = i.get();
            var s_func = sir_func::instance(m_func->name.__ptr__());
            s_func.set_attributes(m_func->attributes.__ptr__());

            var ret_type_name = self->type_mapping(m_func->return_type.__ptr__());
            s_func.return_type.append_str(ret_type_name.__ptr__());
            ret_type_name.delete();

            for (var j = m_func->params.iter(); !j.is_end(); j = j.next()) {
                var m_param = j.get();
                var mapped_type = self->type_mapping(m_param->value);
                var p_pair = pair<str, str>::instance(m_param->key, mapped_type.__ptr__());

                s_func.params.push(p_pair.__ptr__());

                mapped_type.delete();
                p_pair.delete();
            }

            self->sctx->func_decls.push(s_func.__ptr__());
            s_func.delete();
        }
    }

    func emit_func_impl(self, mctx: mir_context*) {
    }
}

impl mir2sir {
    func generate_type_mapper(self) {
        for (var i = self->ctx->global->domain.iter(); !i.is_end(); i = i.next()) {
            var dm = i.value();
            for (var j = dm->enums.iter(); !j.is_end(); j = j.next()) {
                var e_type = type::instance();
                e_type.name.append_str(j.value()->name.__ptr__());
                e_type.loc_file.append_str(j.value()->location.file.__ptr__());
                
                var e_name = e_type.full_path_name(self->pkg, false);
                var e_kind = basic<symbol_kind>::wrap(symbol_kind::enum_kind);

                self->type_mapper.insert(e_name.__ptr__(), e_kind.__ptr__());
                
                e_type.delete();
                e_name.delete();
            }
            for (var j = dm->structs.iter(); !j.is_end(); j = j.next()) {
                var s_type = type::instance();
                s_type.name.append_str(j.value()->name.__ptr__());
                s_type.loc_file.append_str(j.value()->location.file.__ptr__());
                
                var s_name = s_type.full_path_name(self->pkg, false);
                var s_kind = basic<symbol_kind>::wrap(symbol_kind::struct_kind);

                self->type_mapper.insert(s_name.__ptr__(), s_kind.__ptr__());
                
                s_type.delete();
                s_name.delete();
            }
        }
    }

    func type_mapping(self, t: type*) -> str {
        var copy = t->copy_instance();
        // basic type mapping
        if (self->basic_type_mapper.has(copy.name.__ptr__())) {
            var replace = self->basic_type_mapper.get(copy.name.__ptr__());
            copy.name.clear();
            copy.name.append_str(replace);
            copy.loc_file.clear();

            var res = copy.full_path_name(self->pkg, true);
            copy.delete();
            return res;
        }

        var full_name = t->full_path_name(self->pkg, false);
        // if not found, let it crash
        if (!self->type_mapper.has(full_name.__ptr__())) {
            var info = str::from("type not found: ");
            info.append_str(full_name.__ptr__());
            panic(info.c_str);
            info.delete();
        }

        match (self->type_mapper.get(full_name.__ptr__())->unwrap()) {
            symbol_kind::struct_kind => {
                var new_name = mangle_struct_name(full_name.__ptr__());
                copy.name.clear();
                copy.name.append_str(new_name.__ptr__());
                // need to clear loc_file info
                // otherwise for example:
                // std::vec<data::foo>
                //
                // will be wrongly mapped to
                // std::%struct.std.vec<data::foo>
                // but expect to be
                // %struct.std.vec<data::foo>
                copy.loc_file.clear();
                // here we need to clear generic info
                // otherwise for example:
                // std::vec<data::foo>
                //
                // will be wrongly mapped to
                // %struct.std.vec<data::foo><data::foo>
                //         ^^^^^^^^^^^^^^^^^^ name
                //                           ^^^^^^^^^^^ generated from generics
                //
                // but expect to be
                // %struct.std.vec<data::foo>
                copy.generics.clear();

                new_name.delete();
            }
            symbol_kind::enum_kind => {
                var i64_t = type::i64_type();

                // should copy pointer depth too
                i64_t.pointer_depth = copy.pointer_depth;
                copy.reset_with(i64_t.__ptr__());

                i64_t.delete();
            }
            _ => {
                unreachable();
            }
        }

        var res = copy.full_path_name(self->pkg, true);
        copy.delete();
        full_name.delete();
        return res;
    }
}

impl mir2sir {
    pub func generate(self, mctx: mir_context*) {
        self->generate_type_mapper();
        self->emit_const_strings(mctx);
        self->emit_struct(mctx);
        self->emit_func_decl(mctx);
        self->emit_func_impl(mctx);
    }
}