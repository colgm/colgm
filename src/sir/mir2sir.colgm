use std::pair::{ pair };
use std::map::{ hashmap };
use std::str::{ str };
use std::io::{ io };
use std::vec::{ vec };

use mir::mir::*;
use mir::context::{ mir_context, mir_func };
use sir::ssa_name_gen::{ ssa_generator };
use sir::local_scope::{ local_table };
use sir::sir::*;
use sir::context::{ sir_tagged_union, sir_struct, sir_func, sir_context };
use sir::value::{ value_t };
use sir::adjust_va_arg::{ adjust_va_arg };
use sir::replace_ptr_call::{ replace_struct_ptr_call };
use sir::size_calc::{ size_calc };
use sir::detect_redef_extern::{ detect_redef_extern };

use dwarf::dwarf::*;
use dwarf::status::{ DWARF_status };

use sema::symbol_info::{ symbol_kind };
use sema::enumerate::{ colgm_enum };
use sema::structure::{ colgm_struct };
use sema::tagged_union::{ colgm_tagged_union };
use sema::context::{ sema_context };
use sema::type::{ type };

use err::panic::{ panic, unreachable };
use err::span::{ span };
use err::report::{ report };
use util::package::{ package };

use util::cli::{ version };
use util::mangling::{
    mangle_struct_name,
    mangle_tagged_union_name,
    mangle_function_name
};
use util::timestamp::{ maketimestamp };

enum mir_value_kind {
    null, // reserved
    nil_value,
    variable,
    literal,
    primitive,
    func_symbol,
    method,
    struct_symbol,
    tagged_union_symbol,
    enum_symbol
}

struct mir_value_t {
    value_kind: mir_value_kind,
    content: str,
    resolved_type: type
}

impl mir_value_t {
    pub func copy(self) -> mir_value_t* {
        var res = mir_value_t::__alloc__();
        if (res == nil) {
            panic("failed to allocate memory");
        }
        res->value_kind = self->value_kind;
        res->content = self->content.copy_instance();
        res->resolved_type = self->resolved_type.copy_instance();
        return res;
    }

    pub func copy_instance(self) -> mir_value_t {
        return mir_value_t {
            value_kind: self->value_kind,
            content: self->content.copy_instance(),
            resolved_type: self->resolved_type.copy_instance()
        };
    }

    pub func delete(self) {
        self->content.delete();
        self->resolved_type.delete();
    }

    pub func to_value_t(self) -> value_t {
        match (self->value_kind) {
            mir_value_kind::null => return value_t::null("null");
            mir_value_kind::nil_value => {
                return value_t::literal(self->content.__ptr__());
            }
            mir_value_kind::literal => {
                return value_t::literal(self->content.__ptr__());
            }
            mir_value_kind::variable => {
                return value_t::variable(self->content.__ptr__());
            }
            mir_value_kind::primitive => return value_t::null("primitive");
            mir_value_kind::func_symbol => return value_t::null("func");
            mir_value_kind::method => return value_t::null("method");
            mir_value_kind::struct_symbol => return value_t::null("struct");
            mir_value_kind::tagged_union_symbol => return value_t::null("tagged_union");
            mir_value_kind::enum_symbol => return value_t::null("enum");
        }
        // unreachable
        return value_t::null(nil);
    }

    func nil_value(ty: type*) -> mir_value_t {
        return mir_value_t {
            value_kind: mir_value_kind::nil_value,
            content: str::from("null"),
            resolved_type: ty->copy_instance()
        };
    }

    func variable(name: str*, ty: type*) -> mir_value_t {
        return mir_value_t {
            value_kind: mir_value_kind::variable,
            content: name->copy_instance(),
            resolved_type: ty->copy_instance()
        };
    }

    func literal(value: str*, ty: type*) -> mir_value_t {
        return mir_value_t {
            value_kind: mir_value_kind::literal,
            content: value->copy_instance(),
            resolved_type: ty->copy_instance()
        };
    }

    func primitive(value: str*, ty: type*) -> mir_value_t {
        return mir_value_t {
            value_kind: mir_value_kind::primitive,
            content: value->copy_instance(),
            resolved_type: ty->copy_instance()
        };
    }

    func func_symbol(name: str*, ty: type*) -> mir_value_t {
        return mir_value_t {
            value_kind: mir_value_kind::func_symbol,
            content: name->copy_instance(),
            resolved_type: ty->copy_instance()
        };
    }

    func method(name: str*, ty: type*) -> mir_value_t {
        return mir_value_t {
            value_kind: mir_value_kind::method,
            content: name->copy_instance(),
            resolved_type: ty->copy_instance()
        };
    }

    func struct_symbol(name: str*, ty: type*) -> mir_value_t {
        return mir_value_t {
            value_kind: mir_value_kind::struct_symbol,
            content: name->copy_instance(),
            resolved_type: ty->copy_instance()
        };
    }

    func tagged_union_symbol(name: str*, ty: type*) -> mir_value_t {
        return mir_value_t {
            value_kind: mir_value_kind::tagged_union_symbol,
            content: name->copy_instance(),
            resolved_type: ty->copy_instance()
        };
    }

    func enum_symbol(name: str*, ty: type*) -> mir_value_t {
        return mir_value_t {
            value_kind: mir_value_kind::enum_symbol,
            content: name->copy_instance(),
            resolved_type: ty->copy_instance()
        };
    }
}

pub struct mir2sir {
    ctx: sema_context*,
    sctx: sir_context*,
    pkg: package*,
    err: report*,
    sc: size_calc,
    type_mapper: hashmap<str, symbol_kind>,
    basic_type_mapper: hashmap<str, str>,
    primitive_methods: hashmap<str, str>,

    block: sir_block*,
    ssa_gen: ssa_generator,
    array_ssa_gen: ssa_generator,
    
    value_stack: vec<mir_value_t>,

    locals: local_table,

    continue_inst: vec<vec<sir_br*>>,
    break_inst: vec<vec<sir_br*>>,
    branch_jump_out: vec<vec<sir_br*>>,

    dwarf_status: DWARF_status
}

impl mir2sir {
    pub func instance(ctx: sema_context*,
                      sctx: sir_context*,
                      pkg: package*,
                      err: report*) -> mir2sir {
        var res = mir2sir {
            ctx: ctx,
            sctx: sctx,
            pkg: pkg,
            err: err,
            sc: size_calc::instance(pkg),
            type_mapper: hashmap<str, symbol_kind>::instance(),
            basic_type_mapper: hashmap<str, str>::instance(),
            primitive_methods: hashmap<str, str>::instance(),
            block: nil,
            ssa_gen: ssa_generator::instance(),
            array_ssa_gen: ssa_generator::instance(),
            value_stack: vec<mir_value_t>::instance(),
            locals: local_table::instance(),
            continue_inst: vec<vec<sir_br*>>::instance(),
            break_inst: vec<vec<sir_br*>>::instance(),
            branch_jump_out: vec<vec<sir_br*>>::instance(),
            dwarf_status: DWARF_status::instance()
        };
        res.init_basic_type_mapper();
        res.init_primitive__size_methods();
        return res;
    }

    pub func delete(self) {
        self->sc.delete();
        self->type_mapper.delete();
        self->basic_type_mapper.delete();
        self->primitive_methods.delete();
        self->value_stack.delete();
        self->locals.delete();

        // do not need to delete ptr in them
        // all ptrs are inserted into sir_func's body
        self->continue_inst.delete();
        self->break_inst.delete();
        self->branch_jump_out.delete();

        self->dwarf_status.delete();
    }

    func init_basic_type_mapper(self) {
        var i64_s = str::from("i64");
        var i32_s = str::from("i32");
        var i16_s = str::from("i16");
        var i8_s = str::from("i8");
        var i1_s = str::from("i1");
        var u64_s = str::from("u64");
        var u32_s = str::from("u32");
        var u16_s = str::from("u16");
        var u8_s = str::from("u8");
        var f64_s = str::from("f64");
        var f32_s = str::from("f32");
        var void_s = str::from("void");
        var bool_s = str::from("bool");
        defer {
            i64_s.delete();
            i32_s.delete();
            i16_s.delete();
            i8_s.delete();
            i1_s.delete();
            u64_s.delete();
            u32_s.delete();
            u16_s.delete();
            u8_s.delete();
            f64_s.delete();
            f32_s.delete();
            void_s.delete();
            bool_s.delete();
        }

        var double_s = str::from("double");
        var float_s = str::from("float");
        defer {
            double_s.delete();
            float_s.delete();
        }

        self->basic_type_mapper.insert(i64_s.__ptr__(), i64_s.__ptr__());
        self->basic_type_mapper.insert(i32_s.__ptr__(), i32_s.__ptr__());
        self->basic_type_mapper.insert(i16_s.__ptr__(), i16_s.__ptr__());
        self->basic_type_mapper.insert(i8_s.__ptr__(), i8_s.__ptr__());
        self->basic_type_mapper.insert(u64_s.__ptr__(), i64_s.__ptr__());
        self->basic_type_mapper.insert(u32_s.__ptr__(), i32_s.__ptr__());
        self->basic_type_mapper.insert(u16_s.__ptr__(), i16_s.__ptr__());
        self->basic_type_mapper.insert(u8_s.__ptr__(), i8_s.__ptr__());
        self->basic_type_mapper.insert(f64_s.__ptr__(), double_s.__ptr__());
        self->basic_type_mapper.insert(f32_s.__ptr__(), float_s.__ptr__());
        self->basic_type_mapper.insert(void_s.__ptr__(), void_s.__ptr__());
        self->basic_type_mapper.insert(bool_s.__ptr__(), i1_s.__ptr__());
    }

    func init_primitive__size_methods(self) {
        var size_1 = str::from("1");
        var size_2 = str::from("2");
        var size_4 = str::from("4");
        var size_8 = str::from("8");
        defer {
            size_1.delete();
            size_2.delete();
            size_4.delete();
            size_8.delete();
        }

        var i64_s = str::from("i64.__size__");
        var i32_s = str::from("i32.__size__");
        var i16_s = str::from("i16.__size__");
        var i8_s = str::from("i8.__size__");
        var i1_s = str::from("i1.__size__");
        var u64_s = str::from("u64.__size__");
        var u32_s = str::from("u32.__size__");
        var u16_s = str::from("u16.__size__");
        var u8_s = str::from("u8.__size__");
        var f64_s = str::from("f64.__size__");
        var f32_s = str::from("f32.__size__");
        var bool_s = str::from("bool.__size__");
        defer {
            i64_s.delete();
            i32_s.delete();
            i16_s.delete();
            i8_s.delete();
            i1_s.delete();
            u64_s.delete();
            u32_s.delete();
            u16_s.delete();
            u8_s.delete();
            f64_s.delete();
            f32_s.delete();
            bool_s.delete();
        }

        self->primitive_methods.insert(i64_s.__ptr__(), size_8.__ptr__());
        self->primitive_methods.insert(i32_s.__ptr__(), size_4.__ptr__());
        self->primitive_methods.insert(i16_s.__ptr__(), size_2.__ptr__());
        self->primitive_methods.insert(i8_s.__ptr__(), size_1.__ptr__());
        self->primitive_methods.insert(u64_s.__ptr__(), size_8.__ptr__());
        self->primitive_methods.insert(u32_s.__ptr__(), size_4.__ptr__());
        self->primitive_methods.insert(u16_s.__ptr__(), size_2.__ptr__());
        self->primitive_methods.insert(u8_s.__ptr__(), size_1.__ptr__());
        self->primitive_methods.insert(f64_s.__ptr__(), size_8.__ptr__());
        self->primitive_methods.insert(f32_s.__ptr__(), size_4.__ptr__());
        self->primitive_methods.insert(bool_s.__ptr__(), size_1.__ptr__());
    }
}

impl mir2sir {
    func emit_tagged_union(self, mctx: mir_context*) {
        foreach (var i; mctx->tagged_unions) {
            var m_un = i.get();

            var s_ty = type::instance();
            s_ty.name.append_str(m_un->name.__ptr__());
            s_ty.loc_file.append_str(m_un->location.file.__ptr__());
            defer s_ty.delete();
            
            var s_ty_name = s_ty.full_path_name(self->pkg, false);
            var s_ty_llvm_name = mangle_tagged_union_name(s_ty_name.__ptr__());
            defer {
                s_ty_name.delete();
                s_ty_llvm_name.delete();
            }

            var s_un = sir_tagged_union::instance(
                s_ty_llvm_name.__ptr__(),
                m_un->location.__ptr__(),
                m_un->total_size,
                m_un->align
            );
            defer s_un.delete();

            if (m_un->max_align_type.is_array) {
                var mapped_type = self->array_type_mapping(
                    m_un->max_align_type.__ptr__()
                );
                defer mapped_type.delete();

                s_un.member_type.push(mapped_type.__ptr__());
            } else {
                var mapped_type = self->type_mapping(
                    m_un->max_align_type.__ptr__()
                );
                defer mapped_type.delete();

                s_un.member_type.push(mapped_type.__ptr__());
            }

            if (m_un->union_size > m_un->max_align_type_size) {
                var char_arr_size =  m_un->union_size - m_un->max_align_type_size;
                var char_arr_ty = str::from("[");
                char_arr_ty.append_u64(char_arr_size);
                char_arr_ty.append(" x i8]");
                defer char_arr_ty.delete();

                s_un.member_type.push(char_arr_ty.__ptr__());
            }

            self->sctx->tagged_union_decls.push(s_un.__ptr__());
        }
    }

    func emit_struct(self, mctx: mir_context*) {
        foreach (var i; mctx->structs) {
            var m_stct = i.get();

            var s_ty = type::instance();
            s_ty.name.append_str(m_stct->name.__ptr__());
            s_ty.loc_file.append_str(m_stct->location.file.__ptr__());
            defer s_ty.delete();
            
            var s_ty_name = s_ty.full_path_name(self->pkg, false);
            var s_ty_llvm_name = mangle_struct_name(s_ty_name.__ptr__());
            defer {
                s_ty_name.delete();
                s_ty_llvm_name.delete();
            }

            var s_stct = sir_struct::instance(
                s_ty_llvm_name.__ptr__(),
                m_stct->location.__ptr__(),
                m_stct->size,
                m_stct->align
            );
            defer s_stct.delete();

            foreach (var j; m_stct->field_type) {
                var m_field = j.get();
                if (m_field->is_array) {
                    var mapped_type = self->array_type_mapping(m_field);
                    defer mapped_type.delete();

                    s_stct.field_type.push(mapped_type.__ptr__());
                } else {
                    var mapped_type = self->type_mapping(m_field);
                    defer mapped_type.delete();

                    s_stct.field_type.push(mapped_type.__ptr__());
                }
            }

            self->sctx->struct_decls.push(s_stct.__ptr__());
        }
    }

    func emit_func_decl(self, mctx: mir_context*) {
        foreach (var i; mctx->decls) {
            var m_func = i.get();
            var s_func = sir_func::instance(
                m_func->name.__ptr__(),
                m_func->location.__ptr__()
            );
            s_func.set_attributes(m_func->attributes.__ptr__());
            s_func.with_va_args = m_func->with_va_args;
            defer s_func.delete();

            var ret_type_name = self->type_mapping(m_func->return_type.__ptr__());
            defer ret_type_name.delete();

            s_func.return_type.append_str(ret_type_name.__ptr__());

            foreach (var j; m_func->params) {
                var m_param = j.get();

                var mapped_type = self->type_mapping(m_param->value.__ptr__());
                defer mapped_type.delete();

                var p_pair = pair<str, str>::instance(
                    m_param->key.__ptr__(),
                    mapped_type.__ptr__()
                );
                defer p_pair.delete();

                s_func.params.push(p_pair.__ptr__());
            }

            self->sctx->func_decls.push(s_func.__ptr__());
        }
    }

    func process_print(self, curr: u64, total: u64) {
        if (curr + 1 != total && (curr + 1) % 100 != 0) {
            return;
        }
        io::stdout().green().out("[  MIR2SIR ] ").reset();
        io::stdout().out("Generating function ");
        io::stdout().light_cyan().out("(").reset();
        if (curr + 1 != total) {
            io::stdout().light_orange();
        } else {
            io::stdout().light_cyan();
        }
        io::stdout().out_u64(curr + 1).reset();
        io::stdout().light_cyan().out("/").out_u64(total).out(")").reset();
        if (curr + 1 != total) {
            io::stdout().out("\r");
        }
    }

    func emit_func_impl(self, mctx: mir_context*) {
        var ts = maketimestamp();
        ts.stamp();

        foreach (var i; mctx->impls) {
            self->process_print(i.index(), mctx->impls.size);
            var m_func = i.get();
            var m_mangled_name = mangle_function_name(m_func->name.__ptr__());
            defer m_mangled_name.delete();

            var s_func = sir_func::instance(
                m_mangled_name.__ptr__(),
                m_func->location.__ptr__()
            );
            s_func.set_attributes(m_func->attributes.__ptr__());
            defer s_func.delete();

            var ret_type_name = self->type_mapping(m_func->return_type.__ptr__());
            defer ret_type_name.delete();
            s_func.return_type.append_str(ret_type_name.__ptr__());

            // push local scope
            self->locals.push();
            self->locals.local_scope_depth = 0;

            foreach (var j; m_func->params) {
                var m_param = j.get();
                var mapped_type = self->type_mapping(m_param->value.__ptr__());
                defer mapped_type.delete();

                var param_name = m_param->key.copy_instance();
                param_name.append(".param");
                defer param_name.delete();

                self->locals.elem.back()->insert(
                    m_param->key.__ptr__(),
                    m_param->key.__ptr__()
                );

                var p_pair = pair<str, str>::instance(
                    param_name.__ptr__(),
                    mapped_type.__ptr__()
                );
                defer p_pair.delete();

                s_func.params.push(p_pair.__ptr__());
            }

            // if debug mode is enabled, scope_index should not be DI_ERROR_INDEX
            if (self->dwarf_status.impl_debug_info.has(m_func->name.__ptr__())) {
                self->dwarf_status.scope_index = self->dwarf_status
                                                     .impl_debug_info
                                                     .get(m_func->name.__ptr__());
                s_func.debug_info_index = self->dwarf_status.scope_index;
            } else {
                self->dwarf_status.scope_index = DI_ERROR_INDEX();
            }

            self->ssa_gen.clear();
            self->array_ssa_gen.clear();
            self->value_stack.clear();

            s_func.body = sir_block::new();
            self->block = s_func.body;
            self->generate_func_impl_from_mir_func(m_func);
            self->block = nil;

            self->sctx->func_impls.push(s_func.__ptr__());

            // pop local scope
            self->locals.pop();
        }
        io::stdout().out(" ").out_f64(ts.elapsed_msec()).out(" ms\n");
    }
}

impl mir2sir {
    func generate_type_mapper(self) {
        foreach (var i; self->ctx->global->domain) {
            var dm = i.value();
            foreach (var j; dm->enums) {
                var e_type = type::instance();
                e_type.name.append_str(j.value()->name.__ptr__());
                e_type.loc_file.append_str(j.value()->location.file.__ptr__());
                defer e_type.delete();
                
                var e_name = e_type.full_path_name(self->pkg, false);
                defer e_name.delete();

                self->type_mapper.insert(e_name.__ptr__(), symbol_kind::enum_kind);
            }
            foreach (var j; dm->structs) {
                var s_type = type::instance();
                s_type.name.append_str(j.value()->name.__ptr__());
                s_type.loc_file.append_str(j.value()->location.file.__ptr__());
                defer s_type.delete();

                var s_name = s_type.full_path_name(self->pkg, false);
                defer s_name.delete();

                self->type_mapper.insert(s_name.__ptr__(), symbol_kind::struct_kind);
            }
            foreach (var j; dm->tagged_unions) {
                var tu_type = type::instance();
                tu_type.name.append_str(j.value()->name.__ptr__());
                tu_type.loc_file.append_str(j.value()->location.file.__ptr__());
                defer tu_type.delete();

                var tu_name = tu_type.full_path_name(self->pkg, false);
                defer tu_name.delete();

                self->type_mapper.insert(tu_name.__ptr__(), symbol_kind::tagged_union_kind);
            }
        }
    }

    func type_mapping(self, t: type*) -> str {
        var copy = t->copy_instance();
        defer copy.delete();

        // basic type mapping
        if (self->basic_type_mapper.has(copy.name.__ptr__())) {
            var replace = self->basic_type_mapper.get(copy.name.__ptr__());
            copy.name.clear();
            copy.name.append_str(replace);
            copy.loc_file.clear();

            var res = copy.full_path_name(self->pkg, true);
            // copy will delete here, do not merge definition with return statement
            return res;
        }

        var full_name = t->full_path_name(self->pkg, false);
        defer full_name.delete();

        // if not found, let it crash
        if (!self->type_mapper.has(full_name.__ptr__())) {
            var info = str::from("type not found: \"");
            defer info.delete();

            info.append_str(full_name.__ptr__())->append("\"");
            panic(info.c_str);
        }

        match (self->type_mapper.get(full_name.__ptr__())) {
            symbol_kind::struct_kind => {
                var new_name = mangle_struct_name(full_name.__ptr__());
                defer new_name.delete();

                copy.name.clear();
                copy.name.append_str(new_name.__ptr__());
                // need to clear loc_file info
                // otherwise for example:
                // std::vec<data::foo>
                //
                // will be wrongly mapped to
                // std::%struct.std.vec<data::foo>
                // but expect to be
                // %struct.std.vec<data::foo>
                copy.loc_file.clear();
                // here we need to clear generic info
                // otherwise for example:
                // std::vec<data::foo>
                //
                // will be wrongly mapped to
                // %struct.std.vec<data::foo><data::foo>
                //         ^^^^^^^^^^^^^^^^^^ name
                //                           ^^^^^^^^^^^ generated from generics
                //
                // but expect to be
                // %struct.std.vec<data::foo>
                copy.generics.clear();
            }
            symbol_kind::tagged_union_kind => {
                var new_name = mangle_tagged_union_name(full_name.__ptr__());
                defer new_name.delete();

                copy.name.clear();
                copy.name.append_str(new_name.__ptr__());
                copy.loc_file.clear();
            }
            symbol_kind::enum_kind => {
                var i64_t = type::i64_type();
                defer i64_t.delete();

                // should copy pointer depth too
                i64_t.pointer_depth = copy.pointer_depth;
                copy.reset_with(i64_t.__ptr__());
            }
            _ => {
                panic("unsupported type kind");
            }
        }

        var res = copy.full_path_name(self->pkg, true);
        // copy will delete here, do not merge definition with return statement
        return res;
    }

    func array_type_mapping(self, t: type*) -> str {
        if (!t->is_array) {
            panic("not array type");
        }

        var copy = t->ref_copy();
        copy.is_array = false;
        defer copy.delete();

        var mapped_type = self->type_mapping(copy.__ptr__());
        defer mapped_type.delete();

        var array_name = str::from("[");
        array_name.append_u64(copy.array_length)->append(" x ");
        array_name.append_str(mapped_type.__ptr__())->append("]");
        return array_name;
    }
}

impl mir2sir {
    func generate_func_impl_from_mir_func(self, m_func: mir_func*) {
        foreach (var i; m_func->params) {
            var m_param = i.get();
            var mapped_type = self->type_mapping(m_param->value.__ptr__());
            defer mapped_type.delete();

            var param_name = m_param->key.copy_instance();
            param_name.append(".param");
            defer param_name.delete();

            self->block->add_alloca(
                sir_alloca::new(m_param->key.__ptr__(), mapped_type.__ptr__())
            );

            var source = value_t::variable(param_name.__ptr__());
            var target = value_t::variable(m_param->key.__ptr__());
            defer {
                source.delete();
                target.delete();
            }

            self->block->add_stmt(sir_store::new(
                mapped_type.__ptr__(),
                source.__ptr__(),
                target.__ptr__()
            ) => sir*);
        }

        self->visit_mir_block(m_func->block);
    }
}

impl mir2sir {
    func visit_mir_block(self, n: mir_block*) {
        // push local scope
        self->locals.push();

        foreach (var i; n->content) {
            self->visit(i.get());
        }

        // pop local scope
        self->locals.pop();
    }

    func visit_mir_unary(self, n: mir_unary*) {
        self->visit(n->value => mir*);

        var source = self->value_stack.back()->copy_instance();
        defer source.delete();
        self->value_stack.pop_back();

        var source_value = source.to_value_t();
        defer source_value.delete();
        var source_ty = self->type_mapping(source.resolved_type.__ptr__());
        defer source_ty.delete();

        var temp_var = self->ssa_gen.create();
        defer temp_var.delete();
        var temp_var_value = value_t::variable(temp_var.__ptr__());
        defer temp_var_value.delete();

        if (n->op == mir_unary_opr::neg) {
            self->block->add_stmt(sir_neg::new(
                source_value.__ptr__(),
                temp_var_value.__ptr__(),
                source.resolved_type.is_integer(),
                source_ty.__ptr__()
            ) => sir*);
        } else if (n->op == mir_unary_opr::bnot) {
            self->block->add_stmt(sir_bnot::new(
                source_value.__ptr__(),
                temp_var_value.__ptr__(),
                source_ty.__ptr__()
            ) => sir*);
        } else if (n->op == mir_unary_opr::lnot) {
            self->block->add_stmt(sir_lnot::new(
                source_value.__ptr__(),
                temp_var_value.__ptr__(),
                source_ty.__ptr__()
            ) => sir*);
        }

        var v = mir_value_t::variable(temp_var.__ptr__(), n->resolved_type.__ptr__());
        defer v.delete();

        self->value_stack.push(v.__ptr__());
    }

    func generate_and(self, n: mir_binary*) {
        var i1_name = str::from("i1");
        var temp_0 = self->ssa_gen.create();
        var temp_0_value = value_t::variable(temp_0.__ptr__());
        var temp_0_real = str::from("_");
        temp_0_real.append_str(temp_0.__ptr__())->append(".real");
        defer {
            i1_name.delete();
            temp_0.delete();
            temp_0_value.delete();
            temp_0_real.delete();
        }

        self->block->add_move_register(sir_alloca::new(
            temp_0_real.__ptr__(),
            i1_name.__ptr__()
        ));
        self->block->add_stmt(sir_temp_ptr::new(
            temp_0.__ptr__(),
            temp_0_real.__ptr__(),
            i1_name.__ptr__(),
            ""
        ) => sir*);

        self->visit(n->left => mir*);

        var left = self->value_stack.back()->copy_instance();
        var left_value = left.to_value_t();
        defer {
            left.delete();
            left_value.delete();
        }
        self->value_stack.pop_back();
        self->block->add_stmt(sir_store::new(
            i1_name.__ptr__(),
            left_value.__ptr__(),
            temp_0_value.__ptr__()
        ) => sir*);

        var true_label_index = self->block->stmts.size + 1;
        var br = sir_br_cond::new(
            left_value.__ptr__(),
            true_label_index,
            0
        );
        self->block->add_stmt(br => sir*);
        self->block->add_stmt(sir_label::new(true_label_index, "and.true") => sir*);

        self->visit(n->right => mir*);
        var right = self->value_stack.back()->copy_instance();
        var right_value = right.to_value_t();
        defer {
            right.delete();
            right_value.delete();
        }
        self->value_stack.pop_back();
        self->block->add_stmt(sir_store::new(
            i1_name.__ptr__(),
            right_value.__ptr__(),
            temp_0_value.__ptr__()
        ) => sir*);

        var next_label_index = self->block->stmts.size + 1;
        self->block->add_stmt(sir_br::new(next_label_index) => sir*);

        var false_label_index = self->block->stmts.size;
        br->label_false = false_label_index;
        self->block->add_stmt(sir_label::new(next_label_index, "and.false") => sir*);

        var temp_1 = self->ssa_gen.create();
        var temp_1_value = value_t::variable(temp_1.__ptr__());
        defer {
            temp_1.delete();
            temp_1_value.delete();
        }
        self->block->add_stmt(sir_load::new(
            i1_name.__ptr__(),
            temp_0_value.__ptr__(),
            temp_1_value.__ptr__()
        ) => sir*);

        var v = mir_value_t::variable(temp_1.__ptr__(), n->resolved_type.__ptr__());
        defer v.delete();

        self->value_stack.push(v.__ptr__());
    }

    func generate_or(self, n: mir_binary*) {
        var i1_name = str::from("i1");
        var temp_0 = self->ssa_gen.create();
        var temp_0_value = value_t::variable(temp_0.__ptr__());
        var temp_0_real = str::from("_");
        temp_0_real.append_str(temp_0.__ptr__())->append(".real");
        defer {
            i1_name.delete();
            temp_0.delete();
            temp_0_value.delete();
            temp_0_real.delete();
        }

        self->block->add_move_register(sir_alloca::new(
            temp_0_real.__ptr__(),
            i1_name.__ptr__()
        ));
        self->block->add_stmt(sir_temp_ptr::new(
            temp_0.__ptr__(),
            temp_0_real.__ptr__(),
            i1_name.__ptr__(),
            ""
        ) => sir*);

        self->visit(n->left => mir*);
        var left = self->value_stack.back()->copy_instance();
        var left_value = left.to_value_t();
        defer {
            left.delete();
            left_value.delete();
        }
        self->value_stack.pop_back();
        self->block->add_stmt(sir_store::new(
            i1_name.__ptr__(),
            left_value.__ptr__(),
            temp_0_value.__ptr__()
        ) => sir*);

        var false_label_index = self->block->stmts.size + 1;
        var br = sir_br_cond::new(
            left_value.__ptr__(),
            0,
            false_label_index
        );
        self->block->add_stmt(br => sir*);
        self->block->add_stmt(sir_label::new(false_label_index, "or.false") => sir*);

        self->visit(n->right => mir*);
        var right = self->value_stack.back()->copy_instance();
        var right_value = right.to_value_t();
        defer {
            right.delete();
            right_value.delete();
        }
        self->value_stack.pop_back();
        self->block->add_stmt(sir_store::new(
            i1_name.__ptr__(),
            right_value.__ptr__(),
            temp_0_value.__ptr__()
        ) => sir*);

        var next_label_index = self->block->stmts.size + 1;
        self->block->add_stmt(sir_br::new(next_label_index) => sir*);

        var true_label_index = self->block->stmts.size;
        br->label_true = true_label_index;
        self->block->add_stmt(sir_label::new(next_label_index, "or.true") => sir*);

        var temp_1 = self->ssa_gen.create();
        var temp_1_value = value_t::variable(temp_1.__ptr__());
        defer {
            temp_1.delete();
            temp_1_value.delete();
        }
        self->block->add_stmt(sir_load::new(
            i1_name.__ptr__(),
            temp_0_value.__ptr__(),
            temp_1_value.__ptr__()
        ) => sir*);

        var v = mir_value_t::variable(temp_1.__ptr__(), n->resolved_type.__ptr__());
        defer v.delete();

        self->value_stack.push(v.__ptr__());
    }

    func visit_mir_binary(self, n: mir_binary*) {
        if (n->op == mir_binary_opr::cmpand) {
            self->generate_and(n);
            return;
        } else if (n->op == mir_binary_opr::cmpor) {
            self->generate_or(n);
            return;
        }

        self->visit(n->left => mir*);
        var left = self->value_stack.back()->copy_instance();
        var left_value = left.to_value_t();
        var left_ty = self->type_mapping(left.resolved_type.__ptr__());
        defer {
            left.delete();
            left_value.delete();
            left_ty.delete();
        }
        self->value_stack.pop_back();

        self->visit(n->right => mir*);
        var right = self->value_stack.back()->copy_instance();
        var right_value = right.to_value_t();
        defer {
            right.delete();
            right_value.delete();
        }
        self->value_stack.pop_back();

        var temp_var = self->ssa_gen.create();
        var temp_var_value = value_t::variable(temp_var.__ptr__());
        defer {
            temp_var.delete();
            temp_var_value.delete();
        }

        var flag_is_integer = left.resolved_type.is_integer() ||
                              left.resolved_type.is_pointer() ||
                              left.resolved_type.is_bool() ||
                              left_ty.eq_const("i64");

        match (n->op) {
            mir_binary_opr::add => {
                self->block->add_stmt(sir_add::new(
                    left_value.__ptr__(),
                    right_value.__ptr__(),
                    temp_var_value.__ptr__(),
                    left.resolved_type.is_integer(),
                    left_ty.__ptr__()
                ) => sir*);
            }
            mir_binary_opr::sub => {
                self->block->add_stmt(sir_sub::new(
                    left_value.__ptr__(),
                    right_value.__ptr__(),
                    temp_var_value.__ptr__(),
                    left.resolved_type.is_integer(),
                    left_ty.__ptr__()
                ) => sir*);
            }
            mir_binary_opr::mul => {
                self->block->add_stmt(sir_mul::new(
                    left_value.__ptr__(),
                    right_value.__ptr__(),
                    temp_var_value.__ptr__(),
                    left.resolved_type.is_integer(),
                    left_ty.__ptr__()
                ) => sir*);
            }
            mir_binary_opr::div => {
                self->block->add_stmt(sir_div::new(
                    left_value.__ptr__(),
                    right_value.__ptr__(),
                    temp_var_value.__ptr__(),
                    left.resolved_type.is_integer(),
                    !left.resolved_type.is_unsigned(),
                    left_ty.__ptr__()
                ) => sir*);
            }
            mir_binary_opr::rem => {
                self->block->add_stmt(sir_rem::new(
                    left_value.__ptr__(),
                    right_value.__ptr__(),
                    temp_var_value.__ptr__(),
                    left.resolved_type.is_integer(),
                    !left.resolved_type.is_unsigned(),
                    left_ty.__ptr__()
                ) => sir*);
            }
            mir_binary_opr::band => {
                self->block->add_stmt(sir_band::new(
                    left_value.__ptr__(),
                    right_value.__ptr__(),
                    temp_var_value.__ptr__(),
                    left_ty.__ptr__()
                ) => sir*);
            }
            mir_binary_opr::bxor => {
                self->block->add_stmt(sir_bxor::new(
                    left_value.__ptr__(),
                    right_value.__ptr__(),
                    temp_var_value.__ptr__(),
                    left_ty.__ptr__()
                ) => sir*);
            }
            mir_binary_opr::bor => {
                self->block->add_stmt(sir_bor::new(
                    left_value.__ptr__(),
                    right_value.__ptr__(),
                    temp_var_value.__ptr__(),
                    left_ty.__ptr__()
                ) => sir*);
            }
            mir_binary_opr::cmpeq => {
                self->block->add_stmt(sir_cmp::new(
                    sir_cmp_kind::cmp_eq,
                    left_value.__ptr__(),
                    right_value.__ptr__(),
                    temp_var_value.__ptr__(),
                    flag_is_integer,
                    !left.resolved_type.is_unsigned(),
                    left_ty.__ptr__()
                ) => sir*);
            }
            mir_binary_opr::cmpne => {
                self->block->add_stmt(sir_cmp::new(
                    sir_cmp_kind::cmp_neq,
                    left_value.__ptr__(),
                    right_value.__ptr__(),
                    temp_var_value.__ptr__(),
                    flag_is_integer,
                    !left.resolved_type.is_unsigned(),
                    left_ty.__ptr__()
                ) => sir*);
            }
            mir_binary_opr::grt => {
                self->block->add_stmt(sir_cmp::new(
                    sir_cmp_kind::cmp_gt,
                    left_value.__ptr__(),
                    right_value.__ptr__(),
                    temp_var_value.__ptr__(),
                    left.resolved_type.is_integer(),
                    !left.resolved_type.is_unsigned(),
                    left_ty.__ptr__()
                ) => sir*);
            }
            mir_binary_opr::geq => {
                self->block->add_stmt(sir_cmp::new(
                    sir_cmp_kind::cmp_ge,
                    left_value.__ptr__(),
                    right_value.__ptr__(),
                    temp_var_value.__ptr__(),
                    left.resolved_type.is_integer(),
                    !left.resolved_type.is_unsigned(),
                    left_ty.__ptr__()
                ) => sir*);
            }
            mir_binary_opr::less => {
                self->block->add_stmt(sir_cmp::new(
                    sir_cmp_kind::cmp_lt,
                    left_value.__ptr__(),
                    right_value.__ptr__(),
                    temp_var_value.__ptr__(),
                    left.resolved_type.is_integer(),
                    !left.resolved_type.is_unsigned(),
                    left_ty.__ptr__()
                ) => sir*);
            }
            mir_binary_opr::leq => {
                self->block->add_stmt(sir_cmp::new(
                    sir_cmp_kind::cmp_le,
                    left_value.__ptr__(),
                    right_value.__ptr__(),
                    temp_var_value.__ptr__(),
                    left.resolved_type.is_integer(),
                    !left.resolved_type.is_unsigned(),
                    left_ty.__ptr__()
                ) => sir*);
            }
            _ => {}
        }

        var v = mir_value_t::variable(temp_var.__ptr__(), n->resolved_type.__ptr__());
        defer v.delete();

        self->value_stack.push(v.__ptr__());
    }

    func visit_mir_type_convert(self, n: mir_type_convert*) {
        self->visit(n->source => mir*);

        var source = self->value_stack.back()->copy_instance();
        defer source.delete();

        self->value_stack.pop_back();

        var temp_var = self->ssa_gen.create();
        defer temp_var.delete();

        var source_value = source.to_value_t();
        var temp_var_value = value_t::variable(temp_var.__ptr__());
        var source_ty = self->type_mapping(source.resolved_type.__ptr__());
        var n_ty = self->type_mapping(n->target.__ptr__());
        defer {
            source_value.delete();
            temp_var_value.delete();
            source_ty.delete();
            n_ty.delete();
        }

        self->block->add_stmt(sir_type_convert::new(
            source_value.__ptr__(),
            temp_var_value.__ptr__(),
            source_ty.__ptr__(),
            n_ty.__ptr__(),
            source.resolved_type.is_unsigned(),
            n->target.is_unsigned(),
            self->generate_DI_location(n->base.location.__ptr__())
        ) => sir*);

        var v = mir_value_t::variable(
            temp_var.__ptr__(),
            n->target.__ptr__()
        );
        defer v.delete();

        self->value_stack.push(v.__ptr__());        
    }

    func visit_mir_nil(self, n: mir_nil*) {
        var v = mir_value_t::nil_value(n->resolved_type.__ptr__());
        defer v.delete();

        self->value_stack.push(v.__ptr__());
    }

    func visit_mir_number(self, n: mir_number*) {
        var literal = n->value.copy_instance();
        defer literal.delete();

        if (!n->resolved_type.is_integer() &&
            !literal.contains('.')) {
            literal.append(".0");
        }

        var v = mir_value_t::literal(literal.__ptr__(), n->resolved_type.__ptr__());
        defer v.delete();

        self->value_stack.push(v.__ptr__());
    }

    func visit_mir_string(self, n: mir_string*) {
        var temp = self->ssa_gen.create();
        defer temp.delete();

        var v = value_t::variable(temp.__ptr__());
        defer v.delete();

        if (!self->sctx->const_strings.has(n->value.__ptr__())) {
            self->sctx->const_strings.insert(
                n->value.__ptr__(),
                self->sctx->const_strings.size
            );
        }
        self->block->add_stmt(sir_str::new(
            self->sctx->const_strings.get(n->value.__ptr__()),
            n->value.size + 1,
            v.__ptr__(),
            self->generate_DI_location(n->base.location.__ptr__())
        ) => sir*);

        var sv = mir_value_t::variable(temp.__ptr__(), n->resolved_type.__ptr__());
        defer sv.delete();

        self->value_stack.push(sv.__ptr__());
    }

    func visit_mir_char(self, n: mir_char*) {
        var ch = str::from_i64(n->value.get(0) => i64);
        defer ch.delete();

        var v = mir_value_t::literal(ch.__ptr__(), n->resolved_type.__ptr__());
        defer v.delete();

        self->value_stack.push(v.__ptr__());
    }

    func visit_mir_bool(self, n: mir_bool*) {
        var flag = str::instance();
        if (n->value) {
            flag.append("1");
        } else {
            flag.append("0");
        }
        defer flag.delete();

        var v = mir_value_t::literal(flag.__ptr__(), n->resolved_type.__ptr__());
        defer v.delete();

        self->value_stack.push(v.__ptr__());
    }

    func visit_mir_array(self, n: mir_array*) {
        var index = self->array_ssa_gen.create();
        defer index.delete();

        var temp_0 = str::from("arr.");
        defer temp_0.delete();
        var temp_1 = str::from("arr.");
        defer temp_1.delete();
        temp_0.append_str(index.__ptr__())->append(".ptr");
        temp_1.append_str(index.__ptr__())->append(".cast_ptr");

        var ref_copy = n->resolved_type.ref_copy();
        defer ref_copy.delete();

        var array_elem_type = self->type_mapping(ref_copy.__ptr__());
        defer array_elem_type.delete();

        var ati = array_type_t::instance(
            array_elem_type.__ptr__(),
            n->size
        );
        defer ati.delete();

        var array_new = sir_alloca::new_array(
            temp_0.__ptr__(),
            ati.__ptr__()
        );
        self->block->add_alloca(array_new);

        var v_temp_0 = value_t::variable(temp_0.__ptr__());
        defer v_temp_0.delete();
        var v_temp_1 = value_t::variable(temp_1.__ptr__());
        defer v_temp_1.delete();

        var cv = sir_array_cast::new(
            v_temp_0.__ptr__(),
            v_temp_1.__ptr__(),
            array_elem_type.__ptr__(),
            n->size,
            self->generate_DI_location(n->base.location.__ptr__())
        );
        self->block->add_stmt(cv => sir*);

        if (n->value != nil) {
            var i64_type = str::from("i64");
            defer i64_type.delete();

            foreach (var i; n->value->content) {
                var vn = i.get();
                var temp = self->ssa_gen.create();
                defer temp.delete();

                var v_temp = value_t::variable(temp.__ptr__());
                defer v_temp.delete();

                var index_str = str::from_u64(i.index());
                defer index_str.delete();
                var index_value = value_t::literal(index_str.__ptr__());
                defer index_value.delete();

                self->block->add_stmt(sir_get_index::new(
                    v_temp_1.__ptr__(),
                    v_temp.__ptr__(),
                    index_value.__ptr__(),
                    array_elem_type.__ptr__(),
                    i64_type.__ptr__(),
                    self->generate_DI_location(n->base.location.__ptr__())
                ) => sir*);

                self->visit(vn);
                var res = self->value_stack.back()->copy_instance();
                defer res.delete();

                var res_value = res.to_value_t();
                defer res_value.delete();

                self->value_stack.pop_back();
                self->block->add_stmt(sir_store::new(
                    array_elem_type.__ptr__(),
                    res_value.__ptr__(),
                    v_temp.__ptr__()
                ) => sir*);
            }
        }

        var v = mir_value_t::variable(temp_1.__ptr__(), n->resolved_type.__ptr__());
        defer v.delete();

        self->value_stack.push(v.__ptr__());
    }

    func visit_mir_struct_init(self, n: mir_struct_init*) {
        var temp_var = self->ssa_gen.create();
        defer temp_var.delete();

        var temp_var_real = str::from("_");
        temp_var_real.append_str(temp_var.__ptr__())->append(".real");
        defer temp_var_real.delete();

        var temp_var_value = value_t::variable(temp_var.__ptr__());
        defer temp_var_value.delete();

        var n_ty = self->type_mapping(n->resolved_type.__ptr__());
        defer n_ty.delete();

        self->block->add_move_register(sir_alloca::new(
            temp_var_real.__ptr__(),
            n_ty.__ptr__()
        ));
        self->block->add_stmt(sir_temp_ptr::new(
            temp_var.__ptr__(),
            temp_var_real.__ptr__(),
            n_ty.__ptr__(),
            ""
        ) => sir*);
        self->block->add_stmt(sir_zeroinitializer::new(
            temp_var_value.__ptr__(),
            n_ty.__ptr__(),
            self->generate_DI_location(n->base.location.__ptr__())
        ) => sir*);

        var name_for_search = n->resolved_type.generic_name(self->pkg);
        defer name_for_search.delete();

        var dm = self->ctx->get_domain(n->resolved_type.loc_file.__ptr__());

        if (dm->structs.has(name_for_search.__ptr__())) {        
            var st = dm->structs.get(name_for_search.__ptr__());

            foreach (var i; n->fields) {
                var target = self->ssa_gen.create();
                defer target.delete();

                var target_value = value_t::variable(target.__ptr__());
                defer target_value.delete();

                var index = st->field_index(i.get()->name.__ptr__());
                self->block->add_stmt(sir_get_field::new(
                    target_value.__ptr__(),
                    temp_var_value.__ptr__(),
                    n_ty.__ptr__(),
                    index,
                    self->generate_DI_location(i.get()->content->base.location.__ptr__())
                ) => sir*);

                self->visit(i.get()->content => mir*);

                var res = self->value_stack.back()->copy_instance();
                defer res.delete();
                self->value_stack.pop_back();

                var res_ty = self->type_mapping(res.resolved_type.__ptr__());
                defer res_ty.delete();

                var res_value = res.to_value_t();
                defer res_value.delete();

                self->block->add_stmt(sir_store::new(
                    res_ty.__ptr__(),
                    res_value.__ptr__(),
                    target_value.__ptr__()
                ) => sir*);
            }

            var n_ptr = n->resolved_type.pointer_copy();
            defer n_ptr.delete();
            var v = mir_value_t::variable(temp_var.__ptr__(), n_ptr.__ptr__());
            defer v.delete();

            self->value_stack.push(v.__ptr__());
        } else if (dm->tagged_unions.has(name_for_search.__ptr__())) {
            var un = dm->tagged_unions.get(name_for_search.__ptr__());

            foreach (var i; n->fields) {
                var tag = self->ssa_gen.create();
                var tag_value = value_t::variable(tag.__ptr__());
                defer tag.delete();
                defer tag_value.delete();
                self->block->add_stmt(sir_get_field::new(
                    tag_value.__ptr__(),
                    temp_var_value.__ptr__(),
                    n_ty.__ptr__(),
                    0,
                    self->generate_DI_location(i.get()->content->base.location.__ptr__())
                ) => sir*);

                var i64_t = str::from("i64");
                var tag_value_str = str::from_i64(un->member_int_map.get(i.get()->name.__ptr__()));
                var tag_value_v = value_t::literal(tag_value_str.__ptr__());
                defer i64_t.delete();
                defer tag_value_str.delete();
                defer tag_value_v.delete();
                self->block->add_stmt(sir_store::new(
                    i64_t.__ptr__(),
                    tag_value_v.__ptr__(),
                    tag_value.__ptr__()
                ) => sir*);

                var source = self->ssa_gen.create();
                var target = self->ssa_gen.create();
                defer source.delete();
                defer target.delete();

                var source_value = value_t::variable(source.__ptr__());
                var target_value = value_t::variable(target.__ptr__());
                defer source_value.delete();
                defer target_value.delete();

                self->block->add_stmt(sir_get_field::new(
                    source_value.__ptr__(),
                    temp_var_value.__ptr__(),
                    n_ty.__ptr__(),
                    1,
                    self->generate_DI_location(i.get()->content->base.location.__ptr__())
                ) => sir*);

                // get max align type, it's the base type of union
                var un_full_path_name = n->resolved_type.full_path_name(self->pkg, false);
                defer un_full_path_name.delete();
                var base_type = self->sc.tagged_union_mapper.get(
                    un_full_path_name.__ptr__()
                )->max_align_type.pointer_copy();
                defer base_type.delete();
                var base_type_name = self->type_mapping(base_type.__ptr__());
                defer base_type_name.delete();
                var target_type = un->members.get(i.get()->name.__ptr__())->pointer_copy();
                defer target_type.delete();
                var target_type_name = self->type_mapping(target_type.__ptr__());
                defer target_type_name.delete();

                self->block->add_stmt(sir_type_convert::new(
                    source_value.__ptr__(),
                    target_value.__ptr__(),
                    base_type_name.__ptr__(),
                    target_type_name.__ptr__(),
                    true,
                    true,
                    self->generate_DI_location(i.get()->content->base.location.__ptr__())
                ) => sir*);

                self->visit(i.get()->content => mir*);

                var res = self->value_stack.back()->copy_instance();
                defer res.delete();
                self->value_stack.pop_back();

                var res_ty = self->type_mapping(res.resolved_type.__ptr__());
                defer res_ty.delete();

                var res_value = res.to_value_t();
                defer res_value.delete();

                self->block->add_stmt(sir_store::new(
                    res_ty.__ptr__(),
                    res_value.__ptr__(),
                    target_value.__ptr__()
                ) => sir*);
            }

            var n_ptr = n->resolved_type.pointer_copy();
            defer n_ptr.delete();
            var v = mir_value_t::variable(temp_var.__ptr__(), n_ptr.__ptr__());
            defer v.delete();

            self->value_stack.push(v.__ptr__());
        }
    }

    func call_expr_gen(self, n: mir_call*, need_address: bool) {
        self->visit(n->content => mir*);

        var source = self->value_stack.back()->copy_instance();
        defer source.delete();

        // for enum member
        if (!source.resolved_type.is_pointer()) {
            return;
        }
        if (source.resolved_type.is_void()) {
            self->value_stack.pop_back();
            return;
        }

        if (need_address) {
            return;
        }

        self->value_stack.pop_back();

        var temp_var = self->ssa_gen.create();
        var temp_var_value = value_t::variable(temp_var.__ptr__());
        var source_ref = source.resolved_type.ref_copy();
        var source_ref_ty = self->type_mapping(source_ref.__ptr__());
        var source_value = source.to_value_t();
        defer {
            temp_var.delete();
            temp_var_value.delete();
            source_ref.delete();
            source_ref_ty.delete();
            source_value.delete();
        }

        if (source.resolved_type.is_array) {
            var source_ref_ref = source_ref.ref_copy();
            defer source_ref_ref.delete();

            var source_ref_ref_ty = self->type_mapping(source_ref_ref.__ptr__());
            defer source_ref_ref_ty.delete();

            self->block->add_stmt(sir_array_cast::new(
                source_value.__ptr__(),
                temp_var_value.__ptr__(),
                source_ref_ref_ty.__ptr__(),
                source.resolved_type.array_length,
                self->generate_DI_location(n->base.location.__ptr__())
            ) => sir*);
        } else {
            self->block->add_stmt(sir_load::new(
                source_ref_ty.__ptr__(),
                source_value.__ptr__(),
                temp_var_value.__ptr__()
            ) => sir*);
        }

        var v = mir_value_t::variable(
            temp_var.__ptr__(),
            source_ref.__ptr__()
        );
        defer v.delete();

        self->value_stack.push(v.__ptr__());
    }
    
    func visit_mir_call(self, n: mir_call*) {
        self->call_expr_gen(n, false);
    }

    func visit_mir_call_id(self, n: mir_call_id*) {
        if (!n->resolved_type.is_global_sym) {
            var name = self->locals.get_local(n->name.__ptr__());
            defer name.delete();

            var ty = n->resolved_type.pointer_copy();
            // should make it to false
            // then [4096 x i8]* can be treated as i8**
            // which is exacty the type of local variable
            ty.is_array = false;
            defer ty.delete();

            var v = mir_value_t::variable(name.__ptr__(), ty.__ptr__());
            defer v.delete();

            self->value_stack.push(v.__ptr__());
            return;
        }

        var loc_file = n->resolved_type.loc_file.__ptr__();
        if (loc_file->empty()) {
            if (!self->ctx->global->primitives.has(n->name.__ptr__())) {
                panic("empty location for global symbol");
            } else {
                var v = mir_value_t::primitive(
                    n->name.__ptr__(),
                    n->resolved_type.__ptr__()
                );
                defer v.delete();

                self->value_stack.push(v.__ptr__());
            }
            return;
        }

        var dm = self->ctx->get_domain(loc_file);
        var name_for_search = n->resolved_type.generic_name(self->pkg);
        defer name_for_search.delete();

        var full_path_name = n->resolved_type.full_path_name(self->pkg, false);
        defer full_path_name.delete();

        if (dm->functions.has(name_for_search.__ptr__())) {
            var v = mir_value_t::func_symbol(
                full_path_name.__ptr__(),
                n->resolved_type.__ptr__()
            );
            defer v.delete();

            // extern function remain raw name
            if (dm->functions.get(name_for_search.__ptr__())->is_extern) {
                v.content.clear();
                v.content.append_str(name_for_search.__ptr__());
            }
            self->value_stack.push(v.__ptr__());
        } else if (dm->structs.has(name_for_search.__ptr__())) {
            var v = mir_value_t::struct_symbol(
                full_path_name.__ptr__(),
                n->resolved_type.__ptr__()
            );
            defer v.delete();

            self->value_stack.push(v.__ptr__());
        } else if (dm->tagged_unions.has(name_for_search.__ptr__())) {
            var v = mir_value_t::tagged_union_symbol(
                full_path_name.__ptr__(),
                n->resolved_type.__ptr__()
            );
            defer v.delete();

            self->value_stack.push(v.__ptr__());
        } else if (dm->enums.has(name_for_search.__ptr__())) {
            var v = mir_value_t::enum_symbol(
                name_for_search.__ptr__(),
                n->resolved_type.__ptr__()
            );
            defer v.delete();

            self->value_stack.push(v.__ptr__());
        } else {
            var info = str::from("cannot get global symbol ");
            info.append_str(name_for_search.__ptr__())
                ->append(" from ")
                ->append_str(loc_file);
            defer info.delete();

            panic(info.c_str);
        }
    }

    func visit_mir_call_index(self, n: mir_call_index*) {
        var prev = self->value_stack.back()->copy_instance();
        defer prev.delete();
        self->value_stack.pop_back();

        self->visit(n->index => mir*);

        var index = self->value_stack.back()->copy_instance();
        defer index.delete();
        self->value_stack.pop_back();

        var temp_var = self->ssa_gen.create();
        defer temp_var.delete();

        var prev_ref = prev.resolved_type.ref_copy();
        defer prev_ref.delete();

        var prev_ref_ty = self->type_mapping(prev_ref.__ptr__());
        defer prev_ref_ty.delete();

        var prev_value = prev.to_value_t();
        defer prev_value.delete();

        var temp_var_value = value_t::variable(temp_var.__ptr__());
        defer temp_var_value.delete();

        if (prev.resolved_type.is_array) {
            var prev_ref_ref = prev_ref.ref_copy();
            defer prev_ref_ref.delete();

            var prev_ref_ref_ty = self->type_mapping(prev_ref_ref.__ptr__());
            defer prev_ref_ref_ty.delete();

            self->block->add_stmt(sir_array_cast::new(
                prev_value.__ptr__(),
                temp_var_value.__ptr__(),
                prev_ref_ref_ty.__ptr__(),
                prev.resolved_type.array_length,
                self->generate_DI_location(n->base.location.__ptr__())
            ) => sir*);
        } else {
            self->block->add_stmt(sir_load::new(
                prev_ref_ty.__ptr__(),
                prev_value.__ptr__(),
                temp_var_value.__ptr__()
            ) => sir*);
        }

        var target = self->ssa_gen.create();
        defer target.delete();

        var target_value = value_t::variable(target.__ptr__());
        defer target_value.delete();

        var index_value = index.to_value_t();
        defer index_value.delete();

        var prev_ref_ref = prev_ref.ref_copy();
        defer prev_ref_ref.delete();

        var prev_ref_ref_ty = self->type_mapping(prev_ref_ref.__ptr__());
        defer prev_ref_ref_ty.delete();

        var index_ty = self->type_mapping(index.resolved_type.__ptr__());
        defer index_ty.delete();

        self->block->add_stmt(sir_get_index::new(
            temp_var_value.__ptr__(),
            target_value.__ptr__(),
            index_value.__ptr__(),
            prev_ref_ref_ty.__ptr__(),
            index_ty.__ptr__(),
            self->generate_DI_location(n->base.location.__ptr__())
        ) => sir*);

        var n_ptr = n->resolved_type.pointer_copy();
        defer n_ptr.delete();

        var v = mir_value_t::variable(
            target.__ptr__(),
            n_ptr.__ptr__()
        );
        defer v.delete();

        self->value_stack.push(v.__ptr__());
    }

    func visit_mir_call_func(self, n: mir_call_func*) {
        var prev = self->value_stack.back()->copy_instance();
        defer prev.delete();
        self->value_stack.pop_back();

        // if is primitive size method call, replace with number literal
        if (self->primitive_methods.has(prev.content.__ptr__())) {
            var size = self->primitive_methods.get(prev.content.__ptr__());
            var v = mir_value_t::literal(size, n->resolved_type.__ptr__());
            defer v.delete();

            self->value_stack.push(v.__ptr__());
            return;
        }

        var args = vec<mir_value_t>::instance();
        defer args.delete();

        // load "self" argument
        if (prev.value_kind == mir_value_kind::method) {
            args.push(self->value_stack.back());
            self->value_stack.pop_back();
        }
        // load arguments
        foreach (var i; n->args->content) {
            self->visit(i.get());
            args.push(self->value_stack.back());
            self->value_stack.pop_back();
        }

        var target = str::instance();
        defer target.delete();

        var sir_function_call: sir_call* = nil;
        if (!n->resolved_type.is_void()) {
            var temp = self->ssa_gen.create();
            defer temp.delete();

            target.append_str(temp.__ptr__());

            var n_ty = self->type_mapping(n->resolved_type.__ptr__());
            var target_value = value_t::variable(target.__ptr__());
            var mangled_name = mangle_function_name(prev.content.__ptr__());
            defer {
                n_ty.delete();
                target_value.delete();
                mangled_name.delete();
            }
            
            sir_function_call = sir_call::new(
                mangled_name.__ptr__(),
                n_ty.__ptr__(),
                target_value.__ptr__(),
                self->generate_DI_location(n->base.location.__ptr__())
            );            
        } else {
            var n_ty = self->type_mapping(n->resolved_type.__ptr__());
            var target_value = value_t::null(nil);
            var mangled_name = mangle_function_name(prev.content.__ptr__());
            defer {
                n_ty.delete();
                target_value.delete();
                mangled_name.delete();
            }

            sir_function_call = sir_call::new(
                mangled_name.__ptr__(),
                n_ty.__ptr__(),
                target_value.__ptr__(),
                self->generate_DI_location(n->base.location.__ptr__())
            );
        }

        // load args
        foreach (var i; args) {
            var arg = i.get();
            var arg_val = arg->to_value_t();
            defer arg_val.delete();

            var arg_ty = self->type_mapping(arg->resolved_type.__ptr__());
            defer arg_ty.delete();

            sir_function_call->add_arg(arg_val.__ptr__(), arg_ty.__ptr__());
        }
        self->block->add_stmt(sir_function_call => sir*);

        if (n->resolved_type.is_void()) {
            var v = mir_value_t::variable(
                target.__ptr__(),
                n->resolved_type.__ptr__()
            );
            defer v.delete();

            self->value_stack.push(v.__ptr__());
        } else {
            var temp_var = self->ssa_gen.create();
            defer temp_var.delete();

            var real = str::from("_");
            real.append_str(temp_var.__ptr__())->append(".real");
            defer real.delete();

            var n_ty = self->type_mapping(n->resolved_type.__ptr__());
            var target_value = value_t::variable(target.__ptr__());
            var temp_var_value = value_t::variable(temp_var.__ptr__());
            defer {
                n_ty.delete();
                target_value.delete();
                temp_var_value.delete();
            }
            
            self->block->add_move_register(sir_alloca::new(
                real.__ptr__(),
                n_ty.__ptr__()
            ));
            self->block->add_stmt(sir_temp_ptr::new(
                temp_var.__ptr__(),
                real.__ptr__(),
                n_ty.__ptr__(),
                ""
            ) => sir*);
            self->block->add_stmt(sir_store::new(
                n_ty.__ptr__(),
                target_value.__ptr__(),
                temp_var_value.__ptr__()
            ) => sir*);

            var n_ref = n->resolved_type.pointer_copy();
            defer n_ref.delete();

            var v = mir_value_t::variable(temp_var.__ptr__(), n_ref.__ptr__());
            defer v.delete();

            self->value_stack.push(v.__ptr__());
        }
    }

    func visit_mir_get_field(self, n: mir_get_field*) {
        var prev = self->value_stack.back()->copy_instance();
        defer prev.delete();

        var prev_name_for_search = prev.resolved_type.generic_name(self->pkg);
        defer prev_name_for_search.delete();

        self->value_stack.pop_back();

        var dm = self->ctx->get_domain(prev.resolved_type.loc_file.__ptr__());

        if (dm->structs.has(prev_name_for_search.__ptr__())) {
            var st = dm->structs.get(prev_name_for_search.__ptr__());

            // get method
            if (st->method.has(n->name.__ptr__())) {
                // push self into stack
                self->value_stack.push(prev.__ptr__());
                var method_name = prev.resolved_type.full_path_name(self->pkg, false);
                method_name.append_char('.')->append_str(n->name.__ptr__());
                defer method_name.delete();

                var v = mir_value_t::method(
                    method_name.__ptr__(),
                    n->resolved_type.__ptr__()
                );
                defer v.delete();

                self->value_stack.push(v.__ptr__());
                return;
            }

            var target = self->ssa_gen.create();
            var target_value = value_t::variable(target.__ptr__());
            defer {
                target.delete();
                target_value.delete();
            }

            var index = st->field_index(n->name.__ptr__());

            var prev_value = prev.to_value_t();
            var prev_ref = prev.resolved_type.ref_copy();
            var prev_ref_ty = self->type_mapping(prev_ref.__ptr__());
            defer {
                prev_value.delete();
                prev_ref.delete();
                prev_ref_ty.delete();
            }

            self->block->add_stmt(sir_get_field::new(
                target_value.__ptr__(),
                prev_value.__ptr__(),
                prev_ref_ty.__ptr__(),
                index,
                self->generate_DI_location(n->base.location.__ptr__())
            ) => sir*);

            var n_ty = n->resolved_type.pointer_copy();
            var v = mir_value_t::variable(target.__ptr__(), n_ty.__ptr__());
            defer {
                n_ty.delete();
                v.delete();
            }

            self->value_stack.push(v.__ptr__());
        } else if (dm->tagged_unions.has(prev_name_for_search.__ptr__())) {
            var un = dm->tagged_unions.get(prev_name_for_search.__ptr__());

            // get method
            if (un->method.has(n->name.__ptr__())) {
                // push self into stack
                self->value_stack.push(prev.__ptr__());
                var method_name = prev.resolved_type.full_path_name(self->pkg, false);
                method_name.append_char('.')->append_str(n->name.__ptr__());
                defer method_name.delete();

                var v = mir_value_t::method(
                    method_name.__ptr__(),
                    n->resolved_type.__ptr__()
                );
                defer v.delete();

                self->value_stack.push(v.__ptr__());
                return;
            }

            var source = self->ssa_gen.create();
            var source_value = value_t::variable(source.__ptr__());
            var target = self->ssa_gen.create();
            var target_value = value_t::variable(target.__ptr__());
            defer {
                source.delete();
                source_value.delete();
                target.delete();
                target_value.delete();
            }

            var prev_value = prev.to_value_t();
            var prev_ref = prev.resolved_type.ref_copy();
            var prev_ref_ty = self->type_mapping(prev_ref.__ptr__());
            defer {
                prev_value.delete();
                prev_ref.delete();
                prev_ref_ty.delete();
            }

            self->block->add_stmt(sir_get_field::new(
                source_value.__ptr__(),
                prev_value.__ptr__(),
                prev_ref_ty.__ptr__(),
                1,
                self->generate_DI_location(n->base.location.__ptr__())
            ) => sir*);

            // get max align type, it's the base type of union
            var un_full_path_name = prev.resolved_type.full_path_name(self->pkg, false);
            defer un_full_path_name.delete();
            var base_type = self->sc.tagged_union_mapper.get(
                un_full_path_name.__ptr__()
            )->max_align_type.pointer_copy();
            defer base_type.delete();
            var base_type_name = self->type_mapping(base_type.__ptr__());
            defer base_type_name.delete();

            var target_type = un->members.get(n->name.__ptr__())->pointer_copy();
            defer target_type.delete();
            var target_type_name = self->type_mapping(target_type.__ptr__());
            defer target_type_name.delete();

            self->block->add_stmt(sir_type_convert::new(
                source_value.__ptr__(),
                target_value.__ptr__(),
                base_type_name.__ptr__(),
                target_type_name.__ptr__(),
                true,
                true,
                self->generate_DI_location(n->base.location.__ptr__())
            ) => sir*);

            var n_ty = n->resolved_type.pointer_copy();
            var v = mir_value_t::variable(target.__ptr__(), n_ty.__ptr__());
            defer {
                n_ty.delete();
                v.delete();
            }

            self->value_stack.push(v.__ptr__());
        }
    }

    func visit_mir_ptr_get_field(self, n: mir_ptr_get_field*) {
        var prev = self->value_stack.back()->copy_instance();
        defer prev.delete();

        var prev_name_for_search = prev.resolved_type.generic_name(self->pkg);
        defer prev_name_for_search.delete();

        self->value_stack.pop_back();

        var dm = self->ctx->get_domain(prev.resolved_type.loc_file.__ptr__());
        
        if (dm->structs.has(prev_name_for_search.__ptr__())) {
            var st = dm->structs.get(prev_name_for_search.__ptr__());

            // get method
            if (st->method.has(n->name.__ptr__())) {
                var temp_var = self->ssa_gen.create();
                var temp_var_value = value_t::variable(temp_var.__ptr__());
                var prev_ref = prev.resolved_type.ref_copy();
                var prev_ref_ty = self->type_mapping(prev_ref.__ptr__());
                var prev_value = prev.to_value_t();
                defer {
                    temp_var.delete();
                    temp_var_value.delete();
                    prev_ref.delete();
                    prev_ref_ty.delete();
                    prev_value.delete();
                }
                self->block->add_stmt(sir_load::new(
                    prev_ref_ty.__ptr__(),
                    prev_value.__ptr__(),
                    temp_var_value.__ptr__()
                ) => sir*);

                // push self into stack
                var v_self = mir_value_t::variable(temp_var.__ptr__(), prev_ref.__ptr__());
                defer v_self.delete();

                self->value_stack.push(v_self.__ptr__());

                var method_name = prev.resolved_type.full_path_name(self->pkg, false);
                method_name.append_char('.')->append_str(n->name.__ptr__());
                defer method_name.delete();

                var v = mir_value_t::method(
                    method_name.__ptr__(),
                    n->resolved_type.__ptr__()
                );
                defer v.delete();

                self->value_stack.push(v.__ptr__());
                return;
            }

            var index = st->field_index(n->name.__ptr__());
            var temp_0 = self->ssa_gen.create();
            var temp_1 = self->ssa_gen.create();
            var temp_0_value = value_t::variable(temp_0.__ptr__());
            var temp_1_value = value_t::variable(temp_1.__ptr__());
            defer {
                temp_0.delete();
                temp_0_value.delete();
                temp_1.delete();
                temp_1_value.delete();
            }

            var prev_value = prev.to_value_t();
            var prev_ref = prev.resolved_type.ref_copy();
            var prev_ref_ty = self->type_mapping(prev_ref.__ptr__());
            var prev_ref_ref = prev_ref.ref_copy();
            var prev_ref_ref_ty = self->type_mapping(prev_ref_ref.__ptr__());
            defer {
                prev_value.delete();
                prev_ref.delete();
                prev_ref_ty.delete();
                prev_ref_ref.delete();
                prev_ref_ref_ty.delete();
            }

            self->block->add_stmt(sir_load::new(
                prev_ref_ty.__ptr__(),
                prev_value.__ptr__(),
                temp_0_value.__ptr__()
            ) => sir*);

            self->block->add_stmt(sir_get_field::new(
                temp_1_value.__ptr__(),
                temp_0_value.__ptr__(),
                prev_ref_ref_ty.__ptr__(),
                index,
                self->generate_DI_location(n->base.location.__ptr__())
            ) => sir*);

            var n_ty = n->resolved_type.pointer_copy();
            var v = mir_value_t::variable(temp_1.__ptr__(), n_ty.__ptr__());
            defer {
                n_ty.delete();
                v.delete();
            }

            self->value_stack.push(v.__ptr__());
        } else if (dm->tagged_unions.has(prev_name_for_search.__ptr__())) {
            var un = dm->tagged_unions.get(prev_name_for_search.__ptr__());

            // get method
            if (un->method.has(n->name.__ptr__())) {
                var temp_var = self->ssa_gen.create();
                var temp_var_value = value_t::variable(temp_var.__ptr__());
                var prev_ref = prev.resolved_type.ref_copy();
                var prev_ref_ty = self->type_mapping(prev_ref.__ptr__());
                var prev_value = prev.to_value_t();
                defer {
                    temp_var.delete();
                    temp_var_value.delete();
                    prev_ref.delete();
                    prev_ref_ty.delete();
                    prev_value.delete();
                }
                self->block->add_stmt(sir_load::new(
                    prev_ref_ty.__ptr__(),
                    prev_value.__ptr__(),
                    temp_var_value.__ptr__()
                ) => sir*);

                // push self into stack
                var v_self = mir_value_t::variable(temp_var.__ptr__(), prev_ref.__ptr__());
                defer v_self.delete();

                self->value_stack.push(v_self.__ptr__());

                var method_name = prev.resolved_type.full_path_name(self->pkg, false);
                method_name.append_char('.')->append_str(n->name.__ptr__());
                defer method_name.delete();

                var v = mir_value_t::method(
                    method_name.__ptr__(),
                    n->resolved_type.__ptr__()
                );
                defer v.delete();

                self->value_stack.push(v.__ptr__());
                return;
            }

            var temp_0 = self->ssa_gen.create();
            var temp_1 = self->ssa_gen.create();
            var target = self->ssa_gen.create();
            var temp_0_value = value_t::variable(temp_0.__ptr__());
            var temp_1_value = value_t::variable(temp_1.__ptr__());
            var target_value = value_t::variable(target.__ptr__());
            defer {
                temp_0.delete();
                temp_0_value.delete();
                temp_1.delete();
                temp_1_value.delete();
                target.delete();
                target_value.delete();
            }

            var prev_value = prev.to_value_t();
            var prev_ref = prev.resolved_type.ref_copy();
            var prev_ref_ty = self->type_mapping(prev_ref.__ptr__());
            var prev_ref_ref = prev_ref.ref_copy();
            var prev_ref_ref_ty = self->type_mapping(prev_ref_ref.__ptr__());
            defer {
                prev_value.delete();
                prev_ref.delete();
                prev_ref_ty.delete();
                prev_ref_ref.delete();
                prev_ref_ref_ty.delete();
            }

            self->block->add_stmt(sir_load::new(
                prev_ref_ty.__ptr__(),
                prev_value.__ptr__(),
                temp_0_value.__ptr__()
            ) => sir*);

            self->block->add_stmt(sir_get_field::new(
                temp_1_value.__ptr__(),
                temp_0_value.__ptr__(),
                prev_ref_ref_ty.__ptr__(),
                1,
                self->generate_DI_location(n->base.location.__ptr__())
            ) => sir*);

            // get max align type, it's the base type of union
            var un_full_path_name = prev.resolved_type.full_path_name(self->pkg, false);
            defer un_full_path_name.delete();
            var base_type = self->sc.tagged_union_mapper.get(
                un_full_path_name.__ptr__()
            )->max_align_type.pointer_copy();
            defer base_type.delete();
            var base_type_name = self->type_mapping(base_type.__ptr__());
            defer base_type_name.delete();

            var target_type = un->members.get(n->name.__ptr__())->pointer_copy();
            defer target_type.delete();
            var target_type_name = self->type_mapping(target_type.__ptr__());
            defer target_type_name.delete();

            self->block->add_stmt(sir_type_convert::new(
                temp_1_value.__ptr__(),
                target_value.__ptr__(),
                base_type_name.__ptr__(),
                target_type_name.__ptr__(),
                true,
                true,
                self->generate_DI_location(n->base.location.__ptr__())
            ) => sir*);

            var n_ty = n->resolved_type.pointer_copy();
            var v = mir_value_t::variable(target.__ptr__(), n_ty.__ptr__());
            defer {
                n_ty.delete();
                v.delete();
            }

            self->value_stack.push(v.__ptr__());
        }
    }

    func visit_mir_get_path(self, n: mir_get_path*) {
        var prev = self->value_stack.back()->copy_instance();
        defer prev.delete();
        self->value_stack.pop_back();

        match (prev.value_kind) {
            mir_value_kind::primitive => {
                var name = prev.resolved_type.full_path_name(self->pkg, false);
                name.append(".")->append_str(n->name.__ptr__());
                defer name.delete();

                var v = mir_value_t::func_symbol(
                    name.__ptr__(),
                    n->resolved_type.__ptr__()
                );
                defer v.delete();

                self->value_stack.push(v.__ptr__());
            }
            mir_value_kind::struct_symbol => {
                var name = prev.resolved_type.full_path_name(self->pkg, false);
                name.append(".")->append_str(n->name.__ptr__());
                defer name.delete();

                var v = mir_value_t::func_symbol(
                    name.__ptr__(),
                    n->resolved_type.__ptr__()
                );
                defer v.delete();

                self->value_stack.push(v.__ptr__());
            }
            mir_value_kind::tagged_union_symbol => {
                var name = prev.resolved_type.full_path_name(self->pkg, false);
                name.append(".")->append_str(n->name.__ptr__());
                defer name.delete();

                var v = mir_value_t::func_symbol(
                    name.__ptr__(),
                    n->resolved_type.__ptr__()
                );
                defer v.delete();

                self->value_stack.push(v.__ptr__());
            }
            mir_value_kind::enum_symbol => {
                var dm = self->ctx->get_domain(prev.resolved_type.loc_file.__ptr__());
                var em = dm->enums.get(prev.resolved_type.name.__ptr__());
                var index = em->members.get(n->name.__ptr__());

                var index_str = str::from_i64(index);
                defer index_str.delete();

                var v = mir_value_t::literal(
                    index_str.__ptr__(),
                    n->resolved_type.__ptr__()
                );
                defer v.delete();

                self->value_stack.push(v.__ptr__());
            }
            _ => { unreachable(); }
        }
    }

    func visit_mir_define(self, n: mir_define*) {
        var name = n->name.copy_instance();
        name.append(".");
        name.append_i64(self->locals.local_scope_depth);
        defer name.delete();

        // real name of the local variable
        self->locals.elem.back()->insert(n->name.__ptr__(), name.__ptr__());

        var n_ty = n->resolved_type.copy_instance();
        n_ty.is_array = false;
        defer n_ty.delete();

        var type_name = self->type_mapping(n_ty.__ptr__());
        defer type_name.delete();

        self->block->add_alloca(sir_alloca::new(
            name.__ptr__(),
            type_name.__ptr__()
        ));

        self->visit(n->init_value => mir*);

        var source = self->value_stack.back()->copy_instance();
        defer source.delete();
        self->value_stack.pop_back();

        var source_value = source.to_value_t();
        defer source_value.delete();

        var name_value = value_t::variable(name.__ptr__());
        defer name_value.delete();

        self->block->add_stmt(sir_store::new(
            type_name.__ptr__(),
            source_value.__ptr__(),
            name_value.__ptr__()
        ) => sir*);
    }

    func visit_mir_assign(self, n: mir_assign*) {
        self->call_expr_gen(
            n->left->content.get(0) => mir_call*,
            true
        );
        var left = self->value_stack.back()->copy_instance();
        var left_value = left.to_value_t();
        self->value_stack.pop_back();
        defer {
            left.delete();
            left_value.delete();
        }

        self->visit(n->right => mir*);
        var right = self->value_stack.back()->copy_instance();
        var right_value = right.to_value_t();
        var right_ty = self->type_mapping(right.resolved_type.__ptr__());
        self->value_stack.pop_back();
        defer {
            right.delete();
            right_value.delete();
            right_ty.delete();
        }

        match (n->opr) {
            mir_assign_opr::addeq => {
                var temp_0 = self->ssa_gen.create();
                var temp_1 = self->ssa_gen.create();
                var temp_0_value = value_t::variable(temp_0.__ptr__());
                var temp_1_value = value_t::variable(temp_1.__ptr__());
                defer {
                    temp_0.delete();
                    temp_1.delete();
                    temp_0_value.delete();
                    temp_1_value.delete();
                }

                self->block->add_stmt(sir_load::new(
                    right_ty.__ptr__(),
                    left_value.__ptr__(),
                    temp_0_value.__ptr__()
                ) => sir*);
                self->block->add_stmt(sir_add::new(
                    temp_0_value.__ptr__(),
                    right_value.__ptr__(),
                    temp_1_value.__ptr__(),
                    right.resolved_type.is_integer(),
                    right_ty.__ptr__()
                ) => sir*);
                self->block->add_stmt(sir_store::new(
                    right_ty.__ptr__(),
                    temp_1_value.__ptr__(),
                    left_value.__ptr__()
                ) => sir*);
            }
            mir_assign_opr::subeq => {
                var temp_0 = self->ssa_gen.create();
                var temp_1 = self->ssa_gen.create();
                var temp_0_value = value_t::variable(temp_0.__ptr__());
                var temp_1_value = value_t::variable(temp_1.__ptr__());
                defer {
                    temp_0.delete();
                    temp_1.delete();
                    temp_0_value.delete();
                    temp_1_value.delete();
                }

                self->block->add_stmt(sir_load::new(
                    right_ty.__ptr__(),
                    left_value.__ptr__(),
                    temp_0_value.__ptr__()
                ) => sir*);
                self->block->add_stmt(sir_sub::new(
                    temp_0_value.__ptr__(),
                    right_value.__ptr__(),
                    temp_1_value.__ptr__(),
                    right.resolved_type.is_integer(),
                    right_ty.__ptr__()
                ) => sir*);
                self->block->add_stmt(sir_store::new(
                    right_ty.__ptr__(),
                    temp_1_value.__ptr__(),
                    left_value.__ptr__()
                ) => sir*);
            }
            mir_assign_opr::muleq => {
                var temp_0 = self->ssa_gen.create();
                var temp_1 = self->ssa_gen.create();
                var temp_0_value = value_t::variable(temp_0.__ptr__());
                var temp_1_value = value_t::variable(temp_1.__ptr__());
                defer {
                    temp_0.delete();
                    temp_1.delete();
                    temp_0_value.delete();
                    temp_1_value.delete();
                }

                self->block->add_stmt(sir_load::new(
                    right_ty.__ptr__(),
                    left_value.__ptr__(),
                    temp_0_value.__ptr__()
                ) => sir*);
                self->block->add_stmt(sir_mul::new(
                    temp_0_value.__ptr__(),
                    right_value.__ptr__(),
                    temp_1_value.__ptr__(),
                    right.resolved_type.is_integer(),
                    right_ty.__ptr__()
                ) => sir*);
                self->block->add_stmt(sir_store::new(
                    right_ty.__ptr__(),
                    temp_1_value.__ptr__(),
                    left_value.__ptr__()
                ) => sir*);
            }
            mir_assign_opr::diveq => {
                var temp_0 = self->ssa_gen.create();
                var temp_1 = self->ssa_gen.create();
                var temp_0_value = value_t::variable(temp_0.__ptr__());
                var temp_1_value = value_t::variable(temp_1.__ptr__());
                defer {
                    temp_0.delete();
                    temp_1.delete();
                    temp_0_value.delete();
                    temp_1_value.delete();
                }

                self->block->add_stmt(sir_load::new(
                    right_ty.__ptr__(),
                    left_value.__ptr__(),
                    temp_0_value.__ptr__()
                ) => sir*);
                self->block->add_stmt(sir_div::new(
                    temp_0_value.__ptr__(),
                    right_value.__ptr__(),
                    temp_1_value.__ptr__(),
                    right.resolved_type.is_integer(),
                    !right.resolved_type.is_unsigned(),
                    right_ty.__ptr__()
                ) => sir*);
                self->block->add_stmt(sir_store::new(
                    right_ty.__ptr__(),
                    temp_1_value.__ptr__(),
                    left_value.__ptr__()
                ) => sir*);
            }
            mir_assign_opr::remeq => {
                var temp_0 = self->ssa_gen.create();
                var temp_1 = self->ssa_gen.create();
                var temp_0_value = value_t::variable(temp_0.__ptr__());
                var temp_1_value = value_t::variable(temp_1.__ptr__());
                defer {
                    temp_0.delete();
                    temp_1.delete();
                    temp_0_value.delete();
                    temp_1_value.delete();
                }

                self->block->add_stmt(sir_load::new(
                    right_ty.__ptr__(),
                    left_value.__ptr__(),
                    temp_0_value.__ptr__()
                ) => sir*);
                self->block->add_stmt(sir_rem::new(
                    temp_0_value.__ptr__(),
                    right_value.__ptr__(),
                    temp_1_value.__ptr__(),
                    right.resolved_type.is_integer(),
                    !right.resolved_type.is_unsigned(),
                    right_ty.__ptr__()
                ) => sir*);
                self->block->add_stmt(sir_store::new(
                    right_ty.__ptr__(),
                    temp_1_value.__ptr__(),
                    left_value.__ptr__()
                ) => sir*);
            }
            mir_assign_opr::eq => {
                self->block->add_stmt(sir_store::new(
                    right_ty.__ptr__(),
                    right_value.__ptr__(),
                    left_value.__ptr__()
                ) => sir*);
            }
            mir_assign_opr::andeq => {
                var temp_0 = self->ssa_gen.create();
                var temp_1 = self->ssa_gen.create();
                var temp_0_value = value_t::variable(temp_0.__ptr__());
                var temp_1_value = value_t::variable(temp_1.__ptr__());
                defer {
                    temp_0.delete();
                    temp_1.delete();
                    temp_0_value.delete();
                    temp_1_value.delete();
                }

                self->block->add_stmt(sir_load::new(
                    right_ty.__ptr__(),
                    left_value.__ptr__(),
                    temp_0_value.__ptr__()
                ) => sir*);
                self->block->add_stmt(sir_band::new(
                    temp_0_value.__ptr__(),
                    right_value.__ptr__(),
                    temp_1_value.__ptr__(),
                    right_ty.__ptr__()
                ) => sir*);
                self->block->add_stmt(sir_store::new(
                    right_ty.__ptr__(),
                    temp_1_value.__ptr__(),
                    left_value.__ptr__()
                ) => sir*);
            }
            mir_assign_opr::xoreq => {
                var temp_0 = self->ssa_gen.create();
                var temp_1 = self->ssa_gen.create();
                var temp_0_value = value_t::variable(temp_0.__ptr__());
                var temp_1_value = value_t::variable(temp_1.__ptr__());
                defer {
                    temp_0.delete();
                    temp_1.delete();
                    temp_0_value.delete();
                    temp_1_value.delete();
                }

                self->block->add_stmt(sir_load::new(
                    right_ty.__ptr__(),
                    left_value.__ptr__(),
                    temp_0_value.__ptr__()
                ) => sir*);
                self->block->add_stmt(sir_bxor::new(
                    temp_0_value.__ptr__(),
                    right_value.__ptr__(),
                    temp_1_value.__ptr__(),
                    right_ty.__ptr__()
                ) => sir*);
                self->block->add_stmt(sir_store::new(
                    right_ty.__ptr__(),
                    temp_1_value.__ptr__(),
                    left_value.__ptr__()
                ) => sir*);
            }
            mir_assign_opr::oreq => {
                var temp_0 = self->ssa_gen.create();
                var temp_1 = self->ssa_gen.create();
                var temp_0_value = value_t::variable(temp_0.__ptr__());
                var temp_1_value = value_t::variable(temp_1.__ptr__());
                defer {
                    temp_0.delete();
                    temp_1.delete();
                    temp_0_value.delete();
                    temp_1_value.delete();
                }

                self->block->add_stmt(sir_load::new(
                    right_ty.__ptr__(),
                    left_value.__ptr__(),
                    temp_0_value.__ptr__()
                ) => sir*);
                self->block->add_stmt(sir_bor::new(
                    temp_0_value.__ptr__(),
                    right_value.__ptr__(),
                    temp_1_value.__ptr__(),
                    right_ty.__ptr__()
                ) => sir*);
                self->block->add_stmt(sir_store::new(
                    right_ty.__ptr__(),
                    temp_1_value.__ptr__(),
                    left_value.__ptr__()
                ) => sir*);
            }
        }
    }

    func visit_mir_if(self, n: mir_if*) {
        var br_cond: sir_br_cond* = nil;

        if (n->condition != nil) {
            self->visit(n->condition => mir*);

            var cond = self->value_stack.back()->copy_instance();
            defer cond.delete();
            self->value_stack.pop_back();

            var cond_value = cond.to_value_t();
            defer cond_value.delete();

            br_cond = sir_br_cond::new(
                cond_value.__ptr__(),
                self->block->stmts.size + 1,
                0
            );
            self->block->add_stmt(br_cond => sir*);
            self->block->add_stmt(sir_label::new(self->block->stmts.size, "cond.true") => sir*);
        }
        
        self->visit(n->content => mir*);

        // for block ends with ret instruction, another basic block is needed
        // because ret instruction is the terminator instruction
        if (self->block->back_is_ret_stmt()) {
            self->block->add_stmt(sir_label::new(self->block->stmts.size, "block.end.ret") => sir*);
        }

        var jump_out = sir_br::new(0);
        self->block->add_stmt(jump_out => sir*);
        self->branch_jump_out.back()->push(jump_out);

        if (br_cond != nil) {
            br_cond->label_false = self->block->stmts.size;
            self->block->add_stmt(sir_label::new(self->block->stmts.size, "cond.false") => sir*);
        }
    }

    func visit_mir_branch(self, n: mir_branch*) {
        var new_table = vec<sir_br*>::instance();
        self->branch_jump_out.push(new_table.__ptr__());
        new_table.delete();

        foreach (var i; n->branch) {
            self->visit(i.get() => mir*);
            if (i.get()->condition != nil && i.index() == n->branch.size - 1) {
                self->block->add_stmt(sir_br::new(self->block->stmts.size + 1) => sir*);
            }
        }

        // set jump out
        foreach (var i; self->branch_jump_out.back()) {
            i.get()->label = self->block->stmts.size;
        }
        self->branch_jump_out.pop_back();

        self->block->add_stmt(sir_label::new(self->block->stmts.size, "branch.end") => sir*);
    }

    func visit_mir_switch_case(self, n: mir_switch_case*) {
        self->visit(n->content => mir*);
    }

    func visit_mir_switch(self, n: mir_switch*) {
        self->visit(n->condition => mir*);
        var value = self->value_stack.back()->copy_instance();
        self->value_stack.pop_back();
        defer value.delete();

        var value_val = value.to_value_t();
        defer value_val.delete();

        var name_for_search = value.resolved_type.generic_name(self->pkg);
        defer name_for_search.delete();

        var dm = self->ctx->get_domain(value.resolved_type.loc_file.__ptr__());
        var switch_inst: sir_switch* = nil;
        if (dm->tagged_unions.has(name_for_search.__ptr__())) {
            var tag = self->ssa_gen.create();
            var tag_v = value_t::variable(tag.__ptr__());
            var tag_value = self->ssa_gen.create();
            var tag_value_v = value_t::variable(tag_value.__ptr__());
            defer tag.delete();
            defer tag_v.delete();
            defer tag_value.delete();
            defer tag_value_v.delete();
            // if value type is not a pointer, means the value is tagged union value
            // not a tagged union reference, so there must be a sir_load before it
            // if value is pointer type, we could directly get the tag value
            if (!value.resolved_type.is_pointer() &&
                !self->block->stmts.empty() &&
                self->block->stmts.back()->kind == sir_kind::sir_load) {
                // TODO: this load inst should be deleted
                var load_inst = self->block->stmts.back() => sir_load*;
                var value_type_name = self->type_mapping(value.resolved_type.__ptr__());
                defer value_type_name.delete();
                self->block->add_stmt(sir_get_field::new(
                    tag_v.__ptr__(),
                    load_inst->source.__ptr__(),
                    value_type_name.__ptr__(),
                    0,
                    self->generate_DI_location(n->condition->base.location.__ptr__())
                ) => sir*);
            } else {
                var value_type_ref = value.resolved_type.ref_copy();
                defer value_type_ref.delete();
                var value_type_ref_name = self->type_mapping(value_type_ref.__ptr__());
                defer value_type_ref_name.delete();

                self->block->add_stmt(sir_get_field::new(
                    tag_v.__ptr__(),
                    value_val.__ptr__(),
                    value_type_ref_name.__ptr__(),
                    0,
                    self->generate_DI_location(n->condition->base.location.__ptr__())
                ) => sir*);
            }

            var i64_t = str::from("i64");
            defer i64_t.delete();
            self->block->add_stmt(sir_load::new(
                i64_t.__ptr__(),
                tag_v.__ptr__(),
                tag_value_v.__ptr__(),
            ) => sir*);
            switch_inst = sir_switch::new(tag_value_v.__ptr__());
        } else {
            switch_inst = sir_switch::new(value_val.__ptr__());
        }

        self->block->add_stmt(switch_inst => sir*);

        var jmp_exits = vec<sir_br*>::instance();
        defer jmp_exits.delete();

        foreach (var i; n->cases) {
            var case_label_index = self->block->stmts.size;
            var label_comment = str::from("switch.case ");
            label_comment.append_i64(i.get()->value);
            defer label_comment.delete();

            var label = sir_label::new(
                case_label_index,
                label_comment.c_str
            );

            self->block->add_stmt(label => sir*);
            switch_inst->add_case(i.get()->value, case_label_index);

            self->visit(i.get()->content => mir*);

            // if block ends with ret instruction, do not generate
            // switch jump exit instruction
            if (self->block->back_is_ret_stmt()) {
                continue;
            }

            var jmp_exit = sir_br::new(0);
            self->block->add_stmt(jmp_exit => sir*);
            jmp_exits.push(jmp_exit);
        }

        var default_label_index = self->block->stmts.size;
        var label = sir_label::new(default_label_index, "switch.default");
        self->block->add_stmt(label => sir*);
        switch_inst->default_label = default_label_index;

        if (n->default_case != nil) {
            self->visit(n->default_case => mir*);

            // if block ends with ret instruction, do not generate
            // switch jump exit instruction
            if (!self->block->back_is_ret_stmt()) {
                var jmp_exit = sir_br::new(0);
                self->block->add_stmt(jmp_exit => sir*);
                jmp_exits.push(jmp_exit);
            }

            var exit_label_index = self->block->stmts.size;
            self->block->add_stmt(sir_label::new(
                exit_label_index,
                "switch.end"
            ) => sir*);

            foreach (var i; jmp_exits) {
                i.get()->label = exit_label_index;
            }
        } else {
            foreach (var i; jmp_exits) {
                i.get()->label = default_label_index;
            }
        }
    }

    func visit_mir_break(self, n: mir_break*) {
        var break_br = sir_br::new(0);
        self->break_inst.back()->push(break_br);

        self->block->add_stmt(break_br => sir*);
        self->block->add_stmt(sir_label::new(
            self->block->stmts.size,
            "break.end"
        ) => sir*);
    }

    func visit_mir_continue(self, n: mir_continue*) {
        var continue_br = sir_br::new(0);
        self->continue_inst.back()->push(continue_br);

        self->block->add_stmt(continue_br => sir*);
        self->block->add_stmt(sir_label::new(
            self->block->stmts.size,
            "continue.end"
        ) => sir*);
    }

    func visit_mir_loop(self, n: mir_loop*) {
        var new_break_continue_table = vec<sir_br*>::instance();
        self->continue_inst.push(new_break_continue_table.__ptr__());
        self->break_inst.push(new_break_continue_table.__ptr__());
        new_break_continue_table.delete();

        // mir loop will generate llvm ir in this form:
        //
        // %loop.entry:
        //   ... ; condition
        //   br i1 %cond %loop.cond.true, %loop.exit
        // %loop.cond.true:
        //   ... ; content
        // br %loop.continue
        // %loop.continue:   ; continue jumps here
        //   ... ; update
        // br %loop.entry
        // %loop.exit:       ; break jumps here
        //
        var entry_label_index = self->block->stmts.size + 1;
        self->block->add_stmt(sir_br::new(entry_label_index) => sir*);
        self->block->add_stmt(sir_label::new(entry_label_index, "loop.entry") => sir*);

        self->visit(n->condition => mir*);
        var cond = self->value_stack.back()->copy_instance();
        defer cond.delete();
        self->value_stack.pop_back();

        var cond_value = cond.to_value_t();
        defer cond_value.delete();

        var cond_inst = sir_br_cond::new(
            cond_value.__ptr__(),
            self->block->stmts.size + 1,
            0
        );
        self->block->add_stmt(cond_inst => sir*);
        self->block->add_stmt(sir_label::new(
            self->block->stmts.size,
            "loop.cond.true"
        ) => sir*);

        self->visit(n->content => mir*);

        var continue_label_value = self->block->stmts.size + 1;
        // if the last sir is ret, br behind it will let llvm generating
        // a numberic label implicitly, so we need to add a label to avoid
        // this error
        // example:
        //   label.10:	; branch.end
        //     ret i32 0
        //     br label %label.13
        // expect:
        //   label.10:	; branch.end
        //     ret i32 0
        //   label.12:	; loop.ret_end_avoid_error
        //     br label %label.13
        if (self->block->back_is_ret_stmt()) {
            self->block->add_stmt(sir_label::new(
                self->block->stmts.size,
                "loop.ret_end_avoid_error"
            ) => sir*);
        }
        self->block->add_stmt(sir_br::new(continue_label_value) => sir*);
        self->block->add_stmt(sir_label::new(continue_label_value, "loop.continue") => sir*);
        foreach (var i; self->continue_inst.back()) {
            i.get()->label = continue_label_value;
        }

        if (n->update != nil) {
            self->visit(n->update => mir*);
        }

        self->block->add_stmt(sir_br::new(entry_label_index) => sir*);

        var exit_label_index = self->block->stmts.size;
        cond_inst->label_false = exit_label_index;
        self->block->add_stmt(sir_label::new(exit_label_index, "loop.exit") => sir*);
        foreach (var i; self->break_inst.back()) {
            i.get()->label = exit_label_index;
        }

        self->continue_inst.pop_back();
        self->break_inst.pop_back();
    }

    func visit_mir_return(self, n: mir_return*) {
        if (n->value->content.empty()) {
            var void_name = str::from("void");
            defer void_name.delete();

            var null_val = value_t::null(nil);
            defer null_val.delete();

            self->block->add_stmt(sir_ret::new(
                void_name.__ptr__(),
                null_val.__ptr__(),
                self->generate_DI_location(n->base.location.__ptr__())
            ) => sir*);
            return;
        }

        self->visit(n->value => mir*);
        var ret = self->value_stack.back()->copy_instance();
        self->value_stack.pop_back();
        defer ret.delete();

        var ret_ty = self->type_mapping(ret.resolved_type.__ptr__());
        defer ret_ty.delete();

        var ret_val = ret.to_value_t();
        defer ret_val.delete();

        self->block->add_stmt(sir_ret::new(
            ret_ty.__ptr__(),
            ret_val.__ptr__(),
            self->generate_DI_location(n->base.location.__ptr__())
        ) => sir*);
    }

    func visit(self, n: mir*) {
        match (n->kind) {
            mir_kind::mir_block => {
                self->visit_mir_block(n => mir_block*);
            }
            mir_kind::mir_unary => {
                self->visit_mir_unary(n => mir_unary*);
            }
            mir_kind::mir_binary => {
                self->visit_mir_binary(n => mir_binary*);
            }
            mir_kind::mir_type_convert => {
                self->visit_mir_type_convert(n => mir_type_convert*);
            }
            mir_kind::mir_nil => {
                self->visit_mir_nil(n => mir_nil*);
            }
            mir_kind::mir_number => {
                self->visit_mir_number(n => mir_number*);
            }
            mir_kind::mir_string => {
                self->visit_mir_string(n => mir_string*);
            }
            mir_kind::mir_char => {
                self->visit_mir_char(n => mir_char*);
            }
            mir_kind::mir_bool => {
                self->visit_mir_bool(n => mir_bool*);
            }
            mir_kind::mir_array => {
                self->visit_mir_array(n => mir_array*);
            }
            mir_kind::mir_struct_init => {
                self->visit_mir_struct_init(n => mir_struct_init*);
            }
            mir_kind::mir_call => {
                self->visit_mir_call(n => mir_call*);
            }
            mir_kind::mir_call_id => {
                self->visit_mir_call_id(n => mir_call_id*);
            }
            mir_kind::mir_call_index => {
                self->visit_mir_call_index(n => mir_call_index*);
            }
            mir_kind::mir_call_func => {
                self->visit_mir_call_func(n => mir_call_func*);
            }
            mir_kind::mir_get_field => {
                self->visit_mir_get_field(n => mir_get_field*);
            }
            mir_kind::mir_ptr_get_field => {
                self->visit_mir_ptr_get_field(n => mir_ptr_get_field*);
            }
            mir_kind::mir_get_path => {
                self->visit_mir_get_path(n => mir_get_path*);
            }
            mir_kind::mir_define => {
                self->visit_mir_define(n => mir_define*);
            }
            mir_kind::mir_assign => {
                self->visit_mir_assign(n => mir_assign*);
            }
            mir_kind::mir_if => {
                self->visit_mir_if(n => mir_if*);
            }
            mir_kind::mir_branch => {
                self->visit_mir_branch(n => mir_branch*);
            }
            mir_kind::mir_switch_case => {
                self->visit_mir_switch_case(n => mir_switch_case*);
            }
            mir_kind::mir_switch => {
                self->visit_mir_switch(n => mir_switch*);
            }
            mir_kind::mir_break => {
                self->visit_mir_break(n => mir_break*);
            }
            mir_kind::mir_continue => {
                self->visit_mir_continue(n => mir_continue*);
            }
            mir_kind::mir_loop => {
                self->visit_mir_loop(n => mir_loop*);
            }
            mir_kind::mir_return => {
                self->visit_mir_return(n => mir_return*);
            }
            _ => unreachable();
        }
    }
}

impl mir2sir {
    func generate_DI_type_if_not_exists(self, n: str*) {
        var temp = n->copy_instance();
        defer temp.delete();

        var p: DW_TAG_pointer_type* = nil;
        while (temp.back() == '*') {
            if (self->sctx->DI_type_map.has(temp.__ptr__()) && p != nil) {
                p->base_type_index = self->sctx->DI_type_map.get(temp.__ptr__());
                break;
            }
            if (p != nil) {
                p->base_type_index = self->dwarf_status.DI_counter;
            }
            p = DW_TAG_pointer_type::new(
                self->dwarf_status.DI_counter,
                DI_ERROR_INDEX(),
                64,
                temp.c_str
            );
            self->sctx->debug_info.push(p => DI_node*);
            self->sctx->add_DI_type(temp.c_str, self->dwarf_status.DI_counter);
            self->dwarf_status.DI_counter += 1;
            temp.pop_back();
        }

        if (self->sctx->DI_type_map.has(temp.__ptr__()) && p != nil) {
            p->base_type_index = self->sctx->DI_type_map.get(temp.__ptr__());
        } else {
            var info = str::from("cannot generate DI_type for \"");
            info.append(n->c_str)->append("\"");
            defer info.delete();

            panic(info.c_str);
        }
    }

    func find_DI_type(self, ty: type*) -> DI_node* {
        if (ty->is_void() && !ty->is_pointer()) {
            return DI_null::new() => DI_node*;
        }

        var n = ty->full_path_name(self->pkg, true);
        defer n.delete();

        if (!self->sctx->DI_type_map.has(n.__ptr__())) {
            self->generate_DI_type_if_not_exists(n.__ptr__());
        }
        var index = self->sctx->DI_type_map.get(n.__ptr__());
        return DI_ref_index::new(index) => DI_node*;
    }

    func find_DI_type_index(self, ty: type*) -> u64 {
        if (ty->is_void() && !ty->is_pointer()) {
            return DI_ERROR_INDEX();
        }

        var n = ty->full_path_name(self->pkg, true);
        defer n.delete();

        if (!self->sctx->DI_type_map.has(n.__ptr__())) {
            self->generate_DI_type_if_not_exists(n.__ptr__());
        }
        var index = self->sctx->DI_type_map.get(n.__ptr__());
        return index;
    }

    func generate_DI_location(self, loc: span*) -> u64 {
        // if scope index is invalid, we can't add location info
        // if debug mode is not enabled, scope_index must be DI_ERROR_INDEX
        if (self->dwarf_status.scope_index == DI_ERROR_INDEX()) {
            return DI_ERROR_INDEX();
        }

        // check if location is already generated
        if (self->dwarf_status.has_DI_location(loc)) {
            return self->dwarf_status.get_DI_location_index(loc);
        }

        // will do DI_counter + 1 here
        var DI_loc = self->dwarf_status.new_DI_location(loc);
        self->sctx->debug_info.push(DI_loc => DI_node*);
        return DI_loc->get_index();
    }

    func generate_llvm_ident(self) {
        var ident = DI_named_metadata::new("llvm.ident");
        self->sctx->named_metadata.push(ident);
        
        var version_str = str::from("colgm compiler version ");
        version_str.append(version());
        defer version_str.delete();
        
        var ver_list = DI_list::new(self->dwarf_status.DI_counter);
        ver_list->add(DI_string::new(version_str.c_str) => DI_node*);
        ident->add(DI_ref_index::new(self->dwarf_status.DI_counter) => DI_node*);
        self->sctx->debug_info.push(ver_list => DI_node*);

        self->dwarf_status.DI_counter += 1;
    }

    func generate_llvm_module_flags(self) {
        var module_flags = DI_named_metadata::new("llvm.module.flags");
        self->sctx->named_metadata.push(module_flags);

        var dwarf_version = DI_list::new(self->dwarf_status.DI_counter);
        dwarf_version->add(DI_i32::new(7) => DI_node*);
        dwarf_version->add(DI_string::new("Dwarf Version") => DI_node*);
        dwarf_version->add(DI_i32::new(4) => DI_node*);
        self->sctx->debug_info.push(dwarf_version => DI_node*);
        module_flags->add(DI_ref_index::new(self->dwarf_status.DI_counter) => DI_node*);
        self->dwarf_status.DI_counter += 1;

        var debug_info_version = DI_list::new(self->dwarf_status.DI_counter);
        debug_info_version->add(DI_i32::new(2) => DI_node*);
        debug_info_version->add(DI_string::new("Debug Info Version") => DI_node*);
        debug_info_version->add(DI_i32::new(3) => DI_node*);
        self->sctx->debug_info.push(debug_info_version => DI_node*);
        module_flags->add(DI_ref_index::new(self->dwarf_status.DI_counter) => DI_node*);
        self->dwarf_status.DI_counter += 1;

        var wchar_size = DI_list::new(self->dwarf_status.DI_counter);
        wchar_size->add(DI_i32::new(1) => DI_node*);
        wchar_size->add(DI_string::new("wchar_size") => DI_node*);
        wchar_size->add(DI_i32::new(4) => DI_node*);
        self->sctx->debug_info.push(wchar_size => DI_node*);
        module_flags->add(DI_ref_index::new(self->dwarf_status.DI_counter) => DI_node*);
        self->dwarf_status.DI_counter += 1;

        var uwtable = DI_list::new(self->dwarf_status.DI_counter);
        uwtable->add(DI_i32::new(7) => DI_node*);
        uwtable->add(DI_string::new("uwtable") => DI_node*);
        uwtable->add(DI_i32::new(1) => DI_node*);
        self->sctx->debug_info.push(uwtable => DI_node*);
        module_flags->add(DI_ref_index::new(self->dwarf_status.DI_counter) => DI_node*);
        self->dwarf_status.DI_counter += 1;

        var frame_pointer = DI_list::new(self->dwarf_status.DI_counter);
        frame_pointer->add(DI_i32::new(7) => DI_node*);
        frame_pointer->add(DI_string::new("frame-pointer") => DI_node*);
        frame_pointer->add(DI_i32::new(2) => DI_node*);
        self->sctx->debug_info.push(frame_pointer => DI_node*);
        module_flags->add(DI_ref_index::new(self->dwarf_status.DI_counter) => DI_node*);
        self->dwarf_status.DI_counter += 1;
    }

    func generate_DI_file(self) {
        self->sctx->DI_file_map.clear();

        // empty file name maybe used for auto-generated functions
        var empty_file_name = str::instance();
        defer empty_file_name.delete();

        self->sctx->debug_info.push(
            DI_file::new(self->dwarf_status.DI_counter, "", "") => DI_node*
        );
        self->sctx->DI_file_map.insert(
            empty_file_name.__ptr__(),
            self->dwarf_status.DI_counter
        );
        self->dwarf_status.DI_counter += 1;

        foreach (var i; self->ctx->global->domain) {
            self->sctx->debug_info.push(DI_file::new(
                self->dwarf_status.DI_counter,
                i.key()->c_str,
                ""
            ) => DI_node*);
            self->sctx->DI_file_map.insert(
                i.key(),
                self->dwarf_status.DI_counter
            );
            self->dwarf_status.DI_counter += 1;
        }
    }

    func generate_llvm_dbg_cu(self) -> DI_compile_unit* {
        var llvm_dbg_cu = DI_named_metadata::new("llvm.dbg.cu");
        self->sctx->named_metadata.push(llvm_dbg_cu);

        var main_input_file_index = self->sctx->DI_file_map.get(
            self->ctx->global->main_input_file.__ptr__()
        );
        self->dwarf_status.compile_unit_index = self->dwarf_status.DI_counter;
        
        var version_str = str::from("colgm compiler version ");
        version_str.append(version());
        defer version_str.delete();

        var cu = DI_compile_unit::new(
            self->dwarf_status.DI_counter,
            version_str.c_str,
            main_input_file_index
        );
        llvm_dbg_cu->add(DI_ref_index::new(self->dwarf_status.DI_counter) => DI_node*);
        self->sctx->debug_info.push(cu => DI_node*);
        self->dwarf_status.DI_counter += 1;

        return cu;
    }

    func generate_basic_type(self) {
        self->sctx->debug_info.push(DI_basic_type::new(
            self->dwarf_status.DI_counter,
            "i8",
            8,
            "DW_ATE_signed"
        ) => DI_node*);
        self->sctx->add_DI_type("i8", self->dwarf_status.DI_counter);
        self->dwarf_status.DI_counter += 1;

        self->sctx->debug_info.push(DI_basic_type::new(
            self->dwarf_status.DI_counter,
            "i16",
            16,
            "DW_ATE_signed"
        ) => DI_node*);
        self->sctx->add_DI_type("i16", self->dwarf_status.DI_counter);
        self->dwarf_status.DI_counter += 1;

        self->sctx->debug_info.push(DI_basic_type::new(
            self->dwarf_status.DI_counter,
            "i32",
            32,
            "DW_ATE_signed"
        ) => DI_node*);
        self->sctx->add_DI_type("i32", self->dwarf_status.DI_counter);
        self->dwarf_status.DI_counter += 1;

        self->sctx->debug_info.push(DI_basic_type::new(
            self->dwarf_status.DI_counter,
            "i64",
            64,
            "DW_ATE_signed"
        ) => DI_node*);
        self->sctx->add_DI_type("i64", self->dwarf_status.DI_counter);
        self->dwarf_status.DI_counter += 1;

        self->sctx->debug_info.push(DI_basic_type::new(
            self->dwarf_status.DI_counter,
            "u8",
            8,
            "DW_ATE_unsigned"
        ) => DI_node*);
        self->sctx->add_DI_type("u8", self->dwarf_status.DI_counter);
        self->dwarf_status.DI_counter += 1;

        self->sctx->debug_info.push(DI_basic_type::new(
            self->dwarf_status.DI_counter,
            "u16",
            16,
            "DW_ATE_unsigned"
        ) => DI_node*);
        self->sctx->add_DI_type("u16", self->dwarf_status.DI_counter);
        self->dwarf_status.DI_counter += 1;

        self->sctx->debug_info.push(DI_basic_type::new(
            self->dwarf_status.DI_counter,
            "u32",
            32,
            "DW_ATE_unsigned"
        ) => DI_node*);
        self->sctx->add_DI_type("u32", self->dwarf_status.DI_counter);
        self->dwarf_status.DI_counter += 1;

        self->sctx->debug_info.push(DI_basic_type::new(
            self->dwarf_status.DI_counter,
            "u64",
            64,
            "DW_ATE_unsigned"
        ) => DI_node*);
        self->sctx->add_DI_type("u64", self->dwarf_status.DI_counter);
        self->dwarf_status.DI_counter += 1;

        self->sctx->debug_info.push(DI_basic_type::new(
            self->dwarf_status.DI_counter,
            "f32",
            32,
            "DW_ATE_float"
        ) => DI_node*);
        self->sctx->add_DI_type("f32", self->dwarf_status.DI_counter);
        self->dwarf_status.DI_counter += 1;

        self->sctx->debug_info.push(DI_basic_type::new(
            self->dwarf_status.DI_counter,
            "f64",
            64,
            "DW_ATE_float"
        ) => DI_node*);
        self->sctx->add_DI_type("f64", self->dwarf_status.DI_counter);
        self->dwarf_status.DI_counter += 1;

        self->sctx->debug_info.push(DI_basic_type::new(
            self->dwarf_status.DI_counter,
            "bool",
            1,
            "DW_ATE_boolean"
        ) => DI_node*);
        self->sctx->add_DI_type("bool", self->dwarf_status.DI_counter);
        self->dwarf_status.DI_counter += 1;
    }

    func generate_single_DI_enum(self, e: colgm_enum*) -> u64 {
        var ty = type::instance();
        ty.name.append(e->name.c_str);
        ty.loc_file.append(e->location.file.c_str);
        defer ty.delete();

        var id = ty.full_path_name(self->pkg, false);
        defer id.delete();

        var i64_s = str::from("i64");
        defer i64_s.delete();

        var tmp = DI_enum_type::new(
            self->dwarf_status.DI_counter,
            e->name.c_str,
            id.c_str,
            self->sctx->DI_file_map.get(e->location.file.__ptr__()),
            e->location.begin_line,
            self->sctx->DI_type_map.get(i64_s.__ptr__())
        );
        self->sctx->add_DI_type(id.c_str, self->dwarf_status.DI_counter);
        self->sctx->debug_info.push(tmp => DI_node*);
        self->dwarf_status.DI_counter += 1;

        var enum_list = DI_list::new(self->dwarf_status.DI_counter);
        self->sctx->debug_info.push(enum_list => DI_node*);
        tmp->elements_index = self->dwarf_status.DI_counter;
        self->dwarf_status.DI_counter += 1;

        foreach (var i; e->ordered_member) {
            self->sctx->debug_info.push(DI_enumerator::new(
                self->dwarf_status.DI_counter,
                i.get()->c_str,
                e->members.get(i.get())
            ) => DI_node*);
            enum_list->add(DI_ref_index::new(self->dwarf_status.DI_counter) => DI_node*);
            self->dwarf_status.DI_counter += 1;
        }

        return tmp->base.index;
    }

    func generate_DI_enum_type(self) -> u64 {
        var enums_list = DI_list::new(self->dwarf_status.DI_counter);
        self->sctx->debug_info.push(enums_list => DI_node*);
        self->dwarf_status.DI_counter += 1;

        foreach (var i; self->ctx->global->domain) {
            foreach (var j; i.value()->enums) {
                var index = self->generate_single_DI_enum(j.value());
                enums_list->add(DI_ref_index::new(index) => DI_node*);
            }
        }

        return enums_list->base.index;
    }

    func generate_single_DI_struct(self, s: colgm_struct*) {
        var ty = type::instance();
        ty.name.append(s->name.c_str);
        ty.loc_file.append(s->location.file.c_str);
        defer ty.delete();

        var id = ty.full_path_name(self->pkg, false);
        defer id.delete();

        var tmp = DI_structure_type::new(
            self->dwarf_status.DI_counter,
            s->name.c_str,
            id.c_str,
            self->sctx->DI_file_map.get(s->location.file.__ptr__()),
            s->location.begin_line
        );
        self->sctx->add_DI_type(id.c_str, self->dwarf_status.DI_counter);
        self->sctx->add_DI_struct(id.c_str, tmp);
        self->sctx->debug_info.push(tmp => DI_node*);
        self->dwarf_status.DI_counter += 1;
    }

    func generate_DI_structure_type(self) {
        foreach (var i; self->ctx->global->domain) {
            foreach (var j; i.value()->structs) {
                self->generate_single_DI_struct(j.value());
            }
        }
    }

    func generate_single_DI_tagged_union(self, u: colgm_tagged_union*) {
        var ty = type::instance();
        ty.name.append(u->name.c_str);
        ty.loc_file.append(u->location.file.c_str);
        defer ty.delete();

        var id = ty.full_path_name(self->pkg, false);
        defer id.delete();

        var tmp = DI_union_type::new(
            self->dwarf_status.DI_counter,
            u->name.c_str,
            id.c_str,
            self->sctx->DI_file_map.get(u->location.file.__ptr__()),
            u->location.begin_line
        );
        self->sctx->add_DI_type(id.c_str, self->dwarf_status.DI_counter);
        self->sctx->add_DI_union(id.c_str, tmp);
        self->sctx->debug_info.push(tmp => DI_node*);
        self->dwarf_status.DI_counter += 1;
    }

    func generate_DI_tagged_union_type(self) {
        foreach (var i; self->ctx->global->domain) {
            foreach (var j; i.value()->tagged_unions) {
                self->generate_single_DI_tagged_union(j.value());
            }
        }
    }

    func generate_single_struct_member_dwarf(self, s: colgm_struct*) {
        var ty = type::instance();
        ty.name.append(s->name.c_str);
        ty.loc_file.append(s->location.file.c_str);
        defer ty.delete();

        var id = ty.full_path_name(self->pkg, false);
        defer id.delete();

        var s_node = self->sctx->DI_struct_map.get(id.__ptr__());

        var element = DI_list::new(self->dwarf_status.DI_counter);
        s_node->elements = self->dwarf_status.DI_counter;
        self->sctx->debug_info.push(element => DI_node*);
        self->dwarf_status.DI_counter += 1;

        foreach (var i; s->ordered_fields) {
            var member = i.get();
            var member_type = s->fields.get(member);
            var member_span = s->fields_span.get(i.index());
            var member_type_index = self->find_DI_type_index(member_type);
            var field_node = DW_TAG_member::new(
                self->dwarf_status.DI_counter,
                member->c_str,
                s_node->base.index,
                self->sctx->DI_file_map.get(member_span->file.__ptr__()),
                member_span->begin_line + 1,
                member_type_index
            );
            self->sctx->debug_info.push(field_node => DI_node*);
            element->add(DI_ref_index::new(self->dwarf_status.DI_counter) => DI_node*);
            self->dwarf_status.DI_counter += 1;
        }
    }

    func generate_structure_member_dwarf(self) {
        foreach (var i; self->ctx->global->domain) {
            foreach (var j; i.value()->structs) {
                self->generate_single_struct_member_dwarf(j.value());
            }
        }
    }

    func generate_single_tagged_union_member_dwarf(self, u: colgm_tagged_union*) {
        var ty = type::instance();
        ty.name.append(u->name.c_str);
        ty.loc_file.append(u->location.file.c_str);
        defer ty.delete();

        var id = ty.full_path_name(self->pkg, false);
        defer id.delete();

        var u_node = self->sctx->DI_union_map.get(id.__ptr__());

        var element = DI_list::new(self->dwarf_status.DI_counter);
        u_node->elements = self->dwarf_status.DI_counter;
        self->sctx->debug_info.push(element => DI_node*);
        self->dwarf_status.DI_counter += 1;

        foreach (var i; u->ordered_members) {
            var member = i.get();
            var member_type = u->members.get(member);
            var member_span = u->members_span.get(i.index());
            var member_type_index = self->find_DI_type_index(member_type);
            var field_node = DW_TAG_member::new(
                self->dwarf_status.DI_counter,
                member->c_str,
                u_node->base.index,
                self->sctx->DI_file_map.get(member_span->file.__ptr__()),
                member_span->begin_line + 1,
                member_type_index
            );
            self->sctx->debug_info.push(field_node => DI_node*);
            element->add(DI_ref_index::new(self->dwarf_status.DI_counter) => DI_node*);
            self->dwarf_status.DI_counter += 1;
        }
    }

    func generate_tagged_union_member_dwarf(self) {
        foreach (var i; self->ctx->global->domain) {
            foreach (var j; i.value()->tagged_unions) {
                self->generate_single_tagged_union_member_dwarf(j.value());
            }
        }
    }

    func generate_single_DI_subprogram(self, f: mir_func*) {
        // auto added libc functions may not have location
        if (!self->sctx->DI_file_map.has(f->location.file.__ptr__())) {
            return;
        }

        var tmp = DI_subprogram::new(
            self->dwarf_status.DI_counter,
            f->name.c_str,
            self->sctx->DI_file_map.get(f->location.file.__ptr__()),
            f->location.begin_line,
            self->dwarf_status.DI_counter + 1,    // `type` field, DISubroutineType
            self->dwarf_status.compile_unit_index // `unit` field, DICompileUnit
        );
        self->sctx->debug_info.push(tmp => DI_node*);
        if (f->block != nil) {
            self->dwarf_status.impl_debug_info.insert(
                f->name.__ptr__(),
                self->dwarf_status.DI_counter
            );
        }
        self->dwarf_status.DI_counter += 1;

        // DISubprogram must have DISubroutineType as `type` field
        // otherwise segfault will happen when using llc or clang
        // issue: https://github.com/llvm/llvm-project/issues/59471
        var subroutine = DI_subroutine::new(
            self->dwarf_status.DI_counter,    // self index
            self->dwarf_status.DI_counter + 1 // DI_list index
        );
        self->sctx->debug_info.push(subroutine => DI_node*);
        self->dwarf_status.DI_counter += 1;

        var ty_list = DI_list::new(self->dwarf_status.DI_counter);
        self->sctx->debug_info.push(ty_list => DI_node*);
        self->dwarf_status.DI_counter += 1;

        ty_list->add(self->find_DI_type(f->return_type.__ptr__()));
        foreach (var i; f->params) {
            ty_list->add(self->find_DI_type(i.get()->value.__ptr__()));
        }
    }

    func generate_DI_subprogram(self, mctx: mir_context*) {
        // only generate subprogram for impls
        foreach (var i; mctx->impls) {
            self->generate_single_DI_subprogram(i.get());
        }
    }

    func generate_DWARF(self, mctx: mir_context*) {
        self->generate_llvm_ident();
        self->generate_llvm_module_flags();
        self->generate_DI_file();
        var cu = self->generate_llvm_dbg_cu();

        // generate info for base types
        self->generate_basic_type();
        cu->enums_index = self->generate_DI_enum_type();
        self->generate_DI_structure_type();
        self->generate_DI_tagged_union_type();

        // generate after all base types are registered
        self->generate_structure_member_dwarf();
        self->generate_tagged_union_member_dwarf();
        self->generate_DI_subprogram(mctx);
    }
}

impl mir2sir {
    pub func generate(self, mctx: mir_context*, verbose: bool, debug_mode: bool) {
        // debug mode is enabled by '-g'
        if (debug_mode) {
            self->dwarf_status.clear();
            self->generate_DWARF(mctx);
        }

        self->generate_type_mapper();
        self->sc.calculate(mctx, verbose);
        self->emit_tagged_union(mctx);
        self->emit_struct(mctx);
        self->emit_func_decl(mctx);
        self->emit_func_impl(mctx);
        adjust_va_arg(self->sctx, verbose);
        replace_struct_ptr_call(self->sctx, verbose);
        detect_redef_extern(self->sctx, self->err, verbose);
    }
}