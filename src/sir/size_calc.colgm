use std::map::{ hashmap };
use std::str::{ str };
use std::ptr::{ __ptr_size };
use std::io::{ io };

use sema::type::{ type };

use mir::context::{ mir_struct, mir_tagged_union, mir_context };

use util::package::{ package };
use util::timestamp::{ maketimestamp };

struct size_align_pair {
    size: u64,
    align: u64
}

pub struct size_calc {
    pkg: package*,
    struct_mapper: hashmap<str, mir_struct*>,
    tagged_union_mapper: hashmap<str, mir_tagged_union*>,
}

impl size_calc {
    pub func instance(pkg: package*) -> size_calc {
        return size_calc {
            pkg: pkg,
            struct_mapper: hashmap<str, mir_struct*>::instance(),
            tagged_union_mapper: hashmap<str, mir_tagged_union*>::instance()
        };
    }

    pub func delete(self) {
        self.struct_mapper.delete();
        self.tagged_union_mapper.delete();
    }
}

impl size_calc {
    func get_size_align(self, t: type&) -> size_align_pair {
        var name = t.full_path_name(self.pkg);
        defer name.delete();

        var field_size: u64 = 0;
        var alignment: u64 = 1;

        if (t.is_pointer() && !t.is_array) {
            // pointer but not array
            field_size = __ptr_size();
            alignment = __ptr_size();
        } else if (t.pointer_depth >= 2 && t.is_array) {
            // pointer array, set base size here
            field_size = __ptr_size();
            alignment = __ptr_size();
        } else if (self.struct_mapper.has(name)) {
            var st = self.struct_mapper.get(name);
            if (!st->size_calculated) {
                self.calculate_single_struct_size(st[0]);
            }
            field_size = st->size;
            alignment = st->align;
        } else if (self.tagged_union_mapper.has(name)) {
            var un = self.tagged_union_mapper.get(name);
            if (!un->size_calculated) {
                self.calculate_single_tagged_union_size(un[0]);
            }
            field_size = un->total_size;
            alignment = un->align;
        } else if (t.is_bool_base()) {
            field_size = 1;
            alignment = 1;
        } else if (t.is_integer_base()) {
            if (t.name.eq_const("u8") || t.name.eq_const("i8")) {
                field_size = 1;
                alignment = 1;
            } else if (t.name.eq_const("u16") || t.name.eq_const("i16")) {
                field_size = 2;
                alignment = 2;
            } else if (t.name.eq_const("u32") || t.name.eq_const("i32")) {
                field_size = 4;
                alignment = 4;
            } else if (t.name.eq_const("u64") || t.name.eq_const("i64")) {
                field_size = 8;
                alignment = 8;
            } else {
                // enum -> i64
                field_size = 8;
                alignment = 8;
            }
        } else if (t.is_float_base()) {
            if (t.name.eq_const("f32")) {
                field_size = 4;
                alignment = 4;
            } else {
                field_size = 8;
                alignment = 8;
            }
        }

        // array size
        if (t.is_array) {
            field_size *= t.array_length;
        }

        return size_align_pair {
            size: field_size,
            align: alignment
        };
    }
}

impl size_calc {
    func calculate_single_struct_size(self, s: mir_struct&) {
        if (s.size_calculated) {
            return;
        }

        // empty struct should have size 1 and alignment 1
        if (s.field_type.empty()) {
            s.size = 1;
            s.align = 1;
            s.size_calculated = true;
            return;
        }

        var offset: u64 = 0;
        var max_align: u64 = 1;
        foreach (var i; s.field_type) {
            var res = self.get_size_align(i.get());

            if (res.align > max_align) {
                max_align = res.align;
            }

            while (offset % res.align != 0) {
                offset += 1;
            }
            offset += res.size;
        }

        if (max_align != 0) {
            while (offset % max_align != 0) {
                offset += 1;
            }
        }

        s.size = offset;
        s.align = max_align;
        s.size_calculated = true;
    }

    func calculate_single_tagged_union_size(self, u: mir_tagged_union&) {
        if (u.size_calculated) {
            return;
        }

        if (u.member_type.empty()) {
            // tagged union must have a field with i64 type
            u.total_size = 8;
            u.union_size = 8;
            u.align = 8;
            u.size_calculated = true;
            return;
        }

        var offset: u64 = 8;
        var tagged_union_align: u64 = 8;

        // get max size and max alignment of all members
        var max_size: u64 = 0;
        var max_align: u64 = 1;
        foreach (var i; u.member_type) {
            var res = self.get_size_align(i.get());

            if (res.size > max_size) {
                max_size = res.size;
            }
            if (res.align > max_align) {
                max_align = res.align;
                u.max_align_type.reset_with(i.get());
                u.max_align_type_size = res.size;
            }
        }

        if (max_align > tagged_union_align) {
            tagged_union_align = max_align;
        }

        if (max_align != 0) {
            // align union member
            while (offset % max_align != 0) {
                offset += 1;
            }
            offset += max_size;
        }
        // align union ifself
        while (offset % tagged_union_align != 0) {
            offset += 1;
        }

        u.total_size = offset;
        u.union_size = max_size;
        u.align = tagged_union_align;
        u.size_calculated = true;
    }

    pub func calculate(self, mctx: mir_context*, verbose: bool) {
        var ts = maketimestamp();
        ts.stamp();

        self.struct_mapper.clear();
        self.tagged_union_mapper.clear();
        foreach (var i; mctx->structs) {
            var s_ty = type::instance(i.get().name.c_str, i.get().location.file.c_str);
            defer s_ty.delete();

            var s_full_name = s_ty.full_path_name(self.pkg);
            defer s_full_name.delete();

            self.struct_mapper.insert(s_full_name, i.get().__ptr__());
        }
        foreach (var i; mctx->tagged_unions) {
            var s_ty = type::instance(i.get().name.c_str, i.get().location.file.c_str);
            defer s_ty.delete();

            var s_full_name = s_ty.full_path_name(self.pkg);
            defer s_full_name.delete();

            self.tagged_union_mapper.insert(s_full_name, i.get().__ptr__());
        }

        foreach (var i; mctx->structs) {
            self.calculate_single_struct_size(i.get());
        }
        foreach (var i; mctx->tagged_unions) {
            self.calculate_single_tagged_union_size(i.get());
        }

        if (verbose) {
            io::stdout().green().out("   MIR2SIR ").reset();
            io::stdout().out("Run MIR pass");
            io::stdout().blue().out(" <calculate struct size>").reset().out(": ");
            io::stdout().cyan().out_u64(mctx->structs.size).reset();
            io::stdout().out(" ").out_f64(ts.elapsed_msec()).out(" ms\n");

            io::stdout().green().out("   MIR2SIR ").reset();
            io::stdout().out("Run MIR pass");
            io::stdout().blue().out(" <calculate tagged union size>").reset().out(": ");
            io::stdout().cyan().out_u64(mctx->tagged_unions.size).reset();
            io::stdout().out(" ").out_f64(ts.elapsed_msec()).out(" ms\n");
        }
    }
}
