use std::str::{ str };
use std::io::{ io };

use err::panic::{ panic };

pub enum value_kind {
    null,
    variable,
    literal
}

pub struct value_t {
    kind: value_kind,
    content: str
}

impl value_t {
    pub func instance() -> value_t {
        return value_t {
            kind: value_kind::null,
            content: str::from("")
        };
    }

    pub func delete(self) {
        self->content.delete();
    }

    pub func copy(self) -> value_t* {
        var res = value_t::__alloc__();
        if (res == nil) {
            panic("failed to allocate memory");
        }
        res->kind = self->kind;
        res->content = self->content.copy_instance();
        return res;
    }

    pub func copy_instance(self) -> value_t {
        return value_t {
            kind: self->kind,
            content: self->content.copy_instance()
        };
    }

    pub func dump(self, out: io) {
        match (self->kind) {
            value_kind::null => {
                if (!self->content.empty()) {
                    out.out("<null: ").out(self->content.c_str).out(">");
                }
            }
            value_kind::variable => {
                out.out("%").out(self->content.c_str);
            }
            value_kind::literal => {
                out.out(self->content.c_str);
            }
        }
    }
}

impl value_t {
    pub func null(name: i8*) -> value_t {
        var res = value_t::instance();
        res.kind = value_kind::null;
        if (name != nil) {
            res.content.append_i8_vec(name);
        }
        return res;
    }

    pub func variable(name: str*) -> value_t {
        var res = value_t::instance();
        res.kind = value_kind::variable;
        if (name == nil) {
            panic("variable name is null");
        }
        res.content.append_str(name);
        return res;
    }

    pub func literal(name: str*) -> value_t {
        var res = value_t::instance();
        res.kind = value_kind::literal;
        if (name == nil) {
            panic("literal name is null");
        }
        res.content.append_str(name);
        return res;
    }
}