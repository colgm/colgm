use std::str::{ str };
use std::ptr::{ ptr };
use std::vec::{ primitive_vec, vec };

use sir::value::{ value_t };

enum sir_kind {
    sir_null,
    sir_nop,
    sir_block,
    sir_alloca,
    sir_temp_ptr,
    sir_ret,
    sir_str,
    sir_zeroinitializer,
    sir_get_index,
    sir_get_field,
    sir_call,
    sir_neg,
    sir_bnot,
    sir_lnot,
    sir_add,
    sir_sub,
    sir_mul,
    sir_div,
    sir_rem,
    sir_band,
    sir_bxor,
    sir_bor,
    sir_cmp,
    sir_label,
    sir_store,
    sir_load,
    sir_br,
    sir_br_cond,
    sir_switch,
    sir_type_convert,
    sir_array_cast
}

pub struct sir {
    kind: sir_kind
}

pub struct sir_nop {
    base: sir,
    info: str
}

pub struct sir_block {
    base: sir,
    allocas: primitive_vec<ptr<sir_alloca>>,
    move_register: primitive_vec<ptr<sir_alloca>>,
    stmts: primitive_vec<ptr<sir>>
}

struct array_type_t {
    base_type: str,
    size: u64
}

pub struct sir_alloca {
    base: sir,
    variable: str,
    type: str,
    array_info: array_type_t    
}

pub struct sir_temp_ptr {
//
// used to get temporary pointer of numbering variable
//     %_1.real = alloca i32
// this operand will do this:
//     %1 = getelementptr i32, i32* %_1.real, i32 0
// and %1 is i32*
//
    base: sir,
    target: str,
    source: str,
    comment: str // for tail comment
}

pub struct sir_ret {
    base: sir,
    type: str,
    value: value_t
}

pub struct sir_str {
    base: sir,
    index: u64,
    length: u64,
    target: value_t
}

pub struct sir_zeroinitializer {
    base: sir,
    type: str,
    target: value_t
}

pub struct sir_get_index {
    base: sir,
    source: value_t,
    target: value_t,
    index: value_t,
    type: str,
    index_type: str
}

pub struct sir_get_field {
    base: sir,
    source: value_t,
    target: value_t,
    struct_name: str,
    index: u64
}

pub struct sir_call {
    base: sir,
    name: str,
    return_type: str,
    target: value_t,
    args_type: vec<str>,
    args: vec<value_t>,
    with_va_args: bool,
    with_va_args_real_param_size: u64,
    debug_info_index: u64
}

pub struct sir_neg {
    base: sir,
    target: value_t,
    source: value_t,
    is_integer: bool,
    type: str
}

pub struct sir_bnot {
    base: sir,
    target: value_t,
    source: value_t,
    type: str
}

pub struct sir_lnot {
    base: sir,
    target: value_t,
    source: value_t,
    type: str
}

pub struct sir_add {
    base: sir,
    target: value_t,
    left: value_t,
    right: value_t,
    is_integer: bool,
    type: str
}

pub struct sir_sub {
    base: sir,
    target: value_t,
    left: value_t,
    right: value_t,
    is_integer: bool,
    type: str
}

pub struct sir_mul {
    base: sir,
    target: value_t,
    left: value_t,
    right: value_t,
    is_integer: bool,
    type: str
}

pub struct sir_div {
    base: sir,
    target: value_t,
    left: value_t,
    right: value_t,
    is_integer: bool,
    is_signed: bool,
    type: str
}

pub struct sir_rem {
    base: sir,
    target: value_t,
    left: value_t,
    right: value_t,
    is_integer: bool,
    is_signed: bool,
    type: str
}

pub struct sir_band {
    base: sir,
    target: value_t,
    left: value_t,
    right: value_t,
    type: str
}

pub struct sir_bxor {
    base: sir,
    target: value_t,
    left: value_t,
    right: value_t,
    type: str
}

pub struct sir_bor {
    base: sir,
    target: value_t,
    left: value_t,
    right: value_t,
    type: str
}