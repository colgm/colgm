use sir::sir::{ sir_kind, sir_call };
use sir::context::{ sir_func, sir_context };

use std::io::{ io };

func adjust_posix_open(f: sir_func*) -> i64 {
    var adjust_count = 0;
    for (var i = f->body->stmts.iter(); !i.is_end(); i = i.next()) {
        var inst = i.get().unwrap();
        if (inst->kind != sir_kind::sir_call) {
            continue;
        }

        var call = inst => sir_call*;
        if (!call->name.eq_const("open")) {
            continue;
        }

        call->with_va_args = true;
        call->with_va_args_real_param_size = 2;
        adjust_count += 1;
    }
    return adjust_count;
}

pub func adjust_va_arg(ctx: sir_context*) {
    var adjust_count = 0;
    for (var i = ctx->func_impls.iter(); !i.is_end(); i = i.next()) {
        adjust_count += adjust_posix_open(i.get());
    }
    io::stdout().green().out("[sir] ").reset();
    io::stdout().out("run adjust va_arg call: ").out_i64(adjust_count).endln();
}