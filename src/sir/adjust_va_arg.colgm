use sir::sir::{ sir_kind, sir_call };
use sir::context::{ sir_func, sir_context };

use std::io::{ io };
use util::timestamp::{ maketimestamp };

func adjust_posix_open(f: sir_func*) -> i64 {
    var adjust_count = 0;
    foreach (var i; f->body->stmts) {
        var inst = i.get();
        if (inst->kind != sir_kind::sir_call) {
            continue;
        }

        var call = inst => sir_call*;
        if (!call->name.eq_const("open")) {
            continue;
        }

        call->with_va_args = true;
        call->with_va_args_real_param_size = 2;
        adjust_count += 1;
    }
    return adjust_count;
}

pub func adjust_va_arg(ctx: sir_context*, verbose: bool) {
    var ts = maketimestamp();
    ts.stamp();

    var adjust_count = 0;
    foreach (var i; ctx->func_impls) {
        adjust_count += adjust_posix_open(i.get());
    }

    if (verbose) {
        io::stdout().green().out("[ SIR-PASS ] ").reset();
        io::stdout().out("Adjust va_arg call: ");
        io::stdout().light_cyan().out_i64(adjust_count).reset();
        io::stdout().out(" ").out_f64(ts.elapsed_msec()).out(" ms\n");
    }
}