use std::vec::{ vec };
use std::map::{ hashmap, pair };
use std::ptr::{ basic };
use std::str::{ str };
use std::libc::{ free };
use std::io::{ io };

use err::span::{ span };
use sir::sir::*;
use util::misc::{ get_platform, get_arch };

pub struct sir_struct {
    name: str,
    location: span,
    field_type: vec<str>
}

impl sir_struct {
    pub func instance(n: str*, loc: span*) -> sir_struct {
        return sir_struct {
            name: n->copy_instance(),
            location: loc->copy_instance(),
            field_type: vec<str>::instance()
        };
    }

    pub func delete(self) {
        self->name.delete();
        self->location.delete();
        self->field_type.delete();
    }

    pub func copy(self) -> sir_struct* {
        var res = sir_struct::__alloc__();
        res->name = self->name.copy_instance();
        res->location = self->location.copy_instance();
        res->field_type = self->field_type.copy_instance();
        return res;
    }
}

pub struct sir_func {
    name: str,
    params: vec<pair<str, str>>,
    return_type: str,
    attributes: vec<str>,
    with_va_args: bool,
    debug_info_index: u64,
    body: sir_block*
}

impl sir_func {
    pub func instance(n: str*) -> sir_func {
        return sir_func {
            name: n->copy_instance(),
            params: vec<pair<str, str>>::instance(),
            return_type: str::instance(),
            attributes: vec<str>::instance(),
            with_va_args: false,
            debug_info_index: 0,
            body: nil
        };
    }

    pub func delete(self) {
        self->name.delete();
        self->params.delete();
        self->return_type.delete();
        self->attributes.delete();
        if (self->body != nil) {
            var n = self->body => sir*;
            n->delete();
            free(n => i8*);
        }
    }

    pub func copy(self) -> sir_func* {
        var res = sir_func::__alloc__();
        res->name = self->name.copy_instance();
        res->params = self->params.copy_instance();
        res->return_type = self->return_type.copy_instance();
        res->attributes = self->attributes.copy_instance();
        res->with_va_args = self->with_va_args;
        res->debug_info_index = self->debug_info_index;
        res->body = self->body;

        self->body = nil; // set to nil to avoid double free
        return res;
    }

    pub func set_attributes(self, v: vec<str>*) {
        self->attributes.clear();
        for (var i = v->iter(); !i.is_end(); i = i.next()) {
            self->attributes.push(i.get());
        }
    }
}

pub struct sir_context {
    struct_decls: vec<sir_struct>,
    func_decls: vec<sir_func>,
    func_impls: vec<sir_func>,
    const_strings: hashmap<str, basic<u64>>
}

impl sir_context {
    pub func instance() -> sir_context {
        return sir_context {
            struct_decls: vec<sir_struct>::instance(),
            func_decls: vec<sir_func>::instance(),
            func_impls: vec<sir_func>::instance(),
            const_strings: hashmap<str, basic<u64>>::instance()
        };
    }

    pub func delete(self) {
        self->struct_decls.delete();
        self->func_decls.delete();
        self->func_impls.delete();
        self->const_strings.delete();
    }
}

impl sir_context {
    func dump_target_tripple(self, out: io) {
        var platform = str::from(get_platform());
        var arch = str::from(get_arch());

        if (platform.eq_const("linux") && arch.eq_const("x86_64")) {
            out.out("target triple = \"x86_64-pc-linux-gnu\"\n\n");
        }

        if (platform.eq_const("linux") && arch.eq_const("aarch64")) {
            out.out("target triple = \"aarch64-unknown-linux-gnu\"\n\n");
        }

        if (platform.eq_const("macos") && arch.eq_const("aarch64")) {
            out.out("target triple = \"arm64-apple-macosx12.0.0\"\n\n");
        }

        platform.delete();
        arch.delete();
    }

    func dump_structs(self, out: io) {
        for (var i = self->struct_decls.iter(); !i.is_end(); i = i.next()) {
            var s = i.get();
            out.out(s->name.c_str).out(" = type ");
            if (s->field_type.empty()) {
                out.out("{}\n");
                continue;
            } else {
                out.out("{ ");
            }
            for (var j = s->field_type.iter(); !j.is_end(); j = j.next()) {
                if (j.index() != 0) {
                    out.out(", ");
                }
                out.out(j.get()->c_str);
            }
            out.out(" }\n");
        }

        if (self->struct_decls.size > 0) {
            out.out("\n");
        }
    }

    func dump_func_decls(self, out: io) {
        for (var i = self->func_decls.iter(); !i.is_end(); i = i.next()) {
            var f = i.get();
            out.out("declare ").out(f->return_type.c_str);
            out.out(" @").out(f->name.c_str).out("(");
            for (var j = f->params.iter(); !j.is_end(); j = j.next()) {
                if (j.index() != 0) {
                    out.out(", ");
                }
                out.out(j.get()->value->c_str).out(" %");
                out.out(j.get()->key->c_str);
            }
            out.out(")\n");
        }

        if (self->func_decls.size > 0) {
            out.out("\n");
        }
    }

    pub func dump(self, out: io) {
        self->dump_target_tripple(out);
        self->dump_structs(out);
        self->dump_func_decls(out);

        var output = "@.str.0 = private unnamed_addr constant [27 x i8] c\"[hello.colgm] hello world!\\00\"

define i32 @main() {
label.entry:
  %_2.real = alloca i32
  %0 = bitcast [27 x i8]* @.str.0 to i8*
  %1 = call i32 @puts(i8* %0)
  %2 = getelementptr i32, i32* %_2.real, i32 0 ; %_2.real -> %2
  store i32 %1, i32* %2
  %3 = load i32, i32* %2
  ret i32 0
}";
        out.out(output).endln();
    }
}