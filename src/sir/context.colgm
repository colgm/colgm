use std::vec::{ vec };
use std::pair::{ pair };
use std::map::{ hashmap };
use std::str::{ str };
use std::libc::{ free, streq };
use std::io::{ io };
use std::time::{ chrono };

use err::span::{ span };
use sir::sir::*;

use sema::type::{ type };
use dwarf::dwarf::*;

use util::mangling::{ llvm_raw_string };
use util::platform::{ get_platform, get_target_triple };

use util::package::{ package };

pub struct sir_struct {
    name: str,
    location: span,
    field_type: vec<str>,
    size: u64,
    align: u64
}

impl sir_struct {
    pub func instance(n: str&, loc: span&, s: u64, a: u64) -> sir_struct {
        return sir_struct {
            name: n.clone(),
            location: loc.clone(),
            field_type: vec<str>::instance(),
            size: s,
            align: a
        };
    }

    pub func delete(self) {
        self.name.delete();
        self.location.delete();
        self.field_type.delete();
    }

    pub func clone(self) -> sir_struct {
        var res = sir_struct {};
        res.name = self.name.clone();
        res.location = self.location.clone();
        res.field_type = self.field_type.clone();
        res.size = self.size;
        res.align = self.align;
        return res;
    }

    pub func dump(self, out: io&) {
        out.out(self.name.c_str).out(" = type ");

        if (self.field_type.empty()) {
            out.out("{} ; size ").out_u64(self.size);
            out.out(" align ").out_u64(self.align).endln();
            return;
        } else {
            out.out("{ ");
        }

        foreach (var i; self.field_type) {
            if (i.index() != 0) {
                out.out(", ");
            }
            out.out(i.get().c_str);
        }

        out.out(" } ; size ").out_u64(self.size);
        out.out(" align ").out_u64(self.align).endln();
    }

    pub func get_intrinsic_method_name(self, method: const i8*) -> str {
        var func_name = str::instance();

        if (self.name.size >= 2 && self.name.get(1) == '"') {
            // %"struct.
            // ^^^^^^^^^ 9
            // delete prefix `"%struct.`
            var temp = self.name.substr_from(9);
            defer temp.delete();

            func_name.append("\"");
            func_name.append_str(temp);
            func_name.pop_back();
            func_name.append(".");
            func_name.append(method);
            func_name.append("\"");
        } else {
            // delete prefix `%struct.`
            var temp = self.name.substr_from(8);
            defer temp.delete();

            func_name.append_str(temp);
            func_name.append(".");
            func_name.append(method);
        }

        return func_name;
    }
}

pub struct sir_tagged_union {
    name: str,
    location: span,
    member_type: vec<str>,
    size: u64,
    align: u64
}

impl sir_tagged_union {
    pub func instance(n: str&, loc: span&, s: u64, a: u64) -> sir_tagged_union {
        return sir_tagged_union {
            name: n.clone(),
            location: loc.clone(),
            member_type: vec<str>::instance(),
            size: s,
            align: a
        };
    }

    pub func delete(self) {
        self.name.delete();
        self.location.delete();
        self.member_type.delete();
    }

    pub func clone(self) -> sir_tagged_union {
        var res = sir_tagged_union {};
        res.name = self.name.clone();
        res.location = self.location.clone();
        res.member_type = self.member_type.clone();
        res.size = self.size;
        res.align = self.align;
        return res;
    }

    pub func dump(self, out: io&) {
        out.out(self.name.c_str).out(" = type ");

        if (self.member_type.empty()) {
            out.out("{ i64 } ; size ").out_u64(self.size);
            out.out(" align ").out_u64(self.align).endln();
            return;
        } else {
            out.out("{ i64, ");
        }

        foreach (var i; self.member_type) {
            if (i.index() != 0) {
                out.out(", ");
            }
            out.out(i.get().c_str);
        }

        out.out(" } ; size ").out_u64(self.size);
        out.out(" align ").out_u64(self.align).endln();
    }

    pub func get_intrinsic_method_name(self, method: const i8*) -> str {
        var func_name = str::instance();

        // %tagged_union.
        // ^^^^^^^^^^^^^^ 14
        // delete prefix `%tagged_union.`
        var temp = self.name.substr_from(14);
        defer temp.delete();

        func_name.append_str(temp);
        func_name.append(".");
        func_name.append(method);

        return func_name;
    }
}

pub struct sir_func {
    name: str,
    location: span,
    params: vec<pair<str, str>>,
    return_type: str,
    attributes: vec<str>,
    with_va_args: bool,
    debug_info_index: u64,
    body: sir_block*,

    // mark as eliminated
    eliminated: bool
}

impl sir_func {
    pub func instance(n: str&, l: span&) -> sir_func {
        return sir_func {
            name: n.clone(),
            location: l.clone(),
            params: vec<pair<str, str>>::instance(),
            return_type: str::instance(),
            attributes: vec<str>::instance(),
            with_va_args: false,
            debug_info_index: DI_ERROR_INDEX(),
            body: nil,
            eliminated: false
        };
    }

    pub func delete(self) {
        self.name.delete();
        self.location.delete();
        self.params.delete();
        self.return_type.delete();
        self.attributes.delete();
        if (self.body != nil) {
            var n = self.body => sir*;
            n->delete();
            free(n => i8*);
        }
    }

    pub func clone(self) -> sir_func {
        var res = sir_func {};
        res.name = self.name.clone();
        res.location = self.location.clone();
        res.params = self.params.clone();
        res.return_type = self.return_type.clone();
        res.attributes = self.attributes.clone();
        res.with_va_args = self.with_va_args;
        res.debug_info_index = self.debug_info_index;

        res.body = self.body; // shallow copy
        self.body = nil; // set to nil to avoid double free

        res.eliminated = self.eliminated;
        return res;
    }

    pub func set_attributes(self, v: vec<str>&) {
        self.attributes.clear();
        foreach (var i; v) {
            self.attributes.push(i.get());
        }
    }

    func dump_attributes(self, out: io&) {
        var contain_frame_pointer_attribute = false;
        foreach (var i; self.attributes) {
            out.out(" ").out(i.get().c_str);
            // if frame-pointer attribute is found
            // do not generate frame-pointer=non-leaf for macos
            if (i.get().find_i8_vec("frame-pointer") != str::npos()) {
                contain_frame_pointer_attribute = true;
            }
        }

        // add frame pointer attribute for macos
        // then backtrace can get symbol of functions
        // but on linux, option `-rdynamic` should be given to ld
        // otherwise this attribute does not work
        if (self.body != nil && !contain_frame_pointer_attribute &&
            streq(get_platform(), "macos")) {
            out.out(" ").out("\"frame-pointer\"=\"non-leaf\"");
        }
    }

    pub func dump(self, out: io&) {
        if (self.eliminated) {
            out.out("; unused @").out(self.name.c_str).out("\n");
            return;
        }

        if (self.body == nil) {
            out.out("declare ");
        } else {
            out.out("define ");
        }
        out.out(self.return_type.c_str).out(" @").out(self.name.c_str).out("(");
        foreach (var i; self.params) {
            if (i.index() != 0) {
                out.out(", ");
            }
            out.out(i.get().value.c_str).out(" %");
            out.out(i.get().key.c_str);
        }
        if (self.with_va_args) {
            out.out(", ...");
        }
        out.out(")");
        self.dump_attributes(out);

        if (self.debug_info_index != DI_ERROR_INDEX()) {
            out.out(" !dbg !").out_u64(self.debug_info_index);
        }

        if (self.body == nil) {
            out.out("\n");
            return;
        }

        out.out(" {\n");
        var n = self.body => sir*;
        n->dump(out);
        out.out("}\n");
    }
}

pub struct sir_context {
    tagged_union_decls: vec<sir_tagged_union>,
    struct_decls: vec<sir_struct>,
    func_decls: vec<sir_func>,
    func_impls: vec<sir_func>,
    const_strings: hashmap<str, u64>,

    named_metadata: vec<DI_node*>,
    debug_info: vec<DI_node*>,
    DI_file_map: hashmap<str, u64>,
    DI_type_map: hashmap<str, u64>,
    DI_struct_map: hashmap<str, DI_node*>,
    DI_union_map: hashmap<str, DI_node*>,

    pkg: package*
}

impl sir_context {
    pub func instance(pkg: package*) -> sir_context {
        return sir_context {
            tagged_union_decls: vec<sir_tagged_union>::instance(),
            struct_decls: vec<sir_struct>::instance(),
            func_decls: vec<sir_func>::instance(),
            func_impls: vec<sir_func>::instance(),
            const_strings: hashmap<str, u64>::instance(),
            named_metadata: vec<DI_node*>::instance(),
            debug_info: vec<DI_node*>::instance(),
            DI_file_map: hashmap<str, u64>::instance(),
            DI_type_map: hashmap<str, u64>::instance(),
            DI_struct_map: hashmap<str, DI_node*>::instance(),
            DI_union_map: hashmap<str, DI_node*>::instance(),
            pkg: pkg
        };
    }

    pub func delete(self) {
        self.tagged_union_decls.delete();
        self.struct_decls.delete();
        self.func_decls.delete();
        self.func_impls.delete();
        self.const_strings.delete();
        foreach (var i; self.named_metadata) {
            var n = i.get();
            n->delete();
            free(n => i8*);
        }
        self.named_metadata.delete();
        foreach (var i; self.debug_info) {
            var n = i.get();
            n->delete();
            free(n => i8*);
        }
        self.debug_info.delete();
        self.DI_file_map.delete();
        self.DI_type_map.delete();
        self.DI_struct_map.delete();
        self.DI_union_map.delete();
    }
}

impl sir_context {
    pub func add_DI_type(self, name: const i8*, index: u64) {
        var temp = str::from(name);
        defer temp.delete();

        self.DI_type_map.insert(temp, index);
    }

    pub func add_DI_struct(self, name: const i8*, node: DI_node*) {
        var temp = str::from(name);
        defer temp.delete();

        self.DI_struct_map.insert(temp, node);
    }

    pub func add_DI_union(self, name: const i8*, node: DI_node*) {
        var temp = str::from(name);
        defer temp.delete();

        self.DI_union_map.insert(temp, node);
    }
}

impl sir_context {
    func dump_target_tripple(self, out: io&) {
        var target = get_target_triple();
        defer target.delete();

        out.out("target triple = \"").out(target.c_str).out("\"\n\n");
    }

    func dump_tagged_unions(self, out: io&) {
        foreach (var i; self.tagged_union_decls) {
            i.get().dump(out);
        }

        if (self.tagged_union_decls.size > 0) {
            out.out("\n");
        }
    }

    func dump_structs(self, out: io&) {
        foreach (var i; self.struct_decls) {
            i.get().dump(out);
        }

        if (self.struct_decls.size > 0) {
            out.out("\n");
        }
    }

    func dump_func_decls(self, out: io&) {
        foreach (var i; self.func_decls) {
            i.get().dump(out);
        }

        if (self.func_decls.size > 0) {
            out.out("\n");
        }
    }

    func dump_func_impls(self, out: io&) {
        foreach (var i; self.func_impls) {
            i.get().dump(out);
            out.endln();
        }
    }

    func dump_const_strings(self, out: io&) {
        // convert map to vec
        var ordered_const_string = vec<str>::instance();
        defer ordered_const_string.delete();
        foreach (var i; self.const_strings) {
            var temp = str::instance();
            defer temp.delete();

            ordered_const_string.push(temp);
        }
        foreach (var i; self.const_strings) {
            ordered_const_string.get(i.value()).append_str(i.key());
        }

        foreach (var i; ordered_const_string) {
            out.out("@str.").out_u64(i.index());
            out.out(" = private unnamed_addr constant [");
            out.out_u64(i.get().size + 1).out(" x i8] c\"");

            var raw_str = llvm_raw_string(i.get());
            defer raw_str.delete();

            out.out(raw_str.c_str).out("\"\n");
        }

        if (!ordered_const_string.empty()) {
            out.out("\n");
        }
    }

    func dump_builtin_time(self, out: io&) {
        var time_str = chrono::localtime();
        defer time_str.delete();

        out.out("@str.__time__ = private unnamed_addr constant [");
        out.out_u64(time_str.size + 1).out(" x i8] c\"");

        var time_raw = llvm_raw_string(time_str);
        defer time_raw.delete();

        out.out(time_raw.c_str).out("\"\n");

        out.out("define i8* @__time__() alwaysinline nounwind {\n");
        out.out("label._.entry:\n");
        out.out("  ret i8* bitcast ([");
        out.out_u64(time_str.size + 1).out(" x i8]* @str.__time__ to i8*)\n}\n\n");
    }

    func dump_intrinsic_alloc_method(self, out: io&) {
        foreach (var i; self.struct_decls) {
            var st_name = i.get().name.__ptr__();
            var alloc_func_name = i.get().get_intrinsic_method_name("__alloc__");
            defer alloc_func_name.delete();

            out.out("define ").out(st_name->c_str).out("* @");
            out.out(alloc_func_name.c_str).out("() alwaysinline {\n");
            out.out("label._.entry:\n");
            out.out("  %0 = call i8* @malloc(i64 ").out_u64(i.get().size).out(")\n");
            out.out("  %1 = bitcast i8* %0 to ").out(st_name->c_str).out("*\n");
            out.out("  ret ").out(st_name->c_str).out("* %1\n}\n");
        }

        foreach (var i; self.tagged_union_decls) {
            var un_name = i.get().name.__ptr__();
            var alloc_func_name = i.get().get_intrinsic_method_name("__alloc__");
            defer alloc_func_name.delete();

            out.out("define ").out(un_name->c_str).out("* @");
            out.out(alloc_func_name.c_str).out("() alwaysinline {\n");
            out.out("label._.entry:\n");
            out.out("  %0 = call i8* @malloc(i64 ").out_u64(i.get().size).out(")\n");
            out.out("  %1 = bitcast i8* %0 to ").out(un_name->c_str).out("*\n");
            out.out("  ret ").out(un_name->c_str).out("* %1\n}\n");
        }
    }

    func dump_named_metadata(self, out: io&) {
        foreach (var i; self.named_metadata) {
            i.get()->dump(out);
            out.endln();
        }
        if (self.named_metadata.size > 0) {
            out.endln();
        }
    }

    func dump_debug_info(self, out: io&) {
        foreach (var i; self.debug_info) {
            i.get()->dump(out);
            out.endln();
        }
    }

    pub func dump(self, out: io&) {
        self.dump_target_tripple(out);
        self.dump_tagged_unions(out);
        self.dump_structs(out);
        self.dump_func_decls(out);
        self.dump_const_strings(out);
        self.dump_builtin_time(out);
        self.dump_intrinsic_alloc_method(out);
        self.dump_func_impls(out);
        self.dump_named_metadata(out);
        self.dump_debug_info(out);
    }
}