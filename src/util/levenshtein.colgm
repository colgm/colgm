use std::vec::{ vec };
use std::str::{ str };

pub func levenshtein_distance(left: str&, right: str&) -> u64 {
    var v0 = vec<u64>::instance();
    var v1 = vec<u64>::instance();
    defer {
        v0.delete();
        v1.delete();
    }

    var left_len = left.size;
    var right_len = right.size;
    for (var i: u64 = 0; i < right_len; i += 1) {
        v0.push(0);
    }
    for (var i: u64 = 0; i < right_len; i += 1) {
        v1.push(0);
    }

    for (var i: u64 = 0; i < right_len; i += 1) {
        v0.data[i] = i;
    }
    for (var i: u64 = 1; i < left_len; i += 1) {
        v1.data[0] = i;
        for (var j: u64 = 1; j < right_len; j += 1) {
            var deletion = v0.data[j] + 1;
            var insertion = v1.data[j - 1] + 1;
            var substitution = v0.data[j - 1]; 
            if (left.c_str[i] != right.c_str[j]) {
                substitution += 1;
            }
            v1.data[j] = deletion;
            if (insertion < v1.data[j]) {
                v1.data[j] = insertion;
            }
            if (substitution < v1.data[j]) {
                v1.data[j] = substitution;
            }
        }
        v0.delete();
        v0 = v1.clone();
    }

    var res = v0.back();
    return res;
}