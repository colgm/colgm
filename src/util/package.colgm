use std::str::{ str };
use std::io::{ io };
use std::map::{ hashmap };
use std::panic::{ panic };

pub enum p_status {
    not_used,
    not_exist,
    analysed,
    analysing
}

struct package_info {
    path: str,
    status: p_status
}

impl package_info {
    pub func instance(path: const i8*, status: p_status) -> package_info {
        return package_info {
            path: str::from(path),
            status: status
        };
    }

    pub func delete(self) {
        self->path.delete();
    }

    pub func clone(self) -> package_info {
        return  package_info {
            path: self->path.clone(),
            status: self->status
        };
    }
}

pub struct package {
    library_path: str,
    file_mapper: hashmap<str, package_info>,
    file_to_module: hashmap<str, str>,
    module_to_file: hashmap<str, str>
}

impl package {
    pub func instance() -> package {
        return package {
            library_path: str::instance(),
            file_mapper: hashmap<str, package_info>::instance(),
            file_to_module: hashmap<str, str>::instance(),
            module_to_file: hashmap<str, str>::instance()
        };
    }

    pub func delete(self) {
        self->library_path.delete();
        self->file_mapper.delete();
        self->file_to_module.delete();
        self->module_to_file.delete();
    }

    pub func insert(self, module_name: str*, file_path: str*) {
        if (self->file_mapper.has(module_name)) {
            return;
        }

        var info = package_info::instance(file_path->c_str, p_status::not_used);
        defer info.delete();

        self->file_mapper.insert(module_name, info.__ptr__());
        self->file_to_module.insert(file_path, module_name);
        self->module_to_file.insert(module_name, file_path);
    }

    pub func get_status(self, name: str*) -> p_status {
        if (!self->file_mapper.has(name)) {
            return p_status::not_exist;
        }
        return self->file_mapper.get(name)->status;
    }

    pub func get_package_info(self, name: str*) -> package_info* {
        if (!self->file_mapper.has(name)) {
            panic("package info not found");
        }
        return self->file_mapper.get(name);
    }

    pub func has_file(self, file_path: str*) -> bool {
        return self->file_to_module.has(file_path);
    }

    pub func has_module(self, module_name: str*) -> bool {
        return self->module_to_file.has(module_name);
    }

    pub func get_file_path(self, module_name: str*) -> str* {
        if (!self->module_to_file.has(module_name)) {
            panic("file path not found");
        }
        return self->module_to_file.get(module_name);
    }

    pub func get_module_name(self, file_path: str*) -> str* {
        if (!self->file_to_module.has(file_path)) {
            panic("module name not found");
        }
        return self->file_to_module.get(file_path);
    }
}