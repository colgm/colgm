use std::io::{ io };
use std::libc::{ exit };
use util::misc::{ get_platform, get_arch };

pub struct cli_option {
    OPTION_VIEW_TOKEN: bool,
    OPTION_VIEW_AST: bool,
    OPTION_VIEW_LIB: bool,
    OPTION_VIEW_SEMA: bool,
    OPTION_VIEW_SIR: bool,
    OPTION_VIEW_MIR: bool,
    input_file: i8*,
    output_file: i8*,
    library_path: i8*
}

impl cli_option {
    pub func instance() -> cli_option {
        return cli_option {
            OPTION_VIEW_TOKEN: false,
            OPTION_VIEW_AST: false,
            OPTION_VIEW_LIB: false,
            OPTION_VIEW_SEMA: false,
            OPTION_VIEW_SIR: false,
            OPTION_VIEW_MIR: false,
            input_file: nil,
            output_file: nil,
            library_path: nil
        };
    }
}

pub func version() -> i8* {
    return "0.2";
}

pub func print_version() {
    io::stdout().out("colgm compiler version ").out(version()).out("\n");
}

pub func help() {
    io::stdout()
        .out("\ncolgm <option>\n")
        .out("option:\n")
        .out("   -h,   --help           | get help.\n")
        .out("   -v,   --version        | get version.\n")
        .out("\ncolgm [option] <file>\n")
        .out("option:\n")
        .out("   -o,   --output <file>  | output file, default <out.ll>.\n")
        .out("   -l,   --lex            | view analysed tokens.\n")
        .out("   -a,   --ast            | view ast.\n")
        .out("   -s,   --sema           | view semantic result.\n")
        .out("         --mir            | view mir.\n")
        .out("         --sir            | view sir.\n")
        .out("         --library <path> | add library path.\n")
        .out("         --dump-lib       | view libraries.\n")
        .out("file:\n")
        .out("   <filename>             | input file.\n")
        .endln();
}

pub func logo(executable: i8*) {
    io::stdout()
        .green().out("                __              \n")
        .green().out("    _________  / /___ _____ ___ \n")
        .green().out("   / ___/ __ \\/ / __ `/ __ `__ \\\n")
        .green().out("  / /__/ /_/ / / /_/ / / / / / /\n")
        .green().out("  \\___/\\____/_/\\__, /_/ /_/ /_/ \n")
        .green().out("              /____/            \n\n")
        .reset()
        .out("version  : ").out(version()).out("\n")
        .out("platform : ").out(get_platform()).out(" ").out(get_arch()).out("\n")
        .out("repo     : https://github.com/colgm/colgm\n\n")
        .out("input <").out(executable).out(" -h> to get help.\n\n");
}

pub func report_missing_given_info(info: i8*) {
    io::stderr().red().out("Error:").reset()
                .out(" missing ").out(info).out("\n\n");
    exit(-1 => i32);
}

pub func report_multiple_given_info(info: i8*) {
    io::stderr().red().out("Error:").reset()
                .out(" multiple ").out(info).out(" specified\n\n");
    exit(-1 => i32);
}

pub func report_invalid_given_info(info: i8*, actual: i8*) {
    io::stderr().red().out("Error:").reset()
                .out(" invalid ").out(info)
                .red().out(" <").out(actual).out(">").reset()
                .out("\n\n");
    exit(-1 => i32);
}

pub func report_invalid_argument(arg: i8*) {
    io::stderr().red().out("Error:").reset()
                .out(" invalid argument ")
                .red().out(arg).reset()
                .out(", use ").green().out("--help").reset()
                .out(" for help.\n\n");
    exit(-1 => i32);
}
