use std::io::{ io };
use std::libc::{ exit, streq };
use std::fs::{ fs };

use util::misc::{ get_platform, get_arch, get_target_triple };
use util::clang_finder::{ find_clang };

enum opt_level {
    OPT_LEVEL_0,
    OPT_LEVEL_1,
    OPT_LEVEL_2,
    OPT_LEVEL_3,
    OPT_LEVEL_Z,
    OPT_LEVEL_S
}

pub struct cli_option {
    VIEW_TOKEN: bool,
    VIEW_AST: bool,
    VIEW_SEMA: bool,
    VIEW_SIR: bool,
    VIEW_MIR: bool,
    VIEW_TYPE_REPLACE_INFO: bool,
    VIEW_RESOLVED_AST: bool,
    DEBUG_MODE: bool,
    VERBOSE: bool,
    OPT_LEVEL: opt_level,
    input_file: i8*,
    output_file: i8*,
    library_path: i8*,
    arch: i8*,
    platform: i8*
}

impl cli_option {
    pub func instance() -> cli_option {
        return cli_option {
            VIEW_TOKEN: false,
            VIEW_AST: false,
            VIEW_SEMA: false,
            VIEW_SIR: false,
            VIEW_MIR: false,
            VIEW_TYPE_REPLACE_INFO: false,
            VIEW_RESOLVED_AST: false,
            DEBUG_MODE: false,
            VERBOSE: false,
            OPT_LEVEL: opt_level::OPT_LEVEL_0,
            input_file: nil,
            output_file: nil,
            library_path: nil,
            arch: nil,
            platform: nil
        };
    }

    func check_opt_level(self, level: i8*) {
        if (self->OPT_LEVEL => i64 > 0) {
            report_multiple_given_info("optimization level");
        }
    }

    pub func set_opt_level(self, level: i8*) {
        if (streq(level, "-O0")) {
            self->OPT_LEVEL = opt_level::OPT_LEVEL_0;
        } else if (streq(level, "-O1")) {
            self->check_opt_level(level);
            self->OPT_LEVEL = opt_level::OPT_LEVEL_1;
        } else if (streq(level, "-O2")) {
            self->check_opt_level(level);
            self->OPT_LEVEL = opt_level::OPT_LEVEL_2;
        } else if (streq(level, "-O3")) {
            self->check_opt_level(level);
            self->OPT_LEVEL = opt_level::OPT_LEVEL_3;
        } else if (streq(level, "-Os")) {
            self->check_opt_level(level);
            self->OPT_LEVEL = opt_level::OPT_LEVEL_S;
        } else if (streq(level, "-Oz")) {
            self->check_opt_level(level);
            self->OPT_LEVEL = opt_level::OPT_LEVEL_Z;
        } else {
            report_invalid_given_info("optimization level", level);
        }
    }

    pub func get_opt_level(self) -> i8* {
        match (self->OPT_LEVEL) {
            opt_level::OPT_LEVEL_0 => return "-O0";
            opt_level::OPT_LEVEL_1 => return "-O1";
            opt_level::OPT_LEVEL_2 => return "-O2";
            opt_level::OPT_LEVEL_3 => return "-O3";
            opt_level::OPT_LEVEL_S => return "-Os";
            opt_level::OPT_LEVEL_Z => return "-Oz";
            _ => return "-O0";
        }
        return "-O0";
    }
}

pub func version() -> i8* {
    return "1.0.3";
}

pub func print_version() {
    io::stdout().out("colgm compiler version ").out(version());
    io::stdout().out(" ").out(get_platform()).out(" ").out(get_arch());
    io::stdout().out("\n");
}

pub func help() {
    print_version();
    io::stdout()
    .out("\ncolgm [option]\n")
    .out("option:\n")
    .out("  -h,  --help                 | get help.\n")
    .out("  -v,  --version              | get version.\n")
    .out("\ncolgm [options] <input file>\n")
    .out("option:\n")
    .out("  -g                          | debug mode.\n")
    .out("  -o,  --output <output file> | output executable, default <a.out>.\n")
    .out("  -l,  --lex                  | view analysed tokens.\n")
    .out("  -a,  --ast                  | view ast.\n")
    .out("  -s,  --sema                 | view semantic result.\n")
    .out("       --mir                  | view mir.\n")
    .out("       --sir                  | view sir.\n")
    .out("       --library <directory>  | specify library directory, default <.>.\n")
    .out("       --view-resolved-ast    | view resolved ast.\n")
    .out("       --view-type-replace    | view type replace info.\n")
    .out("       --arch <arch>          | specify target arch.\n")
    .out("       --platform <platform>  | specify target platform.\n")
    .out("  -V,  --verbose              | verbose mode.\n")
    .out("  -O0                         | disable optimizations.\n")
    .out("  -O1                         | enable optimizations.\n")
    .out("  -O2                         | enable optimizations.\n")
    .out("  -O3                         | enable optimizations.\n")
    .out("  -Oz                         | enable optimizations.\n")
    .out("  -Os                         | enable optimizations.\n")
    .endln();
}

pub func logo(executable: i8*) {
    var possible_clang = find_clang();

    io::stdout()
    .out("                __              \n")
    .out("    _________  / //___ _____ _ \n")
    .out("   / ___/ __ \\/ // __ `/ _ `_ \\\n")
    .out("  / /__/ /_/ / // /_/ / // // /\n")
    .out("  \\___/\\____/_//\\__, /_//_//_/ \n")
    .out("  -------------/____/            \n\n")
    .out("version : ").out(version()).out(" (self-host)\n")
    .out("arch    : ").out(get_platform()).out(" ").out(get_arch()).out("\n")
    .out("target  : ").out(get_target_triple()).out("\n")
    .out("repo    : https://github.com/colgm/colgm\n")
    .out("license : Apache 2.0\n");

    if (possible_clang.empty()) {
        io::stdout().out("clang   : no clang found on this machine\n");
    } else {
        io::stdout().out("clang   : ").out(possible_clang.c_str).out("\n");
    }
    possible_clang.delete();

    io::stdout().out("\ninput <").out(executable).out(" -h> to get help.\n\n");
}

pub func report_missing_given_info(info: i8*) {
    io::stderr().red().out("Error:").reset()
                .out(" missing ").out(info).out("\n\n");
    exit(-1);
}

pub func report_multiple_given_info(info: i8*) {
    io::stderr().red().out("Error:").reset()
                .out(" multiple ").out(info).out(" specified\n\n");
    exit(-1);
}

pub func report_invalid_given_info(info: i8*, actual: i8*) {
    io::stderr().red().out("Error:").reset()
                .out(" invalid ").out(info)
                .red().out(" <").out(actual).out(">").reset()
                .out("\n\n");
    exit(-1);
}

pub func report_invalid_argument(arg: i8*) {
    io::stderr().red().out("Error:").reset()
                .out(" invalid argument ")
                .red().out(arg).reset()
                .out(", use ").green().out("--help").reset()
                .out(" for help.\n\n");
    exit(-1);
}
