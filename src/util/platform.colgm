use std::libc::{ streq };
use std::str::{ str };

#[enable_if(target_os = "macos")]
pub extern func sysctlbyname(name: const i8*, oldp: i8*, oldlenp: u64*, newp: i8*, newlen: u64) -> i32;

#[enable_if(target_os = "macos")]
pub func mac_version() -> str {
    var os_temp: [i8; 20] = [];
    var os_temp_len = [20 => u64];
    var res = sysctlbyname("kern.osproductversion", os_temp, os_temp_len, nil, 0);
    if (res != 0) {
        return str::from("");
    }
    return str::from(os_temp);
}

#[enable_if(target_os = "linux")]
pub func mac_version() -> str {
    return str::from("");
}

pub func mac_main_version() -> str {
    var v = mac_version();
    defer v.delete();

    var pos = v.find('.');
    if (pos == str::npos()) {
        return str::from("");
    }

    var res = v.substr(0, pos);
    return res;
}

#[enable_if(target_os = "macos")]
pub func get_platform() -> i8* {
    return "macos";
}

#[enable_if(target_os = "linux")]
pub func get_platform() -> i8* {
    return "linux";
}

#[enable_if(target_os = "windows")]
pub func get_platform() -> i8* {
    return "windows";
}

#[enable_if(arch = "x86_64")]
pub func get_arch() -> i8* {
    return "x86_64";
}

#[enable_if(arch = "aarch64")]
pub func get_arch() -> i8* {
    return "aarch64";
}

pub func is_macos() -> bool {
    return streq(get_platform(), "macos");
}

pub func is_linux() -> bool {
    return streq(get_platform(), "linux");
}

pub func is_windows() -> bool {
    return streq(get_platform(), "windows");
}

pub func get_target_triple() -> i8* {
    var platform = get_platform();
    var arch = get_arch();
    if (streq(platform, "linux") && streq(arch, "x86_64")) {
        return "x86_64-pc-linux-gnu";
    }

    if (streq(platform, "linux") && streq(arch, "aarch64")) {
        return "aarch64-unknown-linux-gnu";
    }

    if (streq(platform, "macos") && streq(arch, "aarch64")) {
        return "arm64-apple-macosx12.0.0";
    }
    return "unknown-unknown-unknown";
}