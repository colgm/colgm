use std::str::{ str };

pub func mangle(name: str*) -> str {
    var pos = name->find('<');

    var prefix = name->copy_instance();
    var suffix = str::from("");
    if (pos != str::npos()) {
        var temp_prefix = name->substr(0, pos);
        var temp_suffix = name->substr(pos, name->size);

        prefix.clear();
        prefix.append_str(temp_prefix.__ptr__());
        suffix.append_str(temp_suffix.__ptr__());

        temp_prefix.delete();
        temp_suffix.delete();
    }

    var res = str::from("");
    for (var i: u64 = 0; i < prefix.size; i += 1) {
        var ch = prefix.get(i);
        if (ch == ':' && i + 1 < prefix.size && prefix.get(i + 1) == ':') {
            res.append_char('.');
            i += 1;
            continue;
        }
        res.append_char(ch);
    }

    if (suffix.size > 0) {
        res.append_str(suffix.__ptr__());
    }

    prefix.delete();
    suffix.delete();
    return res;
}

pub func mangle_struct_name(name: str*) -> str {
    var mangled = mangle(name);
    if (mangled.find('<') != str::npos() || mangled.find(':') != str::npos()) {
        var temp = str::from("%\"struct.");
        temp.append_str(mangled.__ptr__())->append_i8_vec("\"");
        mangled.clear();
        mangled.append_str(temp.__ptr__());
        temp.delete();
    } else {
        var temp = str::from("%struct.");
        temp.append_str(mangled.__ptr__());
        mangled.clear();
        mangled.append_str(temp.__ptr__());
        temp.delete();
    }

    return mangled;
}

func llvm_visible_char(c: i8) -> bool {
    if ('0' <= c && c <= '9') {
        return true;
    }
    if ('a' <= c && c <= 'z') {
        return true;
    }
    if ('A' <= c && c <= 'Z') {
        return true;
    }

    return c=='_' || c==':' || c==' ' || c==',' ||
           c=='[' || c==']' || c=='(' || c==')' ||
           c=='{' || c=='}' || c=='<' || c=='>' ||
           c=='.' || c==';' || c=='-' || c=='+' ||
           c=='*' || c=='/' || c=='~' || c=='?' ||
           c=='!' || c=='=' || c=='&' || c=='|' ||
           c=='%' || c=='^' || c=='@';
}

pub func llvm_raw_string(s: str*) -> str {
    var table = "0123456789abcdef";
    var res = str::from("");
    for (var i: u64 = 0; i < s->size; i += 1) {
        var c = s->get(i);
        if (llvm_visible_char(c)) {
            res.append_char(c);
            continue;
        }

        res.append_char('\\');
        res.append_char(table[c / 16]);
        res.append_char(table[c & 15]);
    }
    res.append_i8_vec("\\00");
    return res;
}