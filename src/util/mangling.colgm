use std::str::{ str };

// get name to be mangled, return the mangled name
// all the "::" in the prefix will be replaced with ".", suffix remains the same
// for example:
//   std::vec::vec<std::str::str>
// will be mangled to
//   std.vec.vec<std::str::str>
pub func mangle(name: str*) -> str {
    var pos = name->find('<');

    var prefix = name->copy_instance();
    var suffix = str::from("");
    defer {
        prefix.delete();
        suffix.delete();
    }

    if (pos != str::npos()) {
        // if get name is std::vec::vec<std::str::str>
        // the prefix will be std::vec::vec
        // the suffix will be <std::str::str>
        var temp_prefix = name->substr(0, pos);
        var temp_suffix = name->substr(pos, name->size);
        defer {
            temp_prefix.delete();
            temp_suffix.delete();
        }

        prefix.clear();
        prefix.append_str(temp_prefix.__ptr__());
        suffix.append_str(temp_suffix.__ptr__());
    }

    // if prefix is std::vec::vec
    // the res will be std.vec.vec
    var res = str::from("");
    for (var i: u64 = 0; i < prefix.size; i += 1) {
        var ch = prefix.get(i);
        if (ch == ':' && i + 1 < prefix.size && prefix.get(i + 1) == ':') {
            res.append_char('.');
            i += 1;
            continue;
        }
        res.append_char(ch);
    }

    // concat suffix
    if (suffix.size > 0) {
        res.append_str(suffix.__ptr__());
    }

    // if get name std::vec::vec<std::str::str>
    // the res will be std.vec.vec<std::str::str>
    return res;
}

// mangle struct name
// for example:
//   std::vec::vec<std::str::str>
// will be mangled to
//   "%struct.std.vec.vec<std::str::str>"
//   ^-------------------~---~~---~~---~^ double quote if special char in name
// another example:
//   std::timestamp::timestamp
// will be mangled to
//   %struct.std.timestamp.timestamp (without double quote)
pub func mangle_struct_name(name: str*) -> str {
    var mangled = mangle(name);
    if (mangled.find('<') != str::npos() || mangled.find(':') != str::npos()) {
        var temp = str::from("%\"struct.");
        temp.append_str(mangled.__ptr__())->append("\"");
        defer temp.delete();

        mangled.clear();
        mangled.append_str(temp.__ptr__());
    } else {
        var temp = str::from("%struct.");
        temp.append_str(mangled.__ptr__());
        defer temp.delete();

        mangled.clear();
        mangled.append_str(temp.__ptr__());
    }
    return mangled;
}

// same as struct name mangling
pub func mangle_tagged_union_name(name: str*) -> str {
    var mangled = mangle(name);
    if (mangled.find('<') != str::npos() || mangled.find(':') != str::npos()) {
        var temp = str::from("%\"tagged_union.");
        temp.append_str(mangled.__ptr__())->append("\"");
        defer temp.delete();

        mangled.clear();
        mangled.append_str(temp.__ptr__());
    } else {
        var temp = str::from("%tagged_union.");
        temp.append_str(mangled.__ptr__());
        defer temp.delete();

        mangled.clear();
        mangled.append_str(temp.__ptr__());
    }
    return mangled;
}

// mangle function name
// for example: std::to_hex -> std.to_hex
// for example: std::generic_func<i32> -> "std.generic_func<i32>"
pub func mangle_function_name(name: str*) -> str {
    var mangled = mangle(name);
    if (mangled.find('<') != str::npos() || mangled.find(':') != str::npos()) {
        var temp = str::from("\"");
        temp.append_str(mangled.__ptr__())->append("\"");
        defer temp.delete();

        mangled.clear();
        mangled.append_str(temp.__ptr__());
    }
    return mangled;
}

// mark llvm visible characters in string literal
func llvm_visible_char(c: i8) -> bool {
    if ('0' <= c && c <= '9') {
        return true;
    }
    if ('a' <= c && c <= 'z') {
        return true;
    }
    if ('A' <= c && c <= 'Z') {
        return true;
    }

    return c=='_' || c==':' || c==' ' || c==',' ||
           c=='[' || c==']' || c=='(' || c==')' ||
           c=='{' || c=='}' || c=='<' || c=='>' ||
           c=='.' || c==';' || c=='-' || c=='+' ||
           c=='*' || c=='/' || c=='~' || c=='?' ||
           c=='!' || c=='=' || c=='&' || c=='|' ||
           c=='%' || c=='^' || c=='@';
}

// convert string to llvm acceptable string
// if character is not llvm visible, convert it to hexadecimal
pub func llvm_raw_string(s: str*) -> str {
    var table = "0123456789abcdef";
    var res = str::from("");
    for (var i: u64 = 0; i < s->size; i += 1) {
        var c = s->get(i);
        if (llvm_visible_char(c)) {
            res.append_char(c);
            continue;
        }

        var c_u32 = c => u32;
        res.append_char('\\');
        res.append_char(table[(c_u32 / 16) & 0xf]);
        res.append_char(table[c_u32 & 0xf]);
    }
    res.append("\\00");
    return res;
}