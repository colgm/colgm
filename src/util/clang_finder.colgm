use std::fs::{ fs };
use std::str::{ str };
use std::vec::{ vec };

use util::platform::{ is_windows };

func supported_clang_version() -> vec<str> {
    var res = vec<str>::instance();
    // always try to find the latest clang version
    // clang-13 ~ clang-20
    // clang++-13 ~ clang++-20
    for (var i = 20; i >= 13; i -= 1) {
        var name = str::from("");
        defer name.delete();

        name.append("clang-").append_i64(i);
        if (is_windows()) {
            // executable on windows has .exe suffix
            name.append(".exe");
        }
        res.push(name);

        name.clear();
        name.append("clang++-").append_i64(i);
        if (is_windows()) {
            // executable on windows has .exe suffix
            name.append(".exe");
        }
        res.push(name);
    }

    // also find default clang and clang++
    var cl = str::from("clang");
    if (is_windows()) {
        // executable on windows has .exe suffix
        cl.append(".exe");
    }
    defer cl.delete();
    res.push(cl);

    var clpp = str::from("clang++");
    if (is_windows()) {
        // executable on windows has .exe suffix
        clpp.append(".exe");
    }
    defer clpp.delete();
    res.push(clpp);
    return res;
}

pub func find_clang() -> str {
    var path = fs::getpath();
    var version = supported_clang_version();
    defer path.delete();
    defer version.delete();

    var res = str::from("");
    foreach (var p; path) {
        foreach (var cl; version) {
            var full_path = p.get().clone();
            defer full_path.delete();

            if (is_windows()) {
                full_path.append("\\").append(cl.get().c_str);
            } else {
                full_path.append("/").append(cl.get().c_str);
            }

            if (fs::exists(full_path.c_str)) {
                res.append_str(full_path);
                break;
            }
        }
        if (!res.empty()) {
            break;
        }
    }
    return res;
}