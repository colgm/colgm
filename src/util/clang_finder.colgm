use std::fs::{ fs };
use std::str::{ str };
use std::vec::{ vec };

func supported_clang_version() -> vec<str> {
    var res = vec<str>::instance();
    // generate strings
    // clang-13 ~ clang-20
    // clang++-13 ~ clang++-20
    for (var i = 20; i >= 13; i -= 1) {
        var name = str::from("");
        defer name.delete();

        name.append("clang-")->append_i64(i);
        res.push(name.__ptr__());

        name.clear();
        name.append("clang++-")->append_i64(i);
        res.push(name.__ptr__());
    }

    // also find default clang and clang++
    var cl = str::from("clang");
    defer cl.delete();

    res.push(cl.__ptr__());
    cl.append("++");
    res.push(cl.__ptr__());
    return res;
}

pub func find_clang() -> str {
    var path = fs::getpath();
    var version = supported_clang_version();
    defer {
        path.delete();
        version.delete();
    }

    var res = str::from("");
    foreach (var p; path) {
        foreach (var cl; version) {
            var full_path = p.get()->copy_instance();
            defer full_path.delete();

            full_path.append("/")->append(cl.get()->c_str);
            if (fs::exists(full_path.c_str)) {
                res.append_str(full_path.__ptr__());
                break;
            }
        }
        if (!res.empty()) {
            break;
        }
    }
    return res;
}