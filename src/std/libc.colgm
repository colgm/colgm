
func malloc(s: u64) -> i8*;
func free(s: i8*);

func open(file: i8*, flags: i32) -> i32;
func read(fd: i32, buf: i8*, nbytes: i64) -> i64;
func write(fd: i32, buf: i8*, count: i64) -> i64;
func close(fd: i32) -> i32;

func puts(s: i8*) -> i32;

func strlen(src: i8*) -> i64;
func strcmp(left: i8*, right: i8*) -> i32;

func streq(left: i8*, right: i8*) -> bool {
    return strcmp(left, right)==i64::i32(0);
}

func print(s: i8*) -> i64 {
    var stdout = i64::i32(1);
    return write(stdout, s, strlen(s));
}

func println(s: i8*) -> i64 {
    var stdout = i64::i32(1);
    var len = write(stdout, s, strlen(s));
    write(stdout, "\n", 1);
    return len + 1;
}

func itoa(num: i64, buf: i8*, base: i64) -> i8* {
    if (base < 2 or base > 16) {
        buf[0] = '\0';
        return buf;
    }
    var i = 0;
    while(num > 0) {
        var tmp_bit = i64::i8(num % base);
        if (tmp_bit < i64::i8(10)) {
            buf[i] = '0' + tmp_bit;
        } else {
            buf[i] = 'a' + tmp_bit - i64::i8(10);
        }
        num /= base;
        i += 1;
    }
    buf[i] = '\0';

    var s_begin = 0;
    var s_end = i;
    var s_mid = (s_begin + s_end) / 2;
    i = 0;
    while(i < s_mid) {
        var tmp = buf[i];
        buf[i] = buf[s_end - i - 1];
        buf[s_end - i - 1] = tmp;
        i += 1;
    }
    return buf;
}
