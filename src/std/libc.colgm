
pub extern func malloc(s: u64) -> i8*;
pub extern func realloc(s: i8*, size: u64) -> i8*;
pub extern func free(s: i8*);
pub extern func memcpy(dst: i8*, src: i8*, size: u64) -> i8*;

// posix open will be adjust to open(i8*, i32, ...) after sir pass
pub extern func open(file: i8*, flags: i32, mode: u32) -> i32;
pub extern func read(fd: i32, buf: i8*, nbytes: i64) -> i64;
pub extern func write(fd: i32, buf: i8*, count: i64) -> i64;
pub extern func close(fd: i32) -> i32;
pub extern func exit(code: i32);

pub extern func stat(filename: i8*, stat_ptr: i8*) -> i32;

pub extern func puts(str: i8*) -> i32;

pub extern func srand(seed: u32);
pub extern func time(t: u64*) -> u64;
pub extern func rand() -> i32;

pub extern func strlen(src: i8*) -> i64;
pub extern func strcmp(left: i8*, right: i8*) -> i32;

pub func streq(left: i8*, right: i8*) -> bool {
    return strcmp(left, right) == 0;
}

pub func itoa(num: i64, buf: i8*, base: i64) -> i8* {
    // invalid base
    if (base < 2 or base > 16) {
        buf[0] = '\0';
        return buf;
    }
    // zero
    if (num == 0) {
        buf[0] = '0';
        buf[1] = '\0';
        return buf;
    }

    var i = 0;
    var flag_is_negative = false;
    if (num < 0) {
        flag_is_negative = true;
        num = -num;
    }
    for (; num > 0; i += 1) {
        var tmp_bit = (num % base) => i8;
        if (tmp_bit < 10) {
            buf[i] = '0' + tmp_bit;
        } else {
            buf[i] = 'a' + tmp_bit - 10;
        }
        num /= base;
    }
    buf[i] = '\0';

    var s_begin = 0;
    var s_end = i;
    var s_mid = (s_begin + s_end) / 2;

    i = 0;
    for (; i < s_mid; i += 1) {
        var tmp = buf[i];
        buf[i] = buf[s_end - i - 1];
        buf[s_end - i - 1] = tmp;
    }

    if (flag_is_negative) {
        i = s_end + 1;
        for (; i > 0; i -= 1) {
            buf[i] = buf[i - 1];
        }
        buf[0] = '-';
    }
    return buf;
}
