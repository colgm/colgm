use std::io::{ flag };
use std::libc::{ open, close, free, stat, getenv, getcwd, strlen };
use std::sys::{ stat_flag, stat_info };

use std::str::{ str };
use std::vec::{ vec };

pub struct fs {}

impl fs {
    pub func exists(file: i8*) -> bool {
        var fd = open(file, flag::O_RDONLY => i32, 0);
        if (fd < 0) {
            return false;
        }
        close(fd);
        return true;
    }

    pub func is_dir(filename: i8*) -> bool {
        var info = stat_info {};
        if (stat(filename, info.__ptr__() => i8*) == -1) {
            return false;
        }
        var ifmt = (info.st_mode => u32) & (stat_flag::S_IFMT => u32);
        return (ifmt => stat_flag) == stat_flag::S_IFDIR;
    }
}

impl fs {
    pub func PATH() -> vec<str> {
        var path = getenv("PATH");
        var path_len = strlen(path);

        var tmp = str::from("");
        var res = vec<str>::instance();

        for (var i = 0; i < path_len; i += 1) {
            if (path[i] == ':') {
                res.push(tmp.__ptr__());
                tmp.clear();
            } else {
                tmp.append_char(path[i]);
            }
        }
        if (tmp.size > 0) {
            res.push(tmp.__ptr__());
        }

        tmp.delete();
        return res;
    }

    pub func CWD() -> str {
        var buffer = [i8; 2048];
        if (getcwd(buffer, 2047) != nil) {
            return str::from(buffer);
        }
        return str::from("");
    }
}