use std::io::{ flag };
use std::libc::{ open, close, getcwd, strlen };
use std::sys::{ timespec, stat_flag, stat_info_t, stat };

use std::str::{ str };
use std::vec::{ vec };
use std::os::{ os };

use util::platform::{ is_windows };

pub struct fs {}

impl fs {
    pub func exists(file: i8*) -> bool {
        var fd = open(file, flag::O_RDONLY => i32, 0);
        if (fd < 0) {
            return false;
        }
        close(fd);
        return true;
    }

    pub func is_dir(filename: i8*) -> bool {
        var info = stat_info_t {};
        if (stat(filename, info.__ptr__()) == -1) {
            return false;
        }
        var ifmt = (info.st_mode => u32) & (stat_flag::S_IFMT => u32);
        return (ifmt => stat_flag) == stat_flag::S_IFDIR;
    }

    pub func get_mtime(filename: i8*) -> timespec {
        var info = stat_info_t {};
        if (stat(filename, info.__ptr__()) == -1) {
            return timespec {};
        }
        return info.st_mtime;
    }
}

impl fs {
    pub func getpath() -> vec<str> {
        var path = os::getenv("PATH");
        var tmp = str::from("");
        defer {
            path.delete();
            tmp.delete();
        }

        var res = vec<str>::instance();

        var separator = ':';
        if (is_windows()) {
            separator = ';';
        }

        foreach (var c; path) {
            if (c.get() == separator) {
                res.push(tmp);
                tmp.clear();
            } else {
                tmp.append_char(c.get());
            }
        }
        if (tmp.size > 0) {
            res.push(tmp);
        }

        return res;
    }

    pub func getcwd() -> str {
        var buffer: [i8; 1024] = [];
        if (getcwd(buffer, 1023) != nil) {
            return str::from(buffer);
        }
        return str::from("");
    }
}