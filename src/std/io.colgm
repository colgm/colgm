use std::libc::{ open, read, write, close, malloc, free, strlen, itoa };
use std::str::str;

pub enum flag {
    O_RDONLY = 0x0000,
    O_WRONLY = 0x0001,
    O_RDWR = 0x0002,
    O_APPEND = 0x0008,
    O_CREAT = 0x0100,
    O_TRUNC = 0x0200,
    O_EXCL = 0x0400,
    O_TEXT = 0x4000,
    O_BINARY= 0x8000
}

pub func readfile_into_string(filename: i8*, dst: str*) -> i64 {
    var fd = open(filename, (flag::O_RDONLY => i32) | (flag::O_BINARY => i32));
    if (fd < 0) {
        return fd => i64;
    }

    var buff = [i8; 1024];
    var readcount = read(fd, buff, 1023);

    for (var index = 0; index < readcount; index += 1) {
        dst->append_char(buff[index]);
    }

    while (readcount!=0) {
        readcount = read(fd, buff, 1023);
        for (var index = 0; index < readcount; index += 1) {
            dst->append_char(buff[index]);
        }
    }

    close(fd);
    return 0;
}

pub struct io {
    fd: i32
}

impl io {
    pub func stdin() -> io {
        return io { fd: 0 };
    }

    pub func stdout() -> io {
        return io { fd: 1 };
    }

    pub func stderr() -> io {
        return io { fd: 2 };
    }

    pub func out(self, info: i8*) -> io {
        // do nothing if is stdin
        if (self->fd == 0) {
            return self[0];
        }
        write(self->fd, info, strlen(info));
        return self[0];
    }

    pub func out_ch(self, info: i8) -> io {
        // do nothing if is stdin
        if (self->fd == 0) {
            return self[0];
        }

        var buff = [i8; 8];
        buff[0] = info;
        write(self->fd, buff, 1);
        return self[0];
    }

    pub func out_i64(self, info: i64) -> io {
        // do nothing if is stdin
        if (self->fd == 0) {
            return self[0];
        }

        var buff = [i8; 256];
        itoa(info, buff, 10);
        write(self->fd, buff, strlen(buff));
        return self[0];
    }

    pub func out_hex(self, info: i64) -> io {
        // do nothing if is stdin
        if (self->fd == 0) {
            return self[0];
        }

        var buff = [i8; 256];
        itoa(info, buff, 16);
        write(self->fd, buff, strlen(buff));
        return self[0];
    }

    pub func endln(self) {
        if (self->fd != 0) {
            write(self->fd, "\n", 1);
        }
    }
}

// ANSI escape sequence color
impl io {
    pub func red(self) -> io {
        self->out("\e[91;1m");
        return self[0];
    }

    pub func green(self) -> io {
        self->out("\e[92;1m");
        return self[0];
    }

    pub func cyan(self) -> io {
        self->out("\e[36;1m");
        return self[0];
    }

    pub func orange(self) -> io {
        self->out("\e[93;1m");
        return self[0];
    }

    pub func white(self) -> io {
        self->out("\e[0m\e[1m");
        return self[0];
    }

    pub func reset(self) -> io {
        self->out("\e[0m");
        return self[0];
    }
}