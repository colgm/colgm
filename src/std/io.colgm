use std::libc::{ open, read, write, close, strlen, itoa, malloc, free };
use std::str::{ str };
use err::panic::{ panic };

#[enable_if(target_os="macos")]
pub enum flag {
    O_RDONLY = 0x0,
    O_WRONLY = 0x1,
    O_RDWR = 0x2,
    O_APPEND = 0x8,
    O_CREAT = 0x200,
    O_TRUNC = 0x400,
    O_EXCL = 0x800
}

#[enable_if(target_os="linux")]
pub enum flag {
    O_RDONLY = 0x0,
    O_WRONLY = 0x1,
    O_RDWR = 0x2,
    O_CREAT = 0x40,
    O_EXCL = 0x80,
    O_TRUNC = 0x200,
    O_APPEND = 0x400
}

#[enable_if(target_os="windows")] // windows mingw-w64
pub enum flag {
    O_RDONLY = 0x0,
    O_WRONLY = 0x1,
    O_RDWR = 0x2,
    O_CREAT = 0x100,
    O_EXCL = 0x400,
    O_TRUNC = 0x200,
    O_APPEND = 0x8,
    O_TEXT = 0x4000,
    O_BINARY = 0x8000
}

pub func readfile_into_string(filename: i8*, dst: str*) -> i64 {
    var fd = open(filename, flag::O_RDONLY => i32, 0);
    if (fd < 0) {
        return fd => i64;
    }

    var buff = [i8; 1024];
    var readcount = read(fd, buff, 1023);

    for (var index = 0; index < readcount; index += 1) {
        dst->append_char(buff[index]);
    }

    while (readcount!=0) {
        readcount = read(fd, buff, 1023);
        for (var index = 0; index < readcount; index += 1) {
            dst->append_char(buff[index]);
        }
    }

    close(fd);
    return 0;
}

pub struct io {
    fd: i32,
    color_out: bool,
    cache: str*
}

impl io {
    pub func stdin() -> io {
        return io { fd: 0, color_out: false, cache: nil };
    }

    pub func stdout() -> io {
        return io { fd: 1, color_out: true, cache: nil };
    }

    pub func stderr() -> io {
        return io { fd: 2, color_out: true, cache: nil };
    }

    pub func disable_color(self) -> io {
        self->color_out = false;
        return self[0];
    }

    func force_flush(self) {
        write(self->fd, self->cache->c_str, self->cache->size => i64);
        self->cache->clear();
    }

    func check_and_flush(self) {
        if (self->cache == nil) {
            return;
        }
        // 8k threshold
        if (self->cache->size < 8192) {
            return;
        }
        self->force_flush();
    }

    pub func out(self, info: i8*) -> io {
        // do nothing if is stdin
        if (self->fd == 0) {
            return self[0];
        }

        if (self->cache == nil) {
            write(self->fd, info, strlen(info));
        } else {
            self->cache->append_i8_vec(info);
            self->check_and_flush();
        }
        return self[0];
    }

    pub func out_ch(self, info: i8) -> io {
        // do nothing if is stdin
        if (self->fd == 0) {
            return self[0];
        }

        if (self->cache == nil) {
            var buff = [i8; 4];
            buff[0] = info;
            write(self->fd, buff, 1);
        } else {
            self->cache->append_char(info);
            self->check_and_flush();
        }
        return self[0];
    }

    pub func out_i64(self, info: i64) -> io {
        // do nothing if is stdin
        if (self->fd == 0) {
            return self[0];
        }

        var buff = [i8; 256];
        itoa(info, buff, 10);
        if (self->cache == nil) {
            write(self->fd, buff, strlen(buff));
        } else {
            self->cache->append_i8_vec(buff);
            self->check_and_flush();
        }
        return self[0];
    }

    pub func out_hex(self, info: i64) -> io {
        // do nothing if is stdin
        if (self->fd == 0) {
            return self[0];
        }

        var buff = [i8; 256];
        itoa(info, buff, 16);
        if (self->cache == nil) {
            write(self->fd, buff, strlen(buff));
        } else {
            self->cache->append_i8_vec(buff);
            self->check_and_flush();
        }
        return self[0];
    }

    pub func endln(self) {
        if (self->fd != 0) {
            if (self->cache == nil) {
                write(self->fd, "\n", 1);
            } else {
                self->cache->append_char('\n');
                self->check_and_flush();
            }
        }
    }
}

// ANSI escape sequence color
impl io {
    pub func red(self) -> io {
        if (!self->color_out) {
            return self[0];
        }
        self->out("\e[91;1m");
        return self[0];
    }

    pub func green(self) -> io {
        if (!self->color_out) {
            return self[0];
        }
        self->out("\e[92;1m");
        return self[0];
    }

    pub func cyan(self) -> io {
        if (!self->color_out) {
            return self[0];
        }
        self->out("\e[36;1m");
        return self[0];
    }

    pub func orange(self) -> io {
        if (!self->color_out) {
            return self[0];
        }
        self->out("\e[93;1m");
        return self[0];
    }

    pub func light_orange(self) -> io {
        if (!self->color_out) {
            return self[0];
        }
        self->out("\e[93m");
        return self[0];
    }

    pub func white(self) -> io {
        if (!self->color_out) {
            return self[0];
        }
        self->out("\e[0m\e[1m");
        return self[0];
    }

    pub func reset(self) -> io {
        if (!self->color_out) {
            return self[0];
        }
        self->out("\e[0m");
        return self[0];
    }
}

impl io {
    func open_append_write_file(file: i8*) -> i32 {
        var flags = flag::O_WRONLY | flag::O_APPEND | flag::O_CREAT;
        var fd = open(file, flags => i32, 0o666); // rw-rw-rw-
        if (fd < 0) {
            panic("failed to open the file in append mode");
        }
        return fd;
    }

    func open_file(file: i8*) -> i32 {
        var flags = flag::O_WRONLY | flag::O_CREAT | flag::O_TRUNC;
        var fd = open(file, flags => i32, 0o666); // rw-rw-rw-
        if (fd < 0) {
            panic("failed to open the file in trunc mode");
        }
        return fd;
    }

    func logger(file: i8*) -> io {
        return io {
            fd: io::open_append_write_file(file),
            color_out: false,
            cache: str::new()
        };
    }

    pub func colgm_report() -> io {
        return io::logger("colgm.report.log");
    }

    pub func fileout(file: i8*) -> io {
        return io {
            fd: io::open_file(file),
            color_out: false,
            cache: str::new()
        };
    }

    pub func close(self) {
        if (self->fd <= 0 || self->fd == 1 || self->fd == 2) {
            return;
        }
        if (self->cache != nil) {
            self->force_flush();
            self->cache->delete();
            free(self->cache => i8*);
            self->cache = nil;
        }
        close(self->fd);
    }
}