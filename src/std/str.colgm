use std::libc::{ malloc, realloc, free, memcpy, strlen, streq, exit, write };

struct str {
    c_str: i8*,
    size: u64,
    capacity: u64
}

impl str {
    func new() -> str* {
        var res = str::__alloc__();
        res->c_str = nil;
        res->init();
        return res;
    }

    func init(self: str*) {
        self->c_str = malloc(256 => u64);
        self->c_str[0] = '\0';

        self->size = 0 => u64;
        self->capacity = 256 => u64;
        return;
    }

    func copy_new(self: str*) -> str* {
        var new_str = str::__alloc__();
        new_str->c_str = malloc(self->capacity);
        new_str->size = self->size;
        new_str->capacity = self->capacity;

        memcpy(new_str->c_str, self->c_str, self->size);
        new_str->c_str[self->size] = '\0';

        return new_str;
    }

    func delete(self: str*) {
        free(self->c_str);
        
        self->c_str = nil;
        self->size = 0 => u64;
        self->capacity = 0 => u64;

        return;
    }
}

impl str {
    func empty(self: str*) -> bool {
        return self->size == (0 => u64);
    }

    func clear(self: str*) {
        self->c_str[0] = '\0';
        self->size = 0 => u64;
        return;
    }
}

impl str {
    func copy_const(self: str*, src: i8*) {
        var len = strlen(src) => u64;

        # re-allocate memory
        if (len >= self->size) {
            free(self->c_str);
            self->c_str = malloc(len + (1 => u64));
            self->size = len + 1 => u64;
            self->capacity = len + 1 => u64;
        }

        memcpy(self->c_str, src, len);
        self->c_str[len] = '\0';
        self->size = len;

        return;
    }

    func expend_capacity(self: str*) {
        self->capacity *= 2 => u64;
        self->c_str = realloc(self->c_str, self->capacity);
        return;
    }

    func append_char(self: str*, ch: i8) -> str* {
        if (self->size == self->capacity) {
            self->expend_capacity();
        }

        self->c_str[self->size] = ch;
        self->c_str[self->size + (1 => u64)] = '\0';
        self->size += 1 => u64;
        return self;
    }

    func append_str(self: str*, src: i8*) -> str* {
        var len = strlen(src);
        var index = 0;
        while (index < len) {
            self->append_char(src[index]);
            index += 1;
        }
        return self;
    }
}

impl str {
    func get(self: str*, index: u64) -> i8 {
        if (index >= self->size) {
            var report_info = "std::str::get: index out of range\n\n";
            write(2 => i32, report_info, strlen(report_info));
            exit(-1 => i32);
        }
        return self->c_str[index];
    }

    func eq_const(self: str*, src: i8*) -> bool {
        return streq(self->c_str, src);
    }
}