use std::libc::{ malloc, free, memcpy, strlen };

struct str {
    c_str: i8*,
    size: u64
}

impl str {
    func new() -> str* {
        var res = str::__alloc__();
        res->c_str = malloc(i64::u64(128));
        res->size = i64::u64(0);
        res->c_str[0] = i64::i8(0);
        return res;
    }

    func copy(self: str*) -> str* {
        var new_str = str::new();
        new_str->size = self->size;
        new_str->c_str = malloc(self->size);
        var i = i64::u64(0);
        while (i<self->size) {
            new_str->c_str[i] = self->c_str[i];
        }
        return new_str;
    }

    func delete(self: str*) {
        free(self->c_str);
        # free(self); # does not support pointer conversion
        return;
    }

    func empty(self: str*) -> bool {
        if (self->size == i64::u64(0)) {
            return true;
        }
        return false;
    }

    func copy_const(self: str*, src: i8*) {
        var len = i64::u64(strlen(src));
        if (len >= self->size) {
            free(self->c_str);
            self->c_str = malloc(len + i64::u64(1));
            self->size = len + i64::u64(1);
        }
        memcpy(self->c_str, src, len);
        return;
    }
}