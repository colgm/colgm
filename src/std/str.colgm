use std::libc::{ malloc, realloc, free, memcpy, strlen, streq, exit, write };
use err::panic::{ panic };

pub struct str {
    c_str: i8*,
    size: u64,
    capacity: u64
}

impl str {
    pub func new() -> str* {
        var res = str::__alloc__();
        if (res == nil) {
            panic("str::new: failed to allocate memory");
        }
        res->c_str = nil;
        res->init();
        return res;
    }

    pub func instance() -> str {
        var res = str {};
        res.init();
        return res;
    }

    pub func from(src: i8*) -> str {
        if (src == nil) {
            panic("str::from: cannot create string from nil");
        }
        var res = str::instance();
        res.append_i8_vec(src);
        return res;
    }

    pub func init(self) {
        self->c_str = malloc(16);
        self->c_str[0] = '\0';

        self->size = 0;
        self->capacity = 16;
    }

    pub func copy(self) -> str* {
        var new_str_ptr = str::new();
        new_str_ptr->append_str(self);
        return new_str_ptr;
    }

    pub func copy_instance(self) -> str {
        var new_str = str {
            c_str: malloc(self->capacity),
            size: self->size,
            capacity: self->capacity
        };

        memcpy(new_str.c_str, self->c_str, self->size);
        new_str.c_str[self->size] = '\0';

        return new_str;
    }

    pub func delete(self) {
        free(self->c_str);
        
        self->c_str = nil;
        self->size = 0;
        self->capacity = 0;
    }
}

impl str {
    pub func empty(self) -> bool {
        return self->size == 0;
    }

    pub func clear(self) {
        self->c_str[0] = '\0';
        self->size = 0;
    }
}

impl str {
    pub func copy_const(self, src: i8*) {
        // do nothing if src in null pointer
        if (src == nil) {
            return;
        }

        var len = strlen(src) => u64;

        // re-allocate memory
        if (len >= self->size) {
            free(self->c_str);
            self->c_str = malloc(len + 1);
            self->size = len + 1;
            self->capacity = len + 1;
        }

        memcpy(self->c_str, src, len);
        self->c_str[len] = '\0';
        self->size = len;
    }

    func expand_capacity(self) {
        self->capacity *= 2;
        self->c_str = realloc(self->c_str, self->capacity);
    }

    pub func append_char(self, ch: i8) -> str* {
        // self->size == self->capacity will cause memory out of bounds error
        // but only crashes on macOS aarch64
        // crash happens in this case:
        //
        // | str 1 capacity 8 | str 2 capacity 8 |
        //                   -^- continuous allocated memory block
        // |  str 1 |  str 2 |
        // |+++++++0|        |
        //         ^ size = 7 (real 8), capacity = 8
        //
        // if expands when size + 1 == capacity
        // |  str 1         |  str 2 |
        // |++++++++0       |        |
        //          ^ size = 8 (real 9), capacity = 16
        //
        // if not
        // |  str 1 |  str 2 |
        // |++++++++0        |
        //          ^ size = 8 (real 9), capacity = 8
        //          ^ this breaks the memory block of str2
        //
        // so after str2 is freed, the memory block head is still broken
        // and then we use malloc to allocate this memory block again
        // and free again, the memory block will cause
        // "free(): invalid pointer"
        // "malloc: *** error for object 0x.....: pointer being freed was not allocated"
        //
        // that's wired T^T
        if (self->size + 1 == self->capacity) {
            self->expand_capacity();
        }

        self->c_str[self->size] = ch;
        self->c_str[self->size + 1] = '\0';
        self->size += 1;
        return self;
    }

    pub func append_str(self, src: str*) -> str* {
        var len = src->size => i64;
        for (var index = 0; index < len; index += 1) {
            self->append_char(src->c_str[index]);
        }
        return self;
    }

    pub func append_i8_vec(self, src: i8*) -> str* {
        // do nothing if src is null pointer
        if (src == nil) {
            return self;
        }
        var len = strlen(src);
        for (var index = 0; index < len; index += 1) {
            self->append_char(src[index]);
        }
        return self;
    }

    pub func pop_back(self) {
        if (self->size == 0) {
            return;
        }

        self->size -= 1;
        self->c_str[self->size] = '\0';
    }

    pub func back(self) -> i8 {
        if (self->size == 0) {
            panic("str::back: empty string");
        }
        return self->c_str[self->size - 1];
    }

    pub func ends_with(self, ch: i8) -> bool {
        if (self->size == 0) {
            return false;
        }
        return self->back() == ch;
    }
}

impl str {
    pub func get(self, index: u64) -> i8 {
        if (index >= self->size) {
            panic("str::get: index out of range");
        }
        return self->c_str[index];
    }

    pub func find(self, ch: i8) -> u64 {
        for (var i: u64 = 0; i < self->size; i += 1) {
            if (self->c_str[i] == ch) {
                return i;
            }
        }
        return str::npos();
    }

    pub func npos() -> u64 {
        return 0xffffffffffffffff;
    }

    pub func eq_const(self, src: i8*) -> bool {
        return streq(self->c_str, src);
    }

    pub func eq_str(self, src: str) -> bool {
        return streq(self->c_str, src.c_str);
    }

    pub func eq(self, src: str*) -> bool {
        return streq(self->c_str, src->c_str);
    }

    pub func contains(self, ch: i8) -> bool {
        for (var i: u64 = 0; i < self->size; i += 1) {
            if (self->c_str[i] == ch) {
                return true;
            }
        }
        return false;
    }
}

impl str {
    pub func hash(self) -> u64 {
        var hash: u64 = 5381;
        for (var i: u64 = 0; i < self->size; i += 1) {
            hash *= 31;
            hash += self->c_str[i] => u64;
        }
        return hash;
    }
}