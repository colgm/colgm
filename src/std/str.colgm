use std::libc::{
    malloc, realloc, free,
    memcpy, memcmp,
    strlen, streq, itoa, utoa, gcvt
};
use std::panic::{ panic };

pub struct str {
    c_str: i8*,
    size: u64,
    capacity: u64
}

impl str {
    pub func new() -> str* {
        var res = str::__alloc__();
        if (res == nil) {
            panic("failed to allocate memory");
        }
        res->c_str = nil;
        res->init();
        return res;
    }

    pub func instance() -> str {
        var res = str {};
        res.init();
        return res;
    }

    func init(self) {
        self.c_str = malloc(8);
        self.c_str[0] = '\0';

        self.size = 0;
        self.capacity = 8;
    }

    pub func clone(self) -> str {
        var new_str = str {
            c_str: malloc(self.capacity),
            size: self.size,
            capacity: self.capacity
        };

        memcpy(new_str.c_str, self.c_str, self.size);
        new_str.c_str[self.size] = '\0';

        return new_str;
    }

    pub func delete(self) {
        free(self.c_str);
        
        self.c_str = nil;
        self.size = 0;
        self.capacity = 0;
    }
}

impl str {
    pub func from(src: i8*) -> str {
        if (src == nil) {
            panic("cannot create string from nil");
        }
        var res = str::instance();
        res.append(src);
        return res;
    }

    pub func from_i64(src: i64) -> str {
        var res = str::instance();
        var buffer: [i8; 128] = [];
        itoa(src, buffer, 10);
        res.append(buffer);
        return res;
    }

    pub func from_u64(src: u64) -> str {
        var res = str::instance();
        var buffer: [i8; 128] = [];
        utoa(src, buffer, 10);
        res.append(buffer);
        return res;
    }

    pub func from_f64(src: f64) -> str {
        var res = str::instance();
        var buffer: [i8; 256] = [];
        gcvt(src, 10, buffer);
        res.append(buffer);
        return res;
    }
}

impl str {
    pub func empty(self) -> bool {
        return self.size == 0;
    }

    pub func clear(self) {
        self.c_str[0] = '\0';
        self.size = 0;
    }
}

impl str {
    pub func copy_const(self, src: i8*) {
        // do nothing if src in null pointer
        if (src == nil) {
            return;
        }

        var len = strlen(src) => u64;

        // re-allocate memory
        if (len >= self.size) {
            free(self.c_str);
            self.c_str = malloc(len + 1);
            self.size = len + 1;
            self.capacity = len + 1;
        }

        memcpy(self.c_str, src, len);
        self.c_str[len] = '\0';
        self.size = len;
    }

    func expand_capacity(self) {
        self.capacity *= 2;
        self.c_str = realloc(self.c_str, self.capacity);
    }

    pub func append_char(self, ch: i8) -> str& {
        // self.size == self.capacity will cause memory out of bounds error
        // but only crashes on macOS aarch64
        // crash happens in this case:
        //
        // | str 1 capacity 8 | str 2 capacity 8 |
        //                   -^- continuous allocated memory block
        // |  str 1 |  str 2 |
        // |+++++++0|        |
        //         ^ size = 7 (real 8), capacity = 8
        //
        // if expands when size + 1 == capacity
        // |  str 1         |  str 2 |
        // |++++++++0       |        |
        //          ^ size = 8 (real 9), capacity = 16
        //
        // if not
        // |  str 1 |  str 2 |
        // |++++++++0        |
        //          ^ size = 8 (real 9), capacity = 8
        //          ^ this breaks the memory block of str2
        //
        // so after str2 is freed, the memory block head is still broken
        // and then we use malloc to allocate this memory block again
        // and free again, the memory block will cause
        // "free(): invalid pointer"
        // "malloc: *** error for object 0x.....: pointer being freed was not allocated"
        //
        // that's wired T^T
        if (self.size + 1 == self.capacity) {
            self.expand_capacity();
        }

        self.c_str[self.size] = ch;
        self.c_str[self.size + 1] = '\0';
        self.size += 1;
        return self;
    }

    pub func append_str(self, src: str&) -> str& {
        var len = src.size;
        while (self.size + len >= self.capacity) {
            self.expand_capacity();
        }
        memcpy((self.c_str => u64 + self.size) => i8*, src.c_str, len);
        self.c_str[self.size + len] = '\0';
        self.size += len;
        return self;
    }

    pub func append(self, src: i8*) -> str& {
        // do nothing if src is null pointer
        if (src == nil) {
            return self;
        }
        var len = strlen(src) => u64;
        while (self.size + len >= self.capacity) {
            self.expand_capacity();
        }
        memcpy((self.c_str => u64 + self.size) => i8*, src, len);
        self.c_str[self.size + len] = '\0';
        self.size += len;
        return self;
    }

    pub func append_i64(self, num: i64) -> str& {
        var buffer: [i8; 128] = [];
        itoa(num, buffer, 10);
        self.append(buffer);
        return self;
    }

    pub func append_u64(self, num: u64) -> str& {
        var buffer: [i8; 128] = [];
        utoa(num, buffer, 10);
        self.append(buffer);
        return self;
    }

    pub func append_f64(self, num: f64) -> str& {
        var buffer: [i8; 256] = [];
        gcvt(num, 10, buffer);
        self.append(buffer);
        return self;
    }

    pub func pop_back(self) {
        if (self.size == 0) {
            return;
        }

        self.size -= 1;
        self.c_str[self.size] = '\0';
    }

    pub func front(self) -> i8 {
        if (self.size == 0) {
            panic("empty string");
        }
        return self.c_str[0];
    }

    pub func back(self) -> i8 {
        if (self.size == 0) {
            panic("empty string");
        }
        return self.c_str[self.size - 1];
    }

    pub func startswith(self, src: i8*) -> bool {
        if (src == nil) {
            return false;
        }
        var len = strlen(src) => u64;
        if (self.size < len) {
            return false;
        }

        return memcmp(self.c_str, src, len) == 0;
    }

    pub func endswith(self, src: i8*) -> bool {
        if (src == nil) {
            return false;
        }
        var len = strlen(src) => u64;
        if (self.size < len) {
            return false;
        }
        var addr = (self.c_str => u64 + self.size - len) => i8*;
        return memcmp(addr, src, len) == 0;
    }
}

impl str {
    pub func get(self, index: u64) -> i8 {
        if (index >= self.size) {
            panic("index out of range");
        }
        return self.c_str[index];
    }

    pub func substr(self, start: u64, end: u64) -> str {
        var res = str::instance();
        for (var i: u64 = start; i < end; i += 1) {
            res.append_char(self.c_str[i]);
        }
        return res;
    }

    pub func substr_from(self, start: u64) -> str {
        return self.substr(start, self.size);
    }

    pub func find(self, ch: i8) -> u64 {
        for (var i: u64 = 0; i < self.size; i += 1) {
            if (self.c_str[i] == ch) {
                return i;
            }
        }
        return str::npos();
    }

    pub func find_i8_vec(self, src: i8*) -> u64 {
        for (var i: u64 = 0; i < self.size; i += 1) {
            var addr = (i + self.c_str => u64) => i8*;
            if (memcmp(addr, src, strlen(src) => u64) == 0) {
                return i;
            }
        }
        return str::npos();
    }

    pub func contains(self, ch: i8) -> bool {
        return self.find(ch) != str::npos();
    }

    pub func npos() -> u64 {
        return 0xffffffffffffffff;
    }

    pub func eq_const(self, src: i8*) -> bool {
        return streq(self.c_str, src);
    }

    pub func eq_str(self, src: str) -> bool {
        return streq(self.c_str, src.c_str);
    }

    pub func eq(self, src: str*) -> bool {
        return streq(self.c_str, src->c_str);
    }
}

impl str {
    pub func hash(self) -> u64 {
        var hash: u64 = 5381;

        // 8 bytes at a time
        var u64_ptr = self.c_str => u64*;
        var u64_str_size = self.size / 8;
        for (var i: u64 = 0; i < u64_str_size; i += 1) {
            hash *= 33;
            hash ^= u64_ptr[i];
        }

        // left characters should be hashed too
        var left_chars_begin: u64 = 0;
        if (u64_str_size != 0) {
            left_chars_begin = u64_str_size * 8;
        }
        for (var i: u64 = left_chars_begin; i < self.size; i += 1) {
            hash *= 33;
            hash ^= self.c_str[i] => u64;
        }
        return hash;
    }

    pub func iter(self) -> str_iterator {
        return str_iterator {
            __src: self.__ptr__(),
            __pos: 0
        };
    }
}

struct str_iterator {
    __src: str*,
    __pos: u64
}

impl str_iterator {
    pub func is_end(self) -> bool {
        return self.__pos >= self.__src->size;
    }

    pub func next(self) -> str_iterator {
        return str_iterator {
            __src: self.__src,
            __pos: self.__pos + 1
        };
    }

    pub func get(self) -> i8 {
        if (self.is_end()) {
            panic("iterator out of range");
        }
        return self.__src->c_str[self.__pos];
    }

    pub func index(self) -> u64 {
        return self.__pos;
    }
}