use std::str::{ str };
use std::sys::{ timespec };
use std::panic::{ panic };

enum clockid_t {
    CLOCK_REALTIME = 0
}

// maybe unused, only used on 32 bit platforms
struct __time32_t { data: i32 }

// used on 64 bit platforms
pub struct time_t {
    data: i64
}

impl time_t {
    pub func to_u32(self) -> u32 {
        return self.data => u32;
    }
}

struct tm {
    tm_sec: i32,
    tm_min: i32,
    tm_hour: i32,
    tm_mday: i32,
    tm_mon: i32,
    tm_year: i32,
    tm_wday: i32,
    tm_yday: i32,
    tm_isdst: i32
}

pub extern func time(t: time_t*) -> time_t;
pub extern func localtime(t: time_t*) -> tm*;
pub extern func strftime(s: i8*, max: i64, format: const i8*, tm: tm*);
pub extern func difftime(t1: time_t, t2: time_t) -> f64;

#[enable_if(target_os = "linux")]
pub extern func clock_gettime(clock_id: i32, tp: timespec*) -> i32;
#[enable_if(target_os = "macos")]
pub extern func clock_gettime(clock_id: i32, tp: timespec*) -> i32;

#[enable_if(target_os = "windows")]
pub extern func QueryPerformanceFrequency(freq: i64*) -> bool;
#[enable_if(target_os = "windows")]
pub extern func QueryPerformanceCounter(cnt: i64*) -> bool;
#[enable_if(target_os = "windows")]
pub func clock_gettime(clock_id: i32, tp: timespec*) -> i32 {
    if (clock_id != clockid_t::CLOCK_REALTIME => i32) {
        return -1;
    }
    var freq = 0;
    var counter = 0;
    if (!QueryPerformanceFrequency(freq.__ptr__())) {
        return -1;
    }
    if (!QueryPerformanceCounter(counter.__ptr__())) {
        return -1;
    }
    
    tp->tv_sec = counter / freq;
    tp->tv_nsec = ((counter % freq) * 1000000000 / freq) => i32;

    return clock_id;
}

pub struct chrono {}

impl chrono {
    pub func timestamp() -> time_t {
        var current_time = time_t {};
        time(current_time.__ptr__());
        return current_time;
    }

    pub func localtime() -> str {
        var current_time = chrono::timestamp();
        var timeinfo = localtime(current_time.__ptr__());
        var buffer: [i8; 128] = [];
        strftime(buffer, 127, "%Y-%m-%d %H:%M:%S", timeinfo);
        return str::from(buffer);
    }

    pub func high_resolution_time() -> timespec {
        var tp = timespec {};
        if (clock_gettime(clockid_t::CLOCK_REALTIME => i32, tp.__ptr__()) == -1) {
            panic("clock_gettime failed");
        }
        return tp;
    }

    pub func duraction_ns(start: timespec, end: timespec) -> f64 {
        var sec = end.tv_sec - start.tv_sec;
        var nsec = end.tv_nsec - start.tv_nsec;
        if (nsec < 0) {
            sec -= 1;
            nsec += 1000000000;
        }

        return (sec => f64) * 1000000000.0 + nsec => f64;
    }

    pub func duraction_us(start: timespec, end: timespec) -> f64 {
        return chrono::duraction_ns(start, end) / 1000.0;
    }

    pub func duraction_ms(start: timespec, end: timespec) -> f64 {
        return chrono::duraction_us(start, end) / 1000.0;
    }

    pub func duraction_s(start: timespec, end: timespec) -> f64 {
        return chrono::duraction_ms(start, end) / 1000.0;
    }
}