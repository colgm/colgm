use std::libc::{ free };

use err::panic::{ panic };

struct node<T> {
    elem: T,
    next: node<T>*,
    prev: node<T>*
}

pub struct list<T> {
    head: node<T>*,
    tail: node<T>*,
    size: u64
}

pub struct list_iter<T> {
    list: list<T>*,
    current: node<T>*
}

pub struct primitive_list<T> {
    head: node<T>*,
    tail: node<T>*,
    size: u64
}

impl list_iter<T> {
    func instance(list: list<T>*) -> list_iter<T> {
        return list_iter<T> {
            list: list,
            current: list->head
        };
    }

    pub func is_end(self) -> bool {
        return self->current == nil;
    }

    pub func elem(self) -> T* {
        return self->current->elem.__ptr__();
    }

    pub func next(self) -> list_iter<T> {
        return list_iter<T> {
            list: self->list,
            current: self->current->next
        };
    }
}

impl list<T> {
    pub func new() -> list<T>* {
        var res = list<T>::__alloc__();
        if (res == nil) {
            panic("failed to allocate memory");
        }
        res->head = nil;
        res->tail = nil;
        res->size = 0;
        return res;
    }

    pub func instance() -> list<T> {
        return list<T> {
            head: nil,
            tail: nil,
            size: 0
        };
    }

    pub func delete(self) {
        var curr = self->head;
        while (curr != nil) {
            var next = curr->next;
            curr->elem.delete();
            free(curr => i8*);
            curr = next;
        }
        self->head = nil;
        self->tail = nil;
        self->size = 0;
    }

    pub func clear(self) {
        self->delete();
    }

    pub func empty(self) -> bool {
        return self->size == 0;
    }

    pub func insert(self, elem: T*) {
        var new_node = node<T>::__alloc__();
        if (new_node == nil) {
            panic("failed to allocate memory");
        }
        new_node->elem = elem->copy_instance();
        new_node->next = nil;
        new_node->prev = self->tail;

        if (self->tail != nil) {
            self->tail->next = new_node;
        } else {
            self->head = new_node;
        }

        self->tail = new_node;
        self->size += 1;
    }

    pub func push_back(self, elem: T*) {
        self->insert(elem);
    }

    pub func pop_front(self) {
        if (self->head == nil) {
            return;
        }

        if (self->head == self->tail) {
            self->head->elem.delete();
            free(self->head => i8*);
            self->head = nil;
            self->tail = nil;
        } else {
            var next = self->head->next;
            self->head->elem.delete();
            free(self->head => i8*);
            next->prev = nil;
            self->head = next;
        }

        self->size -= 1;
    }

    pub func front(self) -> T* {
        if (self->head == nil) {
            panic("list is empty");
        }
        return self->head->elem.__ptr__();
    }

    pub func iter(self) -> list_iter<T> {
        return list_iter<T>::instance(self);
    }
}

impl primitive_list<T> {
    pub func new() -> primitive_list<T>* {
        var res = primitive_list<T>::__alloc__();
        if (res == nil) {
            panic("failed to allocate memory");
        }
        res->head = nil;
        res->tail = nil;
        res->size = 0;
        return res;
    }

    pub func instance() -> primitive_list<T> {
        return primitive_list<T> {
            head: nil,
            tail: nil,
            size: 0
        };
    }

    pub func delete(self) {
        var curr = self->head;
        while (curr != nil) {
            var next = curr->next;
            free(curr => i8*);
            curr = next;
        }
        self->head = nil;
        self->tail = nil;
        self->size = 0;
    }

    pub func empty(self) -> bool {
        return self->size == 0;
    }

    pub func insert(self, elem: T) {
        var new_node = node<T>::__alloc__();
        if (new_node == nil) {
            panic("failed to allocate memory");
        }
        new_node->elem = elem;
        new_node->next = nil;
        new_node->prev = self->tail;

        if (self->tail != nil) {
            self->tail->next = new_node;
        } else {
            self->head = new_node;
        }

        self->tail = new_node;
        self->size += 1;
        return;
    }

    pub func push_back(self, elem: T) {
        self->insert(elem);
    }

    pub func pop_front(self) {
        if (self->head == nil) {
            return;
        }

        if (self->head == self->tail) {
            free(self->head => i8*);
            self->head = nil;
            self->tail = nil;
        } else {
            var next = self->head->next;
            free(self->head => i8*);
            self->head = next;
            next->prev = nil;
        }
    }

    pub func front(self) -> T {
        if (self->head == nil) {
            panic("list is empty");
        }
        return self->head->elem;
    }
}