use std::list::{ list, primitive_list };

pub struct queue<T> {
    _elem: list<T>
}

impl queue<T> {
    pub func instance() -> queue<T> {
        return queue<T> { _elem: list<T>::instance() };
    }

    pub func delete(self) {
        self->_elem.delete();
    }

    pub func push(self, elem: T*) {
        self->_elem.push_back(elem);
    }

    pub func pop(self) {
        self->_elem.pop_front();
    }

    pub func empty(self) -> bool {
        return self->_elem.empty();
    }
}

pub struct primitive_queue<T> {
    _elem: primitive_list<T>
}

impl primitive_queue<T> {
    pub func instance() -> primitive_queue<T> {
        return primitive_queue<T> { _elem: primitive_list<T>::instance() };
    }

    pub func delete(self) {
        self->_elem.delete();
    }

    pub func push(self, elem: T) {
        self._elem.push_back(elem);
    }

    pub func pop(self) {
        self._elem.pop_front();
    }

    pub func empty(self) -> bool {
        return self->_elem.empty();
    }
}