use std::list::{ list };

pub struct queue<T> {
    _elem: list<T>
}

impl queue<T> {
    pub func instance() -> queue<T> {
        return queue<T> { _elem: list<T>::instance() };
    }

    pub func delete(self) {
        self._elem.delete();
    }

    #[is_trivial(T)]
    pub func push(self, elem: T) {
        self._elem.push_back(elem);
    }

    #[is_non_trivial(T)]
    pub func push(self, elem: T&) {
        self._elem.push_back(elem);
    }

    pub func pop(self) {
        self._elem.pop_front();
    }

    #[is_trivial(T)]
    pub func front(self) -> T {
        return self._elem.front();
    }

    #[is_non_trivial(T)]
    pub func front(self) -> T& {
        return self._elem.front();
    }

    pub func empty(self) -> bool {
        return self._elem.empty();
    }
}
