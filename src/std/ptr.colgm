use err::panic::{ panic };

pub struct ptr<T> {
    data: T*
}

impl ptr<T> {
    pub func wrap(p: T*) -> ptr<T> {
        return ptr<T>{ data: p };
    }

    pub func get(self) -> T* {
        return self->data;
    }
}

// basic can only used with primitive types or pointer types
pub struct basic<T> {
    data: T
}

impl basic<T> {
    // do nothing, if T is pointer type, you should free it manually
    pub func delete(self) {}

    // shallow copy
    pub func copy(self) -> basic<T>* {
        var res = basic<T>::__alloc__();
        if (res == nil) {
            panic("basic<T>::copy: failed to allocate memory");
        }
        res->data = self->data;
        return res;
    }

    pub func wrap(v: T) -> basic<T> {
        return basic<T>{ data: v };
    }

    pub func get(self) -> T {
        return self->data;
    }
}

pub func ptr_size() -> u64 {
    return ptr<i8>::__size__();
}
