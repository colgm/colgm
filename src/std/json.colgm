use std::io::{ io };
use std::str::{ str };
use std::vec::{ vec };
use std::map::{ hashmap };
use std::libc::{ free };
use std::string_utils::{ is_alpha_letter, is_digit };
use std::panic::{ panic };

use util::to_num::{ to_f64 };

pub enum json_kind {
    json_object,
    json_array,
    json_string,
    json_number,
    json_bool,
    json_null,
    json_error
}

pub union(json_kind) json {
    json_object: hashmap<str, json*>,
    json_array: vec<json*>,
    json_string: str,
    json_number: f64,
    json_bool: bool,
    json_null: i8,
    json_error: str
}

impl json {
    pub func delete(self) {
        match (self) {
            json_kind::json_object => {
                foreach (var i; self.json_object) {
                    i.value()->delete();
                    free(i.value() => i8*);
                }
                self.json_object.delete();
            }
            json_kind::json_array => {
                foreach (var i; self.json_array) {
                    i.get()->delete();
                    free(i.get() => i8*);
                }
                self.json_array.delete();
            }
            json_kind::json_string => {
                self.json_string.delete();
            }
            json_kind::json_error => {
                self.json_error.delete();
            }
            _ => {}
        }
    }
}

impl json {
    pub func obj() -> json* {
        var res = json::__alloc__();
        res[0] = json { json_object: hashmap<str, json*>::instance() };
        return res;
    }

    pub func arr() -> json* {
        var res = json::__alloc__();
        res[0] = json { json_array: vec<json*>::instance() };
        return res;
    }

    pub func str(s: const i8*) -> json* {
        var res = json::__alloc__();
        res[0] = json { json_string: str::from(s) };
        return res;
    }

    pub func num(n: f64) -> json* {
        var res = json::__alloc__();
        res[0] = json { json_number: n };
        return res;
    }

    pub func bool(flag: bool) -> json* {
        var res = json::__alloc__();
        res[0] = json { json_bool: flag };
        return res;
    }

    pub func null() -> json* {
        var res = json::__alloc__();
        res[0] = json { json_null: 0 };
        return res;
    }

    pub func error(s: const i8*) -> json* {
        var res = json::__alloc__();
        res[0] = json { json_error: str::from(s) };
        return res;
    }

    pub func is_invalid(self) -> bool {
        match (self) {
            json_kind::json_error => return true;
            _ => return false;
        }
        return false;
    }

    pub func get_error(self) -> str* {
        match (self) {
            json_kind::json_error => return self.json_error.__ptr__();
            _ => return nil;
        }
        return nil;
    }
}

impl json {
    func add_indent(self, target: str*, indent: i32) {
        for (var i: i32 = 0; i < indent; i += 1) {
            target->append_char(' ');
        }
    }

    func to_string_core(self, current_indent: i32, indent_level: i32) -> str {
        match (self) {
            json_kind::json_object => {
                if (self.json_object.empty()) {
                    return str::from("{}");
                }

                var res = str::from("{");
                foreach (var i; self.json_object) {
                    if (!res.eq_const("{")) {
                        res.append(",");
                        if (indent_level == 0) {
                            res.append_char(' ');
                        }
                    }
                    if (indent_level != 0) {
                        res.append_char('\n');
                        self.add_indent(res.__ptr__(), current_indent);
                    }
                    res.append("\"");
                    res.append(i.key().c_str);
                    res.append("\": ");
                    if (indent_level == 0) {
                        var temp = i.value()->to_string_core(0, 0);
                        defer temp.delete();
                        res.append(temp.c_str);
                    } else {
                        var temp = i.value()->to_string_core(
                            current_indent + indent_level,
                            indent_level
                        );
                        defer temp.delete();
                        res.append(temp.c_str);
                    }
                }
                if (indent_level != 0) {
                    res.append_char('\n');
                    self.add_indent(res.__ptr__(), current_indent - indent_level);
                }
                res.append("}");
                return res;
            }
            json_kind::json_array => {
                if (self.json_array.empty()) {
                    return str::from("[]");
                }

                var res = str::from("[");
                foreach (var i; self.json_array) {
                    if (!res.eq_const("[")) {
                        res.append(",");
                        if (indent_level == 0) {
                            res.append_char(' ');
                        }
                    }
                    if (indent_level == 0) {
                        var temp = i.get()->to_string_core(0, 0);
                        defer temp.delete();
                        res.append(temp.c_str);
                    } else {
                        res.append_char('\n');
                        self.add_indent(res.__ptr__(), current_indent);
                        var temp = i.get()->to_string_core(
                            current_indent + indent_level,
                            indent_level
                        );
                        defer temp.delete();
                        res.append(temp.c_str);
                    }
                }
                if (indent_level != 0) {
                    res.append_char('\n');
                    self.add_indent(res.__ptr__(), current_indent - indent_level);
                }
                res.append("]");
                return res;
            }
            json_kind::json_string => {
                var res = str::from("\"");
                res.append(self.json_string.c_str);
                res.append("\"");
                return res;
            }
            json_kind::json_number => {
                return str::from_f64(self.json_number);
            }
            json_kind::json_bool => {
                if (self.json_bool) {
                    return str::from("true");
                } else {
                    return str::from("false");
                }
            }
            json_kind::json_null => {
                return str::from("null");
            }
            json_kind::json_error => {
                panic(self.json_error.c_str);
            }
        }
        return str::from("null");
    }

    pub func to_string(self) -> str {
        return self.to_string_core(0, 0);
    }

    pub func to_string_indented(self, indent_level: i32) -> str {
        return self.to_string_core(indent_level, indent_level);
    }

    pub func parse(src: str&) -> json* {
        return parser::parse(src);
    }
}

enum json_token_kind {
    tok_left_brace,
    tok_right_brace,
    tok_left_bracket,
    tok_right_bracket,
    tok_comma,
    tok_colon,
    tok_string,
    tok_number,
    tok_true,
    tok_false,
    tok_null,
    tok_empty_result,
    tok_error,
    tok_eof
}

struct json_token {
    kind: json_token_kind,
    value: str
}

impl json_token {
    pub func instance(k: json_token_kind, s: const i8*) -> json_token {
        if (k == json_token_kind::tok_string ||
            k == json_token_kind::tok_number ||
            k == json_token_kind::tok_error) {
            return json_token {
                kind: k,
                value: str::from(s)
            };
        }
        return json_token { kind: k };
    }

    pub func left_brace() -> json_token {
        return json_token { kind: json_token_kind::tok_left_brace };
    }

    pub func right_brace() -> json_token {
        return json_token { kind: json_token_kind::tok_right_brace };
    }

    pub func left_bracket() -> json_token {
        return json_token { kind: json_token_kind::tok_left_bracket };
    }

    pub func right_bracket() -> json_token {
        return json_token { kind: json_token_kind::tok_right_bracket };
    }

    pub func colon() -> json_token {
        return json_token { kind: json_token_kind::tok_colon };
    }

    pub func comma() -> json_token {
        return json_token { kind: json_token_kind::tok_comma };
    }

    pub func _true() -> json_token {
        return json_token { kind: json_token_kind::tok_true };
    }

    pub func _false() -> json_token {
        return json_token { kind: json_token_kind::tok_false };
    }

    pub func null() -> json_token {
        return json_token { kind: json_token_kind::tok_null };
    }

    pub func empty_result() -> json_token {
        return json_token { kind: json_token_kind::tok_empty_result };
    }

    pub func error(info: const i8*) -> json_token {
        return json_token::instance(json_token_kind::tok_error, info);
    }

    pub func eof() -> json_token {
        return json_token { kind: json_token_kind::tok_eof };
    }

    pub func delete(self) {
        if (self.kind == json_token_kind::tok_string ||
            self.kind == json_token_kind::tok_number ||
            self.kind == json_token_kind::tok_error) {
            self.value.delete();
        }
    }

    pub func clone(self) -> json_token {
        if (self.kind == json_token_kind::tok_string ||
            self.kind == json_token_kind::tok_number ||
            self.kind == json_token_kind::tok_error) {
            return json_token {
                kind: self.kind,
                value: self.value.clone()
            };
        }
        return json_token { kind: self.kind };
    }
}

struct tokenizer {
    index: u64,
    source: str*,
    tokens: vec<json_token>,
    error: str
}

impl tokenizer {
    pub func instance(src: str*) -> tokenizer {
        return tokenizer {
            index: 0,
            source: src,
            tokens: vec<json_token>::instance(),
            error: str::instance()
        };
    }

    pub func delete(self) {
        self.tokens.delete();
        self.error.delete();
    }
}

impl tokenizer {
    func is_identifier_head(c: i8) -> bool {
        return is_alpha_letter(c) || c == '_';
    }

    func is_number_head(c: i8) -> bool {
        return is_digit(c) || c == '-' || c == '+';
    }

    func is_number_body(c: i8) -> bool {
        return is_digit(c) || c == '.' || c == 'e' || c == 'E' || c == '-' || c == '+';
    }

    func next_token(self) -> json_token {
        var input = self.source;
        var i = self.index;

        if (i >= input->size || input->c_str[i] == 0) {
            return json_token::eof();
        }

        defer self.index = i + 1;

        if (input->c_str[i] == '{') {
            return json_token::left_brace();
        } elsif (input->c_str[i] == '}') {
            return json_token::right_brace();
        } elsif (input->c_str[i] == '[') {
            return json_token::left_bracket();
        } elsif (input->c_str[i] == ']') {
            return json_token::right_bracket();
        } elsif (input->c_str[i] == ',') {
            return json_token::comma();
        } elsif (input->c_str[i] == ':') {
            return json_token::colon();
        } elsif (input->c_str[i] == '"') {
            var start = input->c_str[i];
            i += 1;
            var content = str::instance();
            defer content.delete();
            while (input->c_str[i] != 0 && input->c_str[i] != start) {
                if (input->c_str[i] == '\\') {
                    i += 1;
                    if (input->c_str[i] == 0) {
                        return json_token::error("invalid escape sequence");
                    }
                    if (input->c_str[i] == 'n') {
                        content.append_char('\n');
                    } elsif (input->c_str[i] == 't') {
                        content.append_char('\t');
                    } elsif (input->c_str[i] == 'r') {
                        content.append_char('\r');
                    } elsif (input->c_str[i] == '\\') {
                        content.append_char('\\');
                    } elsif (input->c_str[i] == '"') {
                        content.append_char('"');
                    } else {
                        content.append_char('\\');
                        content.append_char(input->c_str[i]);
                    }
                } else {
                    content.append_char(input->c_str[i]);
                }
                i += 1;
            }
            if (input->c_str[i] == 0) {
                return json_token::error("unterminated string");
            }
            var tok = json_token::instance(json_token_kind::tok_string, content.c_str);
            return tok;
        } elsif (tokenizer::is_number_head(input->c_str[i])) {
            var content = str::instance();
            defer content.delete();

            content.append_char(input->c_str[i]);
            i += 1;

            while (input->c_str[i] != 0 && tokenizer::is_number_body(input->c_str[i])) {
                content.append_char(input->c_str[i]);
                i += 1;
            }
            if (input->c_str[i] != 0) {
                i -= 1;
            }
            var tok = json_token::instance(json_token_kind::tok_number, content.c_str);
            return tok;
        } elsif (tokenizer::is_identifier_head(input->c_str[i])) {
            var content = str::instance();
            defer content.delete();

            content.append_char(input->c_str[i]);
            i += 1;

            while (input->c_str[i] != 0 &&
                    (tokenizer::is_identifier_head(input->c_str[i]) ||
                    is_digit(input->c_str[i]))) {
                content.append_char(input->c_str[i]);
                i += 1;
            }
            if (input->c_str[i] != 0) {
                i -= 1;
            }

            if (content.eq_const("true")) {
                return json_token::_true();
            } elsif (content.eq_const("false")) {
                return json_token::_false();
            } elsif (content.eq_const("null")) {
                return json_token::null();
            }
            
            return json_token::error("invalid identifier");
        } else if (input->c_str[i] == ' ' ||
                   input->c_str[i] == '\t' ||
                   input->c_str[i] == '\n' ||
                   input->c_str[i] == '\r') {
            while (input->c_str[i] == ' ' ||
                   input->c_str[i] == '\t' ||
                   input->c_str[i] == '\n' ||
                   input->c_str[i] == '\r') {
                if (i + 2 < input->size &&
                    input->c_str[i + 1] == ' ' &&
                    input->c_str[i + 2] == ' ') {
                    i += 3;
                } else {
                    i += 1;
                }
            }
            i -= 1;
            return json_token::empty_result();
        }

        return json_token::error("unexpected character");
    }

    pub func next(self) -> json_token {
        var tok = self.next_token();
        if (tok.kind == json_token_kind::tok_eof) {
            return tok;
        }

        // skip empty results
        while (tok.kind == json_token_kind::tok_empty_result) {
            tok.delete();
            tok = self.next_token();
        }
        return tok;
    }

    pub func tokenize(self) {
        self.index = 0;
        self.tokens.clear();

        var tok = self.next();
        defer tok.delete();
        self.tokens.push(tok.__ptr__());
        if (tok.kind == json_token_kind::tok_error) {
            self.error.append(tok.value.c_str);
            return;
        }

        while (tok.kind != json_token_kind::tok_eof) {
            tok.delete();
            tok = self.next();
            self.tokens.push(tok.__ptr__());
            if (tok.kind == json_token_kind::tok_error) {
                self.error.append(tok.value.c_str);
                return;
            }
        }
    }
}

struct parser {
    tkn: tokenizer,
    index: u64
}

impl parser {
    func instance(s: str*) -> parser {
        var result = parser {
            tkn: tokenizer::instance(s),
            index: 0
        };
        return result;
    }

    func delete(self) {
        self.tkn.delete();
    }

    func lookahead(self, kind: json_token_kind) -> bool {
        if (self.index >= self.tkn.tokens.size) {
            return kind == json_token_kind::tok_eof;
        }
        return self.tkn.tokens.get(self.index).kind == kind;
    }

    func this_tok(self) -> json_token* {
        if (self.index >= self.tkn.tokens.size) {
            return self.tkn.tokens.back().__ptr__();
        }
        return self.tkn.tokens.get(self.index).__ptr__();
    }

    func next(self) {
        if (self.index + 1 < self.tkn.tokens.size) {
            self.index += 1;
        }
    }

    func parse_object(self) -> json* {
        var result = json::obj();
        if (self.lookahead(json_token_kind::tok_left_brace)) {
            self.next();
        } else {
            result->delete();
            free(result => i8*);
            return json::error("invalid object, expect '{'");
        }
        
        var tok = self.tkn.next();
        defer tok.delete();

        while (!self.lookahead(json_token_kind::tok_eof) &&
               !self.lookahead(json_token_kind::tok_error) &&
               !self.lookahead(json_token_kind::tok_right_brace)) {
            if (!self.lookahead(json_token_kind::tok_string)) {
                result->delete();
                free(result => i8*);
                return json::error("invalid object, expect string");
            }

            var key = self.this_tok()->value.clone();
            defer key.delete();
            self.next();

            if (!self.lookahead(json_token_kind::tok_colon)) {
                result->delete();
                free(result => i8*);
                return json::error("invalid object, expect ':'");
            } else {
                self.next();
            }

            var value = self.parse_value();
            result->json_object.insert(key, value);

            if (self.lookahead(json_token_kind::tok_comma)) {
                self.next();
            } else {
                break;
            }
        }

        if (!self.lookahead(json_token_kind::tok_right_brace)) {
            result->delete();
            free(result => i8*);
            return json::error("invalid object, expect '}'");
        } else {
            self.next();
        }

        return result;
    }

    func parse_array(self) -> json* {
        var result = json::arr();
        if (self.lookahead(json_token_kind::tok_left_bracket)) {
            self.next();
        } else {
            result->delete();
            free(result => i8*);
            return json::error("invalid array, expect '['");
        }
        
        var tok = self.tkn.next();
        defer tok.delete();

        while (!self.lookahead(json_token_kind::tok_eof) &&
               !self.lookahead(json_token_kind::tok_error) &&
               !self.lookahead(json_token_kind::tok_right_bracket)) {
            var value = self.parse_value();
            result->json_array.push(value);

            if (self.lookahead(json_token_kind::tok_comma)) {
                self.next();
            } else {
                break;
            }
        }

        if (!self.lookahead(json_token_kind::tok_right_bracket)) {
            result->delete();
            free(result => i8*);
            return json::error("invalid array, expect ']'");
        } else {
            self.next();
        }

        return result;
    }

    func parse_value(self) -> json* {
        match (self.this_tok()->kind) {
            json_token_kind::tok_left_brace => {
                return self.parse_object();
            }
            json_token_kind::tok_right_brace => {
                var result = json::error("invalid token '}'");
                self.next();
                return result;
            }
            json_token_kind::tok_left_bracket => {
                return self.parse_array();
            }
            json_token_kind::tok_right_bracket => {
                var result = json::error("invalid token ']'");
                self.next();
                return result;
            }
            json_token_kind::tok_comma => {
                var result = json::error("invalid token ','");
                self.next();
                return result;
            }
            json_token_kind::tok_colon => {
                var result = json::error("invalid token ':'");
                self.next();
                return result;
            }
            json_token_kind::tok_string => {
                var result = json::str(self.this_tok()->value.c_str);
                self.next();
                return result;
            }
            json_token_kind::tok_number => {
                var result = json::num(to_f64(self.this_tok()->value.c_str));
                self.next();
                return result;
            }
            json_token_kind::tok_true => {
                var result = json::bool(true);
                self.next();
                return result;
            }
            json_token_kind::tok_false => {
                var result = json::bool(false);
                self.next();
                return result;
            }
            json_token_kind::tok_null => {
                var result = json::null();
                self.next();
                return result;
            }
            json_token_kind::tok_empty_result => {
                panic("empty result token");
            }
            json_token_kind::tok_error => {
                var result = json::error(self.this_tok()->value.c_str);
                self.next();
                return result;
            }
            json_token_kind::tok_eof => {
                var result = json::error("invalid token '<eof>'");
                self.next();
                return result;
            }
        }

        var result = json::error("unreachable");
        self.next();
        return result;
    }

    pub func parse(s: str&) -> json* {
        var parse = parser::instance(s.__ptr__());
        defer parse.delete();

        // tokenize
        parse.tkn.tokenize();
        if (!parse.tkn.error.empty()) {
            var res = json::error(parse.tkn.error.c_str);
            return res;
        }

        // parse
        var res = parse.parse_value();
        return res;
    }
}
