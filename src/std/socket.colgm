use std::libc::{ close, strlen, perror, sleep };
use std::str::{ str };

use err::panic::{ panic };

pub enum af_domain {
    AF_INET = 2
}

pub enum ip_proto {
    IPPROTO_IP = 0,
    IPPROTO_ICMP = 1,
    IPPROTO_TCP = 6,
    IPPROTO_UDP = 17
}

pub enum sock_kind {
    SOCK_STREAM = 1,
    SOCK_DGRAM = 2
}

pub enum inaddr_kind {
    INADDR_ANY = 0
}

struct in_addr {
    s_addr: u32
}

#[enable_if(target_os="macos")]
pub struct sockaddr_in {
    sin_len: u8,       // 1 align 1
    sin_family: u8,    // 1 align 1
    sin_port: u16,     // 2 align 2
    sin_addr: in_addr, // 4 align 4

    sin_zero: [i8; 8]  // 8 align 1
} // 16 align 4

#[enable_if(target_os="macos")]
impl sockaddr_in {
    pub func instance() -> sockaddr_in {
        return sockaddr_in {
            sin_len: 0,
            sin_family: 0,
            sin_port: 0,
            sin_addr: in_addr { s_addr: 0 },
            sin_zero: 0
        };
    }

    pub func set(self, domain: af_domain, ip: i8*, port: u16) {
        self->sin_family = domain => u8;
        self->sin_port = htons(port);
        self->sin_addr.s_addr = inet_addr(ip);
        self->sin_zero = 0;
    }
}

#[enable_if(target_os="linux")]
pub struct sockaddr_in {
    sin_family: u16,   // 2 align 2
    sin_port: u16,     // 2 align 2
    sin_addr: in_addr, // 4 align 4

    sin_zero: [i8; 8]  // 8 align 1
} // 16 align 4

#[enable_if(target_os="linux")]
impl sockaddr_in {
    pub func instance() -> sockaddr_in {
        return sockaddr_in {
            sin_family: 0,
            sin_port: 0,
            sin_addr: in_addr { s_addr: 0 }
            // sin_zero should be all zero because of llvm zeroinitializer
        };
    }

    pub func set(self, domain: af_domain, ip: i8*, port: u16) {
        self->sin_family = domain => u16;
        self->sin_port = htons(port);
        self->sin_addr.s_addr = inet_addr(ip);
    }
}

impl sockaddr_in {
    pub func to_str(self) -> str {
        var res = str::from(inet_ntoa(self->sin_addr));
        res.append_char(':');
        res.append_u64(ntohs(self->sin_port) => u64);
        return res;
    }
}

struct sockaddr {
    sa_len: u8,       // 1 align 1
    sa_family: u8,    // 1 align 1

    sa_data: [i8; 14] // 14 align 1
} // 16 align 1

pub extern func socket(domain: i32, type: i32, protocal: i32) -> i32;
pub extern func bind(sockfd: i32, addr: sockaddr_in*, len: u32) -> i32;
pub extern func connect(sockfd: i32, addr: sockaddr_in*, len: u32) -> i32;
pub extern func listen(sockfd: i32, backlog: i32) -> i32;
pub extern func accept(sockfd: i32, addr: sockaddr_in*, len: u32*) -> i32;
pub extern func send(sockfd: i32, buf: i8*, len: u64, flags: i32) -> i32;
pub extern func recv(sockfd: i32, buf: i8*, len: u64, flags: i32) -> i32;
pub extern func htons(port: u16) -> u16;
pub extern func ntohs(port: u16) -> u16;
pub extern func inet_ntoa(addr: in_addr) -> i8*;
pub extern func inet_addr(addr: i8*) -> u32;
pub extern func sendto(sockfd: i32, buf: i8*, len: u64, flags: i32, addr: sockaddr_in*, addrlen: u32) -> i32;
pub extern func recvfrom(sockfd: i32, buf: i8*, len: u64, flags: i32, addr: sockaddr_in*, addrlen: u32*) -> i32;

pub func s_socket(domain: af_domain, type: sock_kind, protocol: ip_proto) -> i32 {
    var fd = socket(domain => i32, type => i32, protocol => i32);
    if (fd < 0) {
        perror("socket");
        panic("error creating socket");
    }
    return fd;
}
