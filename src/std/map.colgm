use std::str::{ str };
use std::libc::{ malloc, realloc, free };
use std::list::{ list, list_iter };
use std::io::{ io };
use std::pair::{ pair };
use std::panic::{ panic };

pub struct hashmap<K, V> {
    size: u64,
    bucket_capacity: u64,
    bucket: list<pair<K, V>>*
}

impl hashmap<K, V> {
    pub func new() -> hashmap<K, V>* {
        var res = hashmap<K, V>::__alloc__();
        if (res == nil) {
            panic("failed to allocate memory");
        }
        res->init();
        return res;
    }

    pub func instance() -> hashmap<K, V> {
        var res = hashmap<K, V> {};
        res.init();
        return res;
    }

    pub func clone(self) -> hashmap<K, V> {
        var res = hashmap<K, V>::instance();
        foreach (var i; self) {
            res.insert(i.key(), i.value());
        }
        return res;
    }

    func init(self) {
        self.size = 0;
        self.bucket_capacity = 16;
        self.bucket = malloc(
            self.bucket_capacity *
            list<pair<K, V>>::__size__()
        ) => list<pair<K, V>>*;
        for (var i: u64 = 0; i < self.bucket_capacity; i += 1) {
            self.bucket[i] = list<pair<K, V>>::instance();
        }
    }

    pub func clear(self) {
        for (var i: u64 = 0; i < self.bucket_capacity; i += 1) {
            self.bucket[i].clear();
        }
        self.size = 0;
    }

    pub func delete(self) {
        for (var i: u64 = 0; i < self.bucket_capacity; i += 1) {
            self.bucket[i].delete();
        }
        free(self.bucket => i8*);
        self.bucket = nil;

        self.size = 0;
        self.bucket_capacity = 0;
    }
}

impl hashmap<K, V> {
    pub func has(self, key: K&) -> bool {
        if (self.bucket_capacity == 0) {
            panic("capacity is 0");
        }
        var hash = key.hash() % self.bucket_capacity;
        var bucket = self.bucket[hash].__ptr__();
        foreach (var i; bucket) {
            if (i.elem().key.eq(key)) {
                return true;
            }
        }
        return false;
    }

    #[is_non_trivial(V)]
    pub func get(self, key: K&) -> V* {
        if (self.bucket_capacity == 0) {
            panic("capacity is 0");
        }
        var hash = key.hash() % self.bucket_capacity;
        var bucket = self.bucket[hash].__ptr__();

        var elem: pair<K, V>* = nil;
        foreach (var i; bucket) {
            if (i.elem().key.eq(key)) {
                elem = i.elem().__ptr__();
                break;
            }
        }

        if (elem == nil) {
            panic("key not found");
        }
        return elem->value.__ptr__();
    }

    #[is_trivial(V)]
    pub func get(self, key: K&) -> V {
        if (self.bucket_capacity == 0) {
            panic("capacity is 0");
        }
        var hash = key.hash() % self.bucket_capacity;
        var bucket = self.bucket[hash].__ptr__();

        var elem: pair<K, V>* = nil;
        foreach (var i; bucket) {
            if (i.elem().key.eq(key)) {
                elem = i.elem().__ptr__();
                break;
            }
        }

        if (elem == nil) {
            panic("key not found");
        }
        return elem->value;
    }

    #[is_non_trivial(V)]
    pub func insert(self, key: K&, value: V&) {
        var hash = key.hash() % self.bucket_capacity;
        var bucket = self.bucket[hash].__ptr__();
        foreach (var i; bucket) {
            if (i.elem().key.eq(key)) {
                var tmp = i.elem();
                tmp.value.delete();
                tmp.value = value.clone();
                return;
            }
        }
        
        var tmp_pair = pair<K, V>::instance(key, value);
        defer tmp_pair.delete();

        // do copy in insert method
        bucket->insert(tmp_pair);
        self.size += 1;

        if (self.size / self.bucket_capacity > 8) {
            self.rehash();
        }
    }

    #[is_trivial(V)]
    pub func insert(self, key: K&, value: V) {
        var hash = key.hash() % self.bucket_capacity;
        var bucket = self.bucket[hash].__ptr__();
        foreach (var i; bucket) {
            if (i.elem().key.eq(key)) {
                i.elem().value = value;
                return;
            }
        }
        
        var tmp_pair = pair<K, V>::instance(key, value);
        defer tmp_pair.delete();

        // do copy in insert method
        bucket->insert(tmp_pair);
        self.size += 1;

        if (self.size / self.bucket_capacity > 8) {
            self.rehash();
        }
    }

    func rehash_pre_work(self) -> list<pair<K, V>> {
        var temp = list<pair<K, V>>::instance();
        foreach (var i; self) {
            var tmp_pair = pair<K, V>::instance(i.key(), i.value());
            defer tmp_pair.delete();
            temp.insert(tmp_pair);
        }

        self.clear();
        self.bucket_capacity *= 2;
        self.bucket = realloc(
            self.bucket => i8*,
            self.bucket_capacity *
            list<pair<K, V>>::__size__()
        ) => list<pair<K, V>>*;
        for (var i = self.bucket_capacity / 2; i < self.bucket_capacity; i += 1) {
            self.bucket[i] = list<pair<K, V>>::instance();
        }

        return temp;
    }

    #[is_non_trivial(V)]
    func rehash(self) {
        var temp = self.rehash_pre_work();
        defer temp.delete();

        foreach (var i; temp) {
            self.insert(i.elem().key, i.elem().value);
        }
    }

    #[is_trivial(V)]
    func rehash(self) {
        var temp = self.rehash_pre_work();
        defer temp.delete();

        foreach (var i; temp) {
            self.insert(i.elem().key, i.elem().value);
        }
    }

    pub func remove(self, key: K&) {
        var hash = key.hash() % self.bucket_capacity;
        var bucket = self.bucket[hash].__ptr__();
        var cur = bucket->head;
        while (cur != nil) {
            if (cur->elem.key.eq(key)) {
                if (cur->prev != nil) {
                    cur->prev->next = cur->next;
                }
                if (cur->next != nil) {
                    cur->next->prev = cur->prev;
                }
                if (cur == bucket->head) {
                    bucket->head = cur->next;
                }
                if (cur == bucket->tail) {
                    bucket->tail = cur->prev;
                }
                cur->elem.delete();
                free(cur => i8*);
                bucket->size -= 1;
                self.size -= 1;
                break;
            }
            cur = cur->next;
        }
    }

    pub func empty(self) -> bool {
        return self.size == 0;
    }
}

struct iter<K, V> {
    map: hashmap<K, V>*,
    bucket_index: u64,
    bucket_iter: list_iter<pair<K, V>>
}

impl iter<K, V> {
    func instance(map: hashmap<K, V>*) -> iter<K, V> {
        var res = iter<K, V> {
            map: map,
            bucket_index: 0,
            bucket_iter: map->bucket[0].iter()
        };
        while (res.bucket_iter.is_end()) {
            res.bucket_index += 1;
            if (res.bucket_index >= map->bucket_capacity) {
                return res;
            }
            res.bucket_iter = map->bucket[res.bucket_index].iter();
        }
        return res;
    }

    pub func next(self) -> iter<K, V> {
        if (!self.bucket_iter.is_end()) {
            self.bucket_iter = self.bucket_iter.next();
        }

        while (self.bucket_iter.is_end()) {
            self.bucket_index += 1;
            if (self.bucket_index >= self.map->bucket_capacity) {
                break;
            }
            self.bucket_iter = self.map->bucket[self.bucket_index].iter();
        }

        return iter<K, V> {
            map: self.map,
            bucket_index: self.bucket_index,
            bucket_iter: self.bucket_iter,
        };
    }

    pub func is_end(self) -> bool {
        return self.bucket_index >= self.map->bucket_capacity &&
               self.bucket_iter.is_end();
    }

    pub func key(self) -> K& {
        return self.bucket_iter.elem().key;
    }

    #[is_non_trivial(V)]
    pub func value(self) -> V& {
        return self.bucket_iter.elem().value;
    }

    #[is_trivial(V)]
    pub func value(self) -> V {
        return self.bucket_iter.elem().value;
    }
}

impl hashmap<K, V> {
    pub func iter(self) -> iter<K, V> {
        return iter<K, V>::instance(self.__ptr__());
    }
}