use std::str::{ str };
use std::libc::{ malloc, free, streq };
use std::list::{ list, list_iter };

pub struct pair<K, V> {
    key: K*,
    value: V*
}

impl pair<K, V> {
    pub func delete(self) {
        self->key->delete();
        self->value->delete();
        free(self->key => i8*);
        free(self->value => i8*);
    }

    pub func copy(self) -> pair<K, V>* {
        var res = pair<K, V>::__alloc__();
        res->key = self->key->copy();
        res->value = self->value->copy();
        return res;
    }
}

pub struct hashmap<K, V> {
    size: u64,
    bucket_capacity: u64,
    bucket: list<pair<K, V>>*
}

impl hashmap<K, V> {
    pub func new() -> hashmap<K, V>* {
        var res = hashmap<K, V>::__alloc__();
        res->init();
        return res;
    }

    pub func instance() -> hashmap<K, V> {
        var res = hashmap<K, V> {};
        res.init();
        return res;
    }

    func init(self) {
        self->size = 0;
        self->bucket_capacity = 1024;
        self->bucket = malloc(self->bucket_capacity
                              * list<pair<K, V>>::__size__())
                              => list<pair<K, V>>*;
        for (var i: u64 = 0; i < self->bucket_capacity; i += 1) {
            self->bucket[i] = list<pair<K, V>>::instance();
        }
    }

    pub func delete(self) {
        for (var i: u64 = 0; i < self->bucket_capacity; i += 1) {
            self->bucket[i].delete();
        }
        free(self->bucket => i8*);
        self->size = 0;
        self->bucket_capacity = 0;
        self->bucket = nil => list<pair<K, V>>*;
    }
}

impl hashmap<K, V> {
    pub func has(self, key: K*) -> bool {
        var hash = key->hash() % 1024;
        var bucket = self->bucket[hash].__ptr__();
        for (var i = bucket->iter(); !i.is_end(); i = i.next()) {
            if (i.elem()->key->eq(key)) {
                return true;
            }
        }
        return false;
    }

    pub func get(self, key: K*) -> V* {
        var hash = key->hash() % 1024;
        var bucket = self->bucket[hash].__ptr__();
        for (var i = bucket->iter(); !i.is_end(); i = i.next()) {
            if (i.elem()->key->eq(key)) {
                return i.elem()->value;
            }
        }
       return nil => V*;
    }

    pub func insert(self, key: K*, value: V*) {
        var hash = key->hash() % self->bucket_capacity;
        var bucket = self->bucket[hash].__ptr__();
        for (var i = bucket->iter(); !i.is_end(); i = i.next()) {
            if (i.elem()->key->eq(key)) {
                var tmp = i.elem();
                tmp->value->delete();
                free(tmp->value => i8*);
                tmp->value = value->copy();
                return;
            }
        }
        
        var tmp_pair = pair<K, V> {
            key: key,
            value: value
        };
        // do copy in insert method
        bucket->insert(tmp_pair.__ptr__());
        self->size += 1;
    }
}

pub struct hashmap_iter<K, V> {
    map: hashmap<K, V>*,
    bucket_index: u64,
    bucket_iter: list_iter<pair<K, V>>
}

impl hashmap_iter<K, V> {
    func instance(map: hashmap<K, V>*) -> hashmap_iter<K, V> {
        var res = hashmap_iter<K, V> {
            map: map,
            bucket_index: 0,
            bucket_iter: map->bucket[0].iter()
        };
        while (res.bucket_iter.is_end()) {
            res.bucket_index += 1;
            if (res.bucket_index >= map->bucket_capacity) {
                return res;
            }
            res.bucket_iter = map->bucket[res.bucket_index].iter();
        }
        return res;
    }

    pub func next(self) -> hashmap_iter<K, V> {
        if (!self->bucket_iter.is_end()) {
            self->bucket_iter = self->bucket_iter.next();
        }

        while (self->bucket_iter.is_end()) {
            self->bucket_index += 1;
            if (self->bucket_index >= self->map->bucket_capacity) {
                break;
            }
            self->bucket_iter = self->map->bucket[self->bucket_index].iter();
        }

        return hashmap_iter<K, V> {
            map: self->map,
            bucket_index: self->bucket_index,
            bucket_iter: self->bucket_iter,
        };
    }

    pub func is_end(self) -> bool {
        return self->bucket_index >= self->map->bucket_capacity &&
               self->bucket_iter.is_end();
    }

    pub func key(self) -> K* {
        return self->bucket_iter.elem()->key;
    }

    pub func value(self) -> V* {
        return self->bucket_iter.elem()->value;
    }
}

impl hashmap<K, V> {
    pub func iter(self) -> hashmap_iter<K, V> {
        return hashmap_iter<K, V>::instance(self);
    }
}