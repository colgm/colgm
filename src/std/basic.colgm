use err::panic::{ panic };

// basic can only used with primitive types or pointer types
// trivial types are also accepted
pub struct basic<T> {
    data: T
}

impl basic<T> {
    // shallow copy
    pub func copy(self) -> basic<T>* {
        var res = basic<T>::__alloc__();
        if (res == nil) {
            panic("failed to allocate memory");
        }
        res->data = self->data;
        return res;
    }

    // shallow copy
    pub func copy_instance(self) -> basic<T> {
        return basic<T> { data: self->data };
    }

    pub func wrap(v: T) -> basic<T> {
        return basic<T> { data: v };
    }

    pub func unwrap(self) -> T {
        return self->data;
    }

    pub func hash(self) -> u64 {
        return self->data => u64;
    }

    pub func eq(self, other: basic<T>) -> bool {
        return self->data == other.data;
    }
}
