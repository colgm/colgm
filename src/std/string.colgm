use std::libc::{ puts };

pub func ascii_letters() -> i8* {
    return "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
}

pub func ascii_lowercase() -> i8* {
    return "abcdefghijklmnopqrstuvwxyz";
}

pub func ascii_uppercase() -> i8* {
    return "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
}

pub func digits() -> i8* {
    return "0123456789";
}

pub func hexdigits() -> i8* {
    return "0123456789abcdef";
}

pub func octdigits() -> i8* {
    return "01234567";
}

pub func punctuation() -> i8* {
    return "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
}

pub func is_ascii_letter(ch: i8) -> bool {
    // length of "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" is 52
    var flag = false;
    var ascii_letters_str = ascii_letters();
    for (var i = 0; i < 52; i += 1) {
        if (ascii_letters_str[i] == ch) {
            flag = true;
            break;
        }
    }
    return flag;
}

pub func is_ascii_lowercase(ch: i8) -> bool {
    // length of "abcdefghijklmnopqrstuvwxyz" is 26
    var flag = false;
    var ascii_lcase_str = ascii_lowercase();
    for (var i = 0; i < 26; i += 1) {
        if (ascii_lcase_str[i] == ch) {
            flag = true;
            break;
        }
    }
    return flag;
}

pub func is_ascii_uppercase(ch: i8) -> bool {
    // length of "ABCDEFGHIJKLMNOPQRSTUVWXYZ" is 26
    var flag = false;
    var ascii_ucase_str = ascii_uppercase();
    for (var i = 0; i < 26; i += 1) {
        if (ascii_ucase_str[i] == ch) {
            flag = true;
            break;
        }
    }
    return flag;
}

pub func is_digit(ch: i8) -> bool {
    // length of "0123456789" is 10
    var flag = false;
    var digits_str = digits();
    for (var i = 0; i < 10; i += 1) {
        if (digits_str[i] == ch) {
            flag = true;
            break;
        }
    }
    return flag;
}

pub func is_hexdigit(ch: i8) -> bool {
    // length of "0123456789abcdef" is 16
    var flag = false;
    var hexdigits_str = hexdigits();
    for (var i = 0; i < 16; i += 1) {
        if (hexdigits_str[i] == ch) {
            flag = true;
            break;
        }
    }
    return flag;
}

pub func is_octdigit(ch: i8) -> bool {
    // length of "01234567" is 16
    var flag = false;
    var octdigits_str = octdigits();
    for (var i = 0; i < 8; i += 1) {
        if (octdigits_str[i] == ch) {
            flag = true;
            break;
        }
    }
    return flag;
}

pub func is_punctuation(ch: i8) -> bool {
    // length of "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~" is 32
    var flag = false;
    var punctuation_str = punctuation();
    for (var i = 0; i < 32; i += 1) {
        if (punctuation_str[i] == ch) {
            flag = true;
            break;
        }
    }
    return flag;
}

func main() {
    var out = "false";
    if (is_hexdigit('0')){
        out = "true";
    }
    puts(out);
}