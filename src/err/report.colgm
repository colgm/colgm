use err::span::{ span };

use util::package::{ package };
use sema::type::{ type };

use std::str::{ str };
use std::io::{ readfile, io };
use std::libc::{ itoa, strlen };
use std::fs::{ fs };
use std::vec::{ vec };
use std::panic::{ panic };

enum report_level {
    note,
    warning,
    error
}

pub struct report {
    filename: str,
    source: vec<str>,
    message_cache: str,
    note_cache: str,
    error_count: i64,
    endwith_enter: bool
}

impl report {
    pub func new() -> report* {
        var res = report::__alloc__();
        if (res == nil) {
            panic("failed to allocate memory");
        }
        res->filename = str::instance();
        res->source = vec<str>::instance();
        res->message_cache = str::instance();
        res->note_cache = str::instance();
        res->error_count = 0;
        res->endwith_enter = true;
        return res;
    }

    pub func delete(self) {
        self->filename.delete();
        self->source.delete();
        self->message_cache.delete();
        self->note_cache.delete();
    }
}

impl report {
    pub func load_file_source(self, filename: i8*) {
        if (!fs::exists(filename)) {
            self->error_count += 1;
            io::stderr().red().out("Error: ").reset();
            io::stderr().out("failed to load file <").out(filename)
                        .out(">, check if it exists and is readable\n");
            return;
        }

        self->filename.clear();
        self->filename.append(filename);
        self->source.clear();

        var source = readfile(filename);
        defer source.delete();

        var tmp = str::instance();
        defer tmp.delete();

        foreach (var ch; source) {
            if (ch.get() =='\n') {
                self->source.push(tmp.__ptr__());
                tmp.clear();
                continue;
            }
            tmp.append_char(ch.get());
        }
        if (tmp.size > 0) {
            self->source.push(tmp.__ptr__());
            tmp.clear();
        }
    }
}

impl report {
    func get_number_length(num: i64) -> i64 {
        if (num <= 0) {
            return 1;
        }
        var length = 0;
        while (num > 0) {
            num /= 10;
            length += 1;
        }
        return length;
    }

    func left_pad(padding: i64) -> str {
        var res = str::instance();
        while ((res.size => i64) < padding) {
            res.append_char(' ');
        }
        return res;
    }

    func to_str(num: i64, padding: i64) -> str {
        var tmp: [i8; 256] = [];
        itoa(num, tmp, 10);
        var res = str::instance();
        for (var index = strlen(tmp); index < padding; index += 1) {
            res.append_char(' ');
        }
        res.append(tmp);
        return res;
    }

    func print_span(self, location: span*, note: const i8*, level: report_level) {
        if (!location->file.eq_const(self->filename.c_str)) {
            self->load_file_source(location->file.c_str);
        }

        var index = location->begin_line;
        var max_line_number_length = report::get_number_length(location->end_line + 1);
        var pad_str = report::left_pad(max_line_number_length);
        defer pad_str.delete();

        io::stderr().cyan().out(pad_str.c_str).out(" | ").reset().endln();

        var omit_line_printed = false;

        while (index <= location->end_line) {
            // if total span includes more than 4 lines, omit the middle lines
            if (index > location->begin_line &&
                index < location->end_line &&
                location->end_line - location->begin_line > 4) {
                if (!omit_line_printed) {
                    io::stderr().cyan().out(pad_str.c_str).out(" | ").reset();
                    io::stderr().out("  ...").endln();
                    io::stderr().cyan().out(pad_str.c_str).out(" | ").reset().endln();
                    omit_line_printed = true;
                }
                index += 1;
                continue;
            }

            var this_line: const i8* = nil;
            var len: i64 = 0;
            if ((index => u64) < self->source.size) {
                this_line = self->source.get(index => u64)->c_str;
                len = self->source.get(index => u64)->size => i64;
            } else {
                this_line = " ";
                len = 1;
            }

            // print line number, for example:
            //
            //     1 | <source>
            //       | ...
            //    12 | <source>
            var pad_num = report::to_str(index + 1, max_line_number_length);
            defer pad_num.delete();
            io::stderr().cyan().out(pad_num.c_str).out(" | ")
                        .reset().out(this_line).endln();

            var underline = str::instance();
            defer underline.delete();

            if (index == location->begin_line) {
                for (var i = 0; i < len; i += 1) {
                    if (location->begin_line == location->end_line &&
                        i == location->end_column) {
                        break;
                    }
                    if (i < location->begin_column && this_line[i] != '\t') {
                        underline.append_char(' ');
                    }
                    if (i < location->begin_column && this_line[i] == '\t') {
                        underline.append_char('\t');
                    }
                    if (i >= location->begin_column && this_line[i] != '\t') {
                        underline.append_char('^');
                    }
                    if (i >= location->begin_column && this_line[i] == '\t') {
                        underline.append("^^^^");
                    }
                }
            } elsif (index == location->end_line) {
                // for case eof, len == 1, this_line = " "
                // sometimes the end_column is 0, but we still need one char
                // to mark the end of line
                if (len == 1 && location->end_column == 0) {
                    underline.append_char('^');
                }
                for (var i = 0; i < len; i += 1) {
                    // in fact this should be unreachable
                    if (location->begin_line == location->end_line &&
                        i < location->begin_column) {
                        continue;
                    }
                    if (i < location->end_column && this_line[i] != '\t') {
                        underline.append_char('^');
                    }
                    if (i < location->end_column && this_line[i] == '\t') {
                        underline.append("^^^^");
                    }
                    if (i >= location->end_column && this_line[i] != '\t') {
                        underline.append_char(' ');
                    }
                    if (i >= location->end_column && this_line[i] == '\t') {
                        underline.append_char('\t');
                    }
                }
            } else {
                for (var i = 0; i < len; i += 1) {
                    if (this_line[i] == '\t') {
                        underline.append("^^^^");
                    } elsif (this_line[i] != '\r' && this_line[i] != '\n') {
                        underline.append_char('^');
                    }
                }
            }

            index += 1;

            match (level) {
                report_level::note => {
                    io::stderr().cyan().out(pad_str.c_str).out(" | ")
                                .grey().out(underline.c_str)
                                .reset().endln();
                }
                report_level::warning => {
                    io::stderr().cyan().out(pad_str.c_str).out(" | ")
                                .orange().out(underline.c_str)
                                .reset().endln();
                }
                report_level::error => {
                    io::stderr().cyan().out(pad_str.c_str).out(" | ")
                                .red().out(underline.c_str)
                                .reset().endln();
                }
            }
        }

        // print note
        if (note != nil) {
            io::stderr().out(pad_str.c_str)
                        .cyan().out("note: ").reset()
                        .out(note).endln();
        }
        if (self->endwith_enter) {
            io::stderr().endln();
        }
    }
}

impl report {
    pub func unimplemented(self, location: span*) {
        self->error_with_note(location,
            "unimplemented",
            "please report issue to https://github.com/colgm/colgm/issues"
        );
    }

    pub func error(self, location: span*, message: i8*) {
        self->error_count += 1;

        io::stderr().red().out("Error: ").reset().out(message).endln();
        if (location != nil) {
            io::stderr().cyan().out("  --> ").red().out(location->file.c_str);
            io::stderr().out_ch(':').out_i64(location->begin_line + 1);
            io::stderr().out_ch(':').out_i64(location->begin_column + 1);
            io::stderr().reset().endln();
            self->print_span(location, nil, report_level::error);
        }
    }

    pub func error_with_note(self, location: span*, message: i8*, note: i8*) {
        self->error_count += 1;

        io::stderr().red().out("Error: ").reset().out(message).endln();
        if (location != nil) {
            io::stderr().cyan().out("  --> ").red().out(location->file.c_str);
            io::stderr().out_ch(':').out_i64(location->begin_line + 1);
            io::stderr().out_ch(':').out_i64(location->begin_column + 1);
            io::stderr().reset().endln();
            self->print_span(location, note, report_level::error);
        }
    }

    pub func warn(self, location: span*, message: i8*) {
        io::stderr().orange().out("Warning: ").reset().out(message).endln();
        if (location != nil) {
            io::stderr().cyan().out("  --> ").orange().out(location->file.c_str);
            io::stderr().out_ch(':').out_i64(location->begin_line + 1);
            io::stderr().out_ch(':').out_i64(location->begin_column + 1);
            io::stderr().reset().endln();
            self->print_span(location, nil, report_level::warning);
        }
    }

    pub func warn_with_note(self, location: span*, message: i8*, note: i8*) {
        io::stderr().orange().out("Warning: ").reset().out(message).endln();
        if (location != nil) {
            io::stderr().cyan().out("  --> ").orange().out(location->file.c_str);
            io::stderr().out_ch(':').out_i64(location->begin_line + 1);
            io::stderr().out_ch(':').out_i64(location->begin_column + 1);
            io::stderr().reset().endln();
            self->print_span(location, note, report_level::warning);
        }
    }

    pub func note(self, location: span*, message: i8*) {
        io::stderr().grey().out("Note: ").reset().out(message).endln();
        if (location != nil) {
            io::stderr().cyan().out("  --> ").grey().out(location->file.c_str);
            io::stderr().out_ch(':').out_i64(location->begin_line + 1);
            io::stderr().out_ch(':').out_i64(location->begin_column + 1);
            io::stderr().reset().endln();
            self->print_span(location, nil, report_level::note);
        }
    }

    pub func note_with_note(self, location: span*, message: i8*, note: i8*) {
        io::stderr().grey().out("Note: ").reset().out(message).endln();
        if (location != nil) {
            io::stderr().cyan().out("  --> ").grey().out(location->file.c_str);
            io::stderr().out_ch(':').out_i64(location->begin_line + 1);
            io::stderr().out_ch(':').out_i64(location->begin_column + 1);
            io::stderr().reset().endln();
            self->print_span(location, note, report_level::note);
        }
    }
}

// report builder methods
impl report {
    pub func out(self, message: const i8*) -> report* {
        self->message_cache.append(message);
        return self;
    }

    pub func out_i64(self, value: i64) -> report* {
        self->message_cache.append_i64(value);
        return self;
    }

    pub func out_u64(self, value: u64) -> report* {
        self->message_cache.append_u64(value);
        return self;
    }

    pub func out_type(self, ty: type*, pkg: package*) -> report* {
        var name = ty->full_path_name_with_pointer(pkg);
        defer name.delete();

        self->message_cache.append(name.c_str);
        return self;
    }

    pub func out_note(self, message: const i8*) -> report* {
        self->note_cache.append(message);
        return self;
    }

    pub func emit_warn(self, location: span*) {
        if (self->note_cache.empty()) {
            self->warn_with_note(location, self->message_cache.c_str, nil);
        } else {
            self->warn_with_note(location, self->message_cache.c_str, self->note_cache.c_str);
        }
        self->message_cache.clear();
        self->note_cache.clear();
    }

    pub func emit_err(self, location: span*) {
        if (self->note_cache.empty()) {
            self->error_with_note(location, self->message_cache.c_str, nil);
        } else {
            self->error_with_note(location, self->message_cache.c_str, self->note_cache.c_str);
        }
        self->message_cache.clear();
        self->note_cache.clear();
    }

    pub func emit_note(self, location: span*) {
        if (self->note_cache.empty()) {
            self->note_with_note(location, self->message_cache.c_str, nil);
        } else {
            self->note_with_note(location, self->message_cache.c_str, self->note_cache.c_str);
        }
        self->message_cache.clear();
        self->note_cache.clear();
    }
}

impl report {
    func highlight(self) -> report* {
        self->message_cache.append("\e[97;1m");
        return self;
    }

    func cancel_highlight(self) -> report* {
        self->message_cache.append("\e[0m");
        return self;
    }

    func highlight_note(self) -> report* {
        self->note_cache.append("\e[97;1m");
        return self;
    }

    func cancel_highlight_note(self) -> report* {
        self->note_cache.append("\e[0m");
        return self;
    }

    func headless_note(self, location: span*, note: i8*) {
        if (location == nil) {
            return;
        }
        io::stderr().cyan().out("  --> ").grey().out(location->file.c_str);
        io::stderr().out_ch(':').out_i64(location->begin_line + 1);
        io::stderr().out_ch(':').out_i64(location->begin_column + 1);
        io::stderr().reset().endln();
        self->print_span(location, note, report_level::note);
    }

    func emit_headless(self, location: span*) {
        self->headless_note(location, self->note_cache.c_str);
        self->message_cache.clear();
        self->note_cache.clear();
    }
}

impl report {
    pub func report_conflict_param(self,
                                   param_loc: span*,
                                   conflict_loc: span*,
                                   param_name: const i8*) {
        self->endwith_enter = false;
        self->highlight()->out("\"")->out(param_name)
            ->out("\"")->cancel_highlight()
            ->out(" conflicts with an exist parameter")
            ->emit_err(param_loc);
        self->endwith_enter = true;
        self->out_note("parameter ")
            ->highlight_note()
            ->out_note("\"")->out_note(param_name)->out_note("\"")
            ->cancel_highlight_note()
            ->out_note(" is defined here")
            ->emit_headless(conflict_loc);
    }

    pub func report_field_not_found(self,
                                    call_loc: span*,
                                    field_name: const i8*,
                                    data_struct_name: const i8*,
                                    fuzzy_match: const i8*,
                                    fuzzy_match_loc: span*) {
        if (fuzzy_match_loc != nil) {
            self->endwith_enter = false;
        }

        self->out("cannot find field or method ")
            ->highlight()->out("\"")->out(field_name)->out("\"")->cancel_highlight()
            ->out(" in ")
            ->highlight()->out("\"")->out(data_struct_name)->out("\"")->cancel_highlight()
            ->out_note("maybe you mean ")
            ->highlight_note()
            ->out_note("\"")->out_note(fuzzy_match)->out_note("\"")
            ->cancel_highlight_note()
            ->out_note("?")
            ->emit_err(call_loc);

        if (fuzzy_match_loc != nil) {
            self->endwith_enter = true;
            self->out_note("defined here")->emit_headless(fuzzy_match_loc);
        }
    }

    pub func report_non_static_method(self,
                                      call_loc: span*,
                                      data_struct_name: const i8*,
                                      method_name: const i8*,
                                      def_loc: span*) {
        self->endwith_enter = false;
        self->highlight()->out("\"")->out(data_struct_name)
            ->out("::")->out(method_name)->out("\"")
            ->cancel_highlight()
            ->out(" is not a static method")
            ->emit_err(call_loc);
        self->endwith_enter = true;
        self->out_note("defined here")->emit_headless(def_loc);
    }

    pub func report_wrong_arg_num(self,
                                  call_loc: span*,
                                  def_loc: span*,
                                  expect_num: u64,
                                  actual_num: u64) {
        self->endwith_enter = false;
        self->out("expect ")
            ->highlight()->out_u64(expect_num)->cancel_highlight()
            ->out(" argument(s), but get ")
            ->highlight()->out_u64(actual_num)->cancel_highlight()
            ->emit_err(call_loc);
        self->endwith_enter = true;
        self->out_note("function defined here")->emit_headless(def_loc);
    }

    pub func report_invalid_enum_value(self, loc: span*, value: const i8*) {
        self->out("enum member ")
            ->highlight()->out("\"")->out(value)->out("\"")->cancel_highlight()
            ->out(" cannot be specified with floating point number")
            ->emit_err(loc);
    }

    pub func report_name_shadowing(self,
                                   loc: span*,
                                   name: const i8*,
                                   shadowed_loc: span*) {
        self->endwith_enter = false;
        self->out("redefinition of variable ")
            ->highlight()->out("\"")->out(name)->out("\"")->cancel_highlight()
            ->emit_err(loc);
        self->endwith_enter = true;
        self->out_note("shadows previous definition here")
            ->emit_headless(shadowed_loc);
    }

    pub func report_unused_variable(self, loc: span*, name: const i8*) {
        self->out("unused variable ")
            ->highlight()->out("\"")->out(name)->out("\"")->cancel_highlight()
            ->emit_warn(loc);
    }
}