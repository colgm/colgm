use err::span::*;
use std::str::{ str };
use std::io::{ readfile_into_string, io, fs };
use std::libc::{ malloc, realloc, free, itoa, strlen };

struct file_lines {
    source: str*,
    size: i64,
    capacity: i64
}

impl file_lines {
    func init(self) {
        self->source = malloc((128 => u64)*str::__size__()) => str*;
        self->size = 0;
        self->capacity = 128;

        for (var index = 0; index < self->capacity; index += 1) {
            self->source[index].init();
        }
    }

    func delete(self) {
        for (var index = 0; index < self->size; index += 1) {
            self->source[index].delete();
        }
        free(self->source => i8*);
    }

    func clear(self) {
        for (var index = 0; index < self->size; index += 1) {
            self->source[index].clear();
        }
        self->size = 0;
    }

    func expand_capacity(self) {
        self->capacity *= 2;
        self->source = realloc(
            self->source => i8*,
            (self->capacity => u64)*str::__size__()
        ) => str*;
        for (var index = self->size; index < self->capacity; index += 1) {
            self->source[index].init();
        }
    }

    func push(self, line: str*) {
        if (self->size == self->capacity) {
            self->expand_capacity();
        }

        self->source[self->size].append_str(line);
        self->size += 1;
    }
}

struct report {
    filename: str,
    source: file_lines,
    error_count: i64
}

impl report {
    func new() -> report* {
        var res = report::__alloc__();
        res->filename.init();
        res->source.init();
        res->error_count = 0;
        return res;
    }

    func delete(self) {
        self->filename.delete();
        self->source.delete();
    }
}

impl report {
    func load_file_source(self, filename: i8*) {
        if (!fs::exists(filename)) {
            self->error_count += 1;
            io::stderr().red().out("Error: ").reset();
            io::stderr().out("failed to load file <").out(filename)
                        .out(">, check if it exists and is readable\n");
            return;
        }

        self->filename.clear();
        self->filename.append_i8_vec(filename);

        var source = str::new();
        readfile_into_string(filename, source);

        var tmp = str::new();
        for (var pos = 0 => u64; pos < source->size; pos += 1 => u64) {
            if (source->get(pos)=='\n') {
                self->source.push(tmp);
                tmp->clear();
                continue;
            }
            tmp->append_char(source->get(pos));
        }
        if (tmp->size > (0 => u64)) {
            self->source.push(tmp);
            tmp->clear();
        }

        source->delete();
        free(source => i8*);
        tmp->delete();
        free(tmp => i8*);
    }
}

impl report {
    func get_number_length(num: i64) -> i64 {
        if (num <= 0) {
            return 1;
        }
        var length = 0;
        while(num > 0) {
            num /= 10;
            length += 1;
        }
        return length;
    }

    func left_pad(padding: i64) -> str* {
        var res = str::new();
        while((res->size => i64) < padding) {
            res->append_char(' ');
        }
        return res;
    }

    func to_str(num: i64, padding: i64) -> str* {
        var tmp = malloc(256 => u64);
        itoa(num, tmp, 10);
        var res = str::new();
        for (var index = strlen(tmp); index < padding; index += 1) {
            res->append_char(' ');
        }
        res->append_i8_vec(tmp);
        free(tmp);
        return res;
    }

    func print_file_line(self, location: span*, is_error: bool) {
        var index = location->begin_line;
        var max_line_number_length = report::get_number_length(location->end_line + 1);
        var pad_str = report::left_pad(max_line_number_length);

        io::stderr().cyan().out(pad_str->c_str).out(" | ").reset().endln();

        while(index <= location->end_line && index < self->source.size) {
            var tmp_str_const = self->source.source[index].c_str;
            var len = strlen(tmp_str_const);
            var pad_num = report::to_str(index + 1, max_line_number_length);
            io::stderr().cyan().out(pad_num->c_str).out(" | ")
                        .reset().out(tmp_str_const).endln();

            var underline = str::new();
            if (index == location->begin_line) {
                for (var i = 0; i < len; i += 1) {
                    if (location->begin_line==location->end_line &&
                        i == location->end_column) {
                        break;
                    }
                    if (i < location->begin_column && tmp_str_const[i]!='\t') {
                        underline->append_char(' ');
                    }
                    if (i < location->begin_column && tmp_str_const[i]=='\t') {
                        underline->append_char('\t');
                    }
                    if (i >= location->begin_column && tmp_str_const[i]!='\t') {
                        underline->append_char('^');
                    }
                    if (i >= location->begin_column && tmp_str_const[i]=='\t') {
                        underline->append_i8_vec("^^^^");
                    }
                }
            } elsif (index == location->end_line) {
                for (var i = 0; i < len; i += 1) {
                    # in fact this should be unreachable
                    if (location->begin_line==location->end_line &&
                        i < location->begin_column) {
                        continue;
                    }
                    if (i < location->end_column && tmp_str_const[i]!='\t') {
                        underline->append_char('^');
                    }
                    if (i < location->end_column && tmp_str_const[i]=='\t') {
                        underline->append_i8_vec("^^^^");
                    }
                    if (i >= location->end_column && tmp_str_const[i]!='\t') {
                        underline->append_char(' ');
                    }
                    if (i >= location->end_column && tmp_str_const[i]=='\t') {
                        underline->append_char('\t');
                    }
                }
            } else {
                for (var i = 0; i < len; i += 1) {
                    if (tmp_str_const[i]=='\t') {
                        underline->append_i8_vec("^^^^");
                    } elsif (tmp_str_const[i]!='\r' && tmp_str_const[i]!='\n') {
                        underline->append_char('^');
                    }
                }
            }

            index += 1;
            
            if (is_error) {
                io::stderr().cyan().out(pad_str->c_str).out(" | ")
                            .red().out(underline->c_str)
                            .reset().endln();
            } else {
                io::stderr().cyan().out(pad_str->c_str).out(" | ")
                            .orange().out(underline->c_str)
                            .reset().endln();
            }

            underline->delete();
            free(underline => i8*);
            pad_num->delete();
            free(pad_num => i8*);
        }

        io::stderr().endln();

        pad_str->delete();
        free(pad_str => i8*);
    }
}

impl report {
    func error(self, location: span*, message: i8*) {
        if (!location->file.eq_const(self->filename.c_str)) {
            self->load_file_source(location->file.c_str);
        }
        self->error_count += 1;

        io::stderr().red().out("Error: ").reset();
        io::stderr().white().out(message).reset().endln();
        io::stderr().cyan().out("  --> ").red().out(location->file.c_str);
        io::stderr().out_ch(':').out_i64(location->begin_line + 1);
        io::stderr().out_ch(':').out_i64(location->begin_column + 1);
        io::stderr().reset().endln();
        self->print_file_line(location, true);
    }

    func warn(self, location: span*, message: i8*) {
        if (!location->file.eq_const(self->filename.c_str)) {
            self->load_file_source(location->file.c_str);
        }
        self->error_count += 1;

        io::stderr().orange().out("Warn: ").reset();
        io::stderr().white().out(message).reset().endln();
        io::stderr().cyan().out("  --> ").orange().out(location->file.c_str);
        io::stderr().out_ch(':').out_i64(location->begin_line + 1);
        io::stderr().out_ch(':').out_i64(location->begin_column + 1);
        io::stderr().reset().endln();
        self->print_file_line(location, false);
    }
}