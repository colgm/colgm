use std::str::str;
use std::io::io;

pub struct span {
    begin_line: i64,
    begin_column: i64,
    end_line: i64,
    end_column: i64,
    file: str
}

impl span {
    pub func instance() -> span {
        return span {
            begin_line: 0,
            begin_column: 0,
            end_line: 0,
            end_column: 0,
            file: str::instance()
        };
    }

    pub func null() -> span {
        return span {
            begin_line: 0,
            begin_column: 0,
            end_line: 0,
            end_column: 0,
            file: str::instance()
        };
    }

    pub func create_full(begin_line: i64,
                         begin_column: i64,
                         end_line: i64,
                         end_column: i64,
                         file: str*) -> span {
        return span {
            begin_line: begin_line,
            begin_column: begin_column,
            end_line: end_line,
            end_column: end_column,
            file: file->copy_instance()
        };
    }

    pub func copy_instance(self) -> span {
        return span {
            begin_line: self->begin_line,
            begin_column: self->begin_column,
            end_line: self->end_line,
            end_column: self->end_column,
            file: self->file.copy_instance()
        };
    }

    pub func delete(self) {
        self->file.delete();
    }

    pub func dump(self, out: io) {
        out.out(self->file.c_str)
           .out_ch(':').out_i64(self->begin_line + 1)
           .out_ch(':').out_i64(self->begin_column + 1)
           .endln();
    }

    pub func to_string(self) -> str {
        var res = self->file.copy_instance();
        res.append(":");
        res.append_i64(self->begin_line + 1);
        res.append(":");
        res.append_i64(self->begin_column + 1);
        return res;
    }
}