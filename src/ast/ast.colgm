use err::span::span;
use std::libc::free;

enum ast_kind {
    ast_null,
    ast_root,
    ast_unary_operator,
    ast_binary_operator,
    ast_type_convert,
    ast_identifier,
    ast_nil_literal,
    ast_number_literal,
    ast_string_literal,
    ast_char_literal,
    ast_bool_literal,
    ast_call_index,
    ast_call_func_args,
    ast_get_field,
    ast_ptr_get_field,
    ast_call_path,
    ast_call,
    ast_assignment,
    ast_type_def,
    ast_enum_decl,
    ast_struct_field,
    ast_struct_decl,
    ast_param,
    ast_param_list,
    ast_func_decl,
    ast_impl,
    ast_use_stmt,
    ast_definition,
    ast_cond_stmt,
    ast_if_stmt,
    ast_while_stmt,
    ast_in_stmt_expr,
    ast_ret_stmt,
    ast_continue_stmt,
    ast_break_stmt,
    ast_code_block
}

struct ast {
    kind: ast_kind,
    location: span*,
    size: i64,
    child: ast*
}

impl ast {
    func new(k: ast_kind, loc: span*) -> ast* {
        var res = ast::__alloc__();
        res->kind = k;
        res->location = loc;
        res->size = 0;
        res->child = nil => ast*;
        return res;
    }

    func delete(self: ast*) {
        self->location->delete();
        free(self->location => i8*);
        return;
    }
}