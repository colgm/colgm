use err::span::span;
use std::libc::free;

enum ast_kind {
    ast_null,
    ast_root,
    ast_unary_operator,
    ast_binary_operator,
    ast_type_convert,
    ast_identifier,
    ast_nil_literal,
    ast_number_literal,
    ast_string_literal,
    ast_char_literal,
    ast_bool_literal,
    ast_call_index,
    ast_call_func_args,
    ast_get_field,
    ast_ptr_get_field,
    ast_call_path,
    ast_call,
    ast_assignment,
    ast_type_def,
    ast_enum_decl,
    ast_struct_field,
    ast_struct_decl,
    ast_param,
    ast_param_list,
    ast_func_decl,
    ast_impl,
    ast_use_stmt,
    ast_definition,
    ast_cond_stmt,
    ast_if_stmt,
    ast_while_stmt,
    ast_in_stmt_expr,
    ast_ret_stmt,
    ast_continue_stmt,
    ast_break_stmt,
    ast_code_block
}

struct ast {
    kind: ast_kind,
    location: span*,
    union_data: i8*
}

struct vector_ast {
    data: ast**,
    size: u64,
    capacity: u64
}

struct ast_root {}

struct ast_unary_operator {}

struct ast_binary_operator {}

struct ast_type_convert {}

struct ast_identifier {}

struct ast_nil_literal {}

struct ast_number_literal {}

struct ast_string_literal {}

struct ast_char_literal {}

struct ast_bool_literal {}

struct ast_call_index {}

struct ast_call_func_args {}

struct ast_get_field {}

struct ast_ptr_get_field {}

struct ast_call_path {}

struct ast_call {}

struct ast_assignment {}

struct ast_type_def {}

struct ast_enum_decl {}

struct ast_struct_field {}

struct ast_struct_decl {}

struct ast_param {}

struct ast_param_list {}

struct ast_func_decl {}

struct ast_impl {}

struct ast_use_stmt {}

struct ast_definition {}

struct ast_cond_stmt {}

struct ast_if_stmt {}

struct ast_while_stmt {}

struct ast_in_stmt_expr {}

struct ast_ret_stmt {}

struct ast_continue_stmt {}

struct ast_break_stmt {}

struct ast_code_block {}

impl ast {
    func new(k: ast_kind, loc: span*) -> ast* {
        var res = ast::__alloc__();
        res->kind = k;
        res->location = loc;
        res->union_data = nil;
        return res;
    }

    func delete(self: ast*) {
        self->location->delete();
        free(self->location => i8*);
        return;
    }

    func get_kind(self: ast*) -> ast_kind {
        return self->kind;
    }
}
