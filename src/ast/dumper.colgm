use ast::ast::*;
use std::str::{ str };
use std::io::{ io };

use sema::type::{ type };
use package::{ package };

enum indent_state {
    indent_none,
    indent_middle,
    indent_bar,
    indent_end
}

pub struct ast_dumper {
    indent: str,
    pkg: package*
}

impl ast_dumper {
    func instance() -> ast_dumper {
        var res = ast_dumper {
            indent: str::instance(),
            pkg: nil
        };
        res.indent.clear();
        return res;
    }

    pub func delete(self) {
        self->indent.delete();
    }

    func indent_back(self) -> indent_state {
        var s = self->indent.size => i64;
        if (s == 0) {
            return indent_state::indent_none;
        }
        if (self->indent.c_str[s - 1] == '-' &&
            self->indent.c_str[s - 2] == '-' &&
            self->indent.c_str[s - 3] == '|') {
            return indent_state::indent_middle;
        }
        if (self->indent.c_str[s - 1] == ' ' &&
            self->indent.c_str[s - 2] == ' ' &&
            self->indent.c_str[s - 3] == '|') {
            return indent_state::indent_bar;
        }
        if (self->indent.c_str[s - 1] == '-' &&
            self->indent.c_str[s - 2] == '-' &&
            self->indent.c_str[s - 3] == '+') {
            return indent_state::indent_end;
        }
        return indent_state::indent_none;
    }

    func push_indent(self) {
        if (self->indent.size > 0) {
            var state = self->indent_back();
            match (state) {
                indent_state::indent_none => {}
                indent_state::indent_middle => {
                    self->indent.pop_back();
                    self->indent.pop_back();
                    self->indent.pop_back();
                    self->indent.append_i8_vec("|  ");
                }
                indent_state::indent_bar => {}
                indent_state::indent_end => {
                    self->indent.pop_back();
                    self->indent.pop_back();
                    self->indent.pop_back();
                    self->indent.append_i8_vec("   ");
                }
            }
        }
        self->indent.append_i8_vec("|--");
    }

    func set_last(self) {
        self->indent.pop_back();
        self->indent.pop_back();
        self->indent.pop_back();
        self->indent.append_i8_vec("+--");
    }

    func pop_indent(self) {
        self->indent.pop_back();
        self->indent.pop_back();
        self->indent.pop_back();
    }

    func dump_indent(self, out: io) {
        if (self->indent.size > 0 &&
            self->indent_back() == indent_state::indent_bar) {
            self->indent.pop_back();
            self->indent.pop_back();
            self->indent.pop_back();
            self->indent.append_i8_vec("|--");
        }
        out.out(self->indent.c_str);
    }

    func dump_resolved_type(self, out: io, ty: type*) {
        if (self->pkg == nil || ty == nil || ty->name.empty()) {
            return;
        }
        var name = ty->full_path_name(self->pkg, true);
        out.cyan().out("[type: ").out(name.c_str).out("] ").reset();
    }
}

impl ast_dumper {
    func llvm_visible_char(c: i8) -> bool {
        if ('0' <= c && c <= '9') {
            return true;
        }
        if ('a' <= c && c <= 'z') {
            return true;
        }
        if ('A' <= c && c <= 'Z') {
            return true;
        }
        if (c=='_' || c==':' || c==' ' || c==',' ||
            c=='[' || c==']' || c=='(' || c==')' ||
            c=='{' || c=='}' || c=='<' || c=='>' ||
            c=='.' || c==';' || c=='-' || c=='+' ||
            c=='*' || c=='/' || c=='~' || c=='?' ||
            c=='!' || c=='=' || c=='&' || c=='|' ||
            c=='%' || c=='^' || c=='@') {
            return true;
        }
        return false;
    }

    func llvm_raw_string(s: str) -> str {
        var num_chr_tbl = "0123456789abcdef";
        var res = str::instance();
        for (var i: u64 = 0; i < s.size; i += 1) {
            var tmp = s.c_str[i];
            if (ast_dumper::llvm_visible_char(tmp)) {
                res.append_char(tmp);
                continue;
            }
            res.append_char('\\');
            res.append_char(num_chr_tbl[((tmp => u8)/(16 => u8)) & (0xf => u8)]);
            res.append_char(num_chr_tbl[(tmp => u8) & (0xf => u8)]);
        }
        res.append_i8_vec("\\00");
        return res;
    }
}

impl ast_dumper {
    pub func dump(self, node: ast*, out: io) {
        match (node->kind) {
            ast_kind::ast_null => return;
            ast_kind::ast_root => self->dump_root(node => root*, out);
            ast_kind::ast_unary_operator =>
                self->dump_unary_operator(node => ast_unary_operator*, out);
            ast_kind::ast_binary_operator =>
                self->dump_binary_operator(node => ast_binary_operator*, out);
            ast_kind::ast_type_convert =>
                self->dump_type_convert(node => ast_type_convert*, out);
            ast_kind::ast_identifier =>
                self->dump_identifier(node => ast_identifier*, out);
            ast_kind::ast_nil_literal =>
                self->dump_nil_literal(node => ast_nil_literal*, out);
            ast_kind::ast_number_literal =>
                self->dump_number_literal(node => ast_number_literal*, out);
            ast_kind::ast_string_literal =>
                self->dump_string_literal(node => ast_string_literal*, out);
            ast_kind::ast_char_literal =>
                self->dump_char_literal(node => ast_char_literal*, out);
            ast_kind::ast_bool_literal =>
                self->dump_bool_literal(node => ast_bool_literal*, out);
            ast_kind::ast_array_literal =>
                self->dump_array_literal(node => ast_array_literal*, out);
            ast_kind::ast_call_index =>
                self->dump_call_index(node => ast_call_index*, out);
            ast_kind::ast_call_func_args =>
                self->dump_call_func_args(node => ast_call_func_args*, out);
            ast_kind::ast_get_field =>
                self->dump_get_field(node => ast_get_field*, out);
            ast_kind::ast_ptr_get_field =>
                self->dump_ptr_get_field(node => ast_ptr_get_field*, out);
            ast_kind::ast_init_pair =>
                self->dump_init_pair(node => ast_init_pair*, out);
            ast_kind::ast_initializer =>
                self->dump_initializer(node => ast_initializer*, out);
            ast_kind::ast_call_path =>
                self->dump_call_path(node => ast_call_path*, out);
            ast_kind::ast_call_id =>
                self->dump_call_id(node => ast_call_id*, out);
            ast_kind::ast_call => self->dump_call(node => ast_call*, out);
            ast_kind::ast_assignment =>
                self->dump_assignment(node => ast_assignment*, out);
            ast_kind::ast_cond_compile =>
                self->dump_cond_compile(node => ast_cond_compile*, out);
            ast_kind::ast_type_def =>
                self->dump_type_def(node => ast_type_def*, out);
            ast_kind::ast_generic_type_list =>
                self->dump_generic_type_list(node => ast_generic_type_list*, out);
            ast_kind::ast_enum_member =>
                self->dump_enum_member(node => ast_enum_member*, out);
            ast_kind::ast_enum_decl =>
                self->dump_enum_decl(node => ast_enum_decl*, out);
            ast_kind::ast_struct_field =>
                self->dump_struct_field(node => ast_struct_field*, out);
            ast_kind::ast_struct_decl =>
                self->dump_struct_decl(node => ast_struct_decl*, out);
            ast_kind::ast_param =>
                self->dump_param(node => ast_param*, out);
            ast_kind::ast_param_list =>
                self->dump_param_list(node => ast_param_list*, out);
            ast_kind::ast_func_decl => 
                self->dump_func_decl(node => ast_func_decl*, out);
            ast_kind::ast_impl =>
                self->dump_impl(node => ast_impl*, out);
            ast_kind::ast_use_stmt =>
                self->dump_use_stmt(node => ast_use_stmt*, out);
            ast_kind::ast_definition =>
                self->dump_definition(node => ast_definition*, out);
            ast_kind::ast_cond_stmt =>
                self->dump_cond_stmt(node => ast_cond_stmt*, out);
            ast_kind::ast_if_stmt =>
                self->dump_if_stmt(node => ast_if_stmt*, out);
            ast_kind::ast_match_case =>
                self->dump_match_case(node => ast_match_case*, out);
            ast_kind::ast_match_stmt =>
                self->dump_match_stmt(node => ast_match_stmt*, out);
            ast_kind::ast_while_stmt =>
                self->dump_while_stmt(node => ast_while_stmt*, out);
            ast_kind::ast_for_stmt =>
                self->dump_for_stmt(node => ast_for_stmt*, out);
            ast_kind::ast_forindex =>
                self->dump_forindex(node => ast_forindex*, out);
            ast_kind::ast_foreach =>
                self->dump_foreach(node => ast_foreach*, out);
            ast_kind::ast_in_stmt_expr =>
                self->dump_in_stmt_expr(node => ast_in_stmt_expr*, out);
            ast_kind::ast_ret_stmt =>
                self->dump_ret_stmt(node => ast_ret_stmt*, out);
            ast_kind::ast_continue_stmt =>
                self->dump_continue_stmt(node => ast_continue_stmt*, out);
            ast_kind::ast_break_stmt =>
                self->dump_break_stmt(node => ast_break_stmt*, out);
            ast_kind::ast_code_block =>
                self->dump_code_block(node => ast_code_block*, out);
        }
    }

    func dump_root(self, node: root*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("root -> ");
        node->base.location.dump(out);

        self->push_indent();
        for (var index: u64 = 0; index < node->imports.size; index += 1) {
            if (index == node->imports.size - 1 && node->decls.empty()) {
                self->set_last();
            }
            self->dump(node->imports.get(index).unwrap(), out);
        }
        for (var index: u64 = 0; index < node->decls.size; index += 1) {
            if (index == node->decls.size - 1) {
                self->set_last();
            }
            self->dump(node->decls.get(index).unwrap(), out);
        }
        self->pop_indent();
    }

    func dump_unary_operator(self, node: ast_unary_operator*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        self->dump_resolved_type(out, node->base.resolved_type.__ptr__());
        out.out("unary-operator ");
        match (node->kind) {
            unary_kind::neg => out.cyan().out("-").reset();
            unary_kind::bnot => out.cyan().out("~").reset();
            unary_kind::lnot => out.cyan().out("!").reset();
        }
        out.out(" -> ");
        node->base.location.dump(out);

        self->push_indent();
        self->set_last();
        self->dump(node->value, out);
        self->pop_indent();
    }

    func dump_binary_operator(self, node: ast_binary_operator*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        self->dump_resolved_type(out, node->base.resolved_type.__ptr__());
        out.out("binary-operator ");
        match (node->kind) {
            binary_kind::add => out.cyan().out("+").reset();
            binary_kind::sub => out.cyan().out("-").reset();
            binary_kind::mul => out.cyan().out("*").reset();
            binary_kind::div => out.cyan().out("/").reset();
            binary_kind::rem => out.cyan().out("%").reset();
            binary_kind::cmpeq => out.cyan().out("==").reset();
            binary_kind::cmpne => out.cyan().out("!=").reset();
            binary_kind::less => out.cyan().out("<").reset();
            binary_kind::leq => out.cyan().out("<=").reset();
            binary_kind::grt => out.cyan().out(">").reset();
            binary_kind::geq => out.cyan().out(">=").reset();
            binary_kind::cmpand => out.cyan().out("&&").reset();
            binary_kind::cmpor => out.cyan().out("||").reset();
            binary_kind::band => out.cyan().out("&").reset();
            binary_kind::bor => out.cyan().out("|").reset();
            binary_kind::bxor => out.cyan().out("^").reset();
        }
        out.out(" -> ");
        node->base.location.dump(out);

        self->push_indent();
        self->dump(node->left, out);
        self->set_last();
        self->dump(node->right, out);
        self->pop_indent();
    }

    func dump_type_convert(self, node: ast_type_convert*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        self->dump_resolved_type(out, node->base.resolved_type.__ptr__());
        out.out("type-convert -> ");
        node->base.location.dump(out);

        self->push_indent();
        self->dump(node->from, out);
        self->set_last();
        self->dump_type_def(node->to, out);
        self->pop_indent();
    }

    func dump_identifier(self, node: ast_identifier*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        self->dump_resolved_type(out, node->base.resolved_type.__ptr__());
        out.out("identifier ")
           .green().out(node->content.c_str).reset()
           .out(" -> ");
        node->base.location.dump(out);
    }

    func dump_nil_literal(self, node: ast_nil_literal*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        self->dump_resolved_type(out, node->base.resolved_type.__ptr__());
        out.out("nil-literal ")
           .orange().out("nil").reset().out(" -> ");
        node->base.location.dump(out);
    }

    func dump_number_literal(self, node: ast_number_literal*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        self->dump_resolved_type(out, node->base.resolved_type.__ptr__());
        out.out("number-literal ")
           .orange().out(node->literal.c_str).reset().out(" -> ");
        node->base.location.dump(out);
    }

    func dump_string_literal(self, node: ast_string_literal*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        self->dump_resolved_type(out, node->base.resolved_type.__ptr__());
        var tmp = ast_dumper::llvm_raw_string(node->literal);
        out.out("string-literal ")
           .orange().out("\"").out(tmp.c_str).out("\"").reset().out(" -> ");
        tmp.delete();
        node->base.location.dump(out);
    }

    func dump_char_literal(self, node: ast_char_literal*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        self->dump_resolved_type(out, node->base.resolved_type.__ptr__());
        var tmp = ast_dumper::llvm_raw_string(node->literal);
        out.out("char-literal: ")
           .orange().out("\"").out(tmp.c_str).out("\"").reset().out(" -> ");
        tmp.delete();
        node->base.location.dump(out);
    }

    func dump_bool_literal(self, node: ast_bool_literal*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        self->dump_resolved_type(out, node->base.resolved_type.__ptr__());
        out.out("bool-literal ");
        if (node->flag) {
            out.orange().out("true").reset();
        } else {
            out.orange().out("false").reset();
        }
        out.out(" -> ");
        node->base.location.dump(out);
    }

    func dump_array_literal(self, node: ast_array_literal*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        self->dump_resolved_type(out, node->base.resolved_type.__ptr__());
        out.out("array-literal -> ");
        node->base.location.dump(out);

        self->push_indent();
        self->dump_number_literal(node->size, out);
        self->set_last();
        self->dump_type_def(node->type, out);
        self->pop_indent();
    }

    func dump_call_index(self, node: ast_call_index*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        self->dump_resolved_type(out, node->base.resolved_type.__ptr__());
        out.out("call-index -> ");
        node->base.location.dump(out);
        self->push_indent();
        self->set_last();
        self->dump(node->index, out);
        self->pop_indent();
    }

    func dump_call_func_args(self, node: ast_call_func_args*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        self->dump_resolved_type(out, node->base.resolved_type.__ptr__());
        out.out("call-func-args -> ");
        node->base.location.dump(out);

        self->push_indent();
        for (var index: u64 = 0; index < node->args.size; index += 1) {
            if (index == node->args.size - 1) {
                self->set_last();
            }
            self->dump(node->args.get(index).unwrap(), out);
        }
        self->pop_indent();
    }

    func dump_get_field(self, node: ast_get_field*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        self->dump_resolved_type(out, node->base.resolved_type.__ptr__());
        out.out("get-field ")
           .green().out(node->name.c_str).reset().out(" -> ");
        node->base.location.dump(out);
    }

    func dump_ptr_get_field(self, node: ast_ptr_get_field*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        self->dump_resolved_type(out, node->base.resolved_type.__ptr__());
        out.out("ptr-get-field ")
           .green().out(node->name.c_str).reset().out(" -> ");
        node->base.location.dump(out);
    }

    func dump_init_pair(self, node: ast_init_pair*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        self->dump_resolved_type(out, node->base.resolved_type.__ptr__());
        out.out("init-pair ");
        out.green().out(node->field->content.c_str).reset();
        out.out(" -> ");
        node->base.location.dump(out);

        self->push_indent();
        self->set_last();
        self->dump(node->value, out);
        self->pop_indent();
    }

    func dump_initializer(self, node: ast_initializer*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        self->dump_resolved_type(out, node->base.resolved_type.__ptr__());
        out.out("initializer -> ");
        node->base.location.dump(out);

        self->push_indent();
        for (var index: u64 = 0; index < node->pairs.size; index += 1) {
            if (index == node->pairs.size - 1) {
                self->set_last();
            }
            self->dump(node->pairs.get(index).unwrap(), out);
        }
        self->pop_indent();
    }

    func dump_call_path(self, node: ast_call_path*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        self->dump_resolved_type(out, node->base.resolved_type.__ptr__());
        out.out("call-path ")
           .green().out(node->name.c_str).reset()
           .out(" -> ");
        node->base.location.dump(out);
    }

    func dump_call_id(self, node: ast_call_id*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        self->dump_resolved_type(out, node->base.resolved_type.__ptr__());
        out.out("call-id ");
        out.green().out(node->id->content.c_str).reset().out(" ");
        node->base.location.dump(out);

        if (node->generic_types != nil) {
            self->push_indent();
            self->set_last();
            self->dump_generic_type_list(node->generic_types, out);
            self->pop_indent();
        }
    }

    func dump_call(self, node: ast_call*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        self->dump_resolved_type(out, node->base.resolved_type.__ptr__());
        out.out("call -> ");
        node->base.location.dump(out);

        self->push_indent();
        if (node->head != nil) {
            if (node->chain.empty()) {
                self->set_last();
            }
            self->dump_call_id(node->head, out);
        }
        for (var index: u64 = 0; index < node->chain.size; index += 1) {
            if (index == node->chain.size - 1) {
                self->set_last();
            }
            self->dump(node->chain.get(index).unwrap(), out);
        }
        self->pop_indent();
    }

    func dump_assignment(self, node: ast_assignment*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        self->dump_resolved_type(out, node->base.resolved_type.__ptr__());
        out.out("assignment ");
        match (node->kind) {
            assignment_kind::eq => out.cyan().out("=").reset();
            assignment_kind::addeq => out.cyan().out("+=").reset();
            assignment_kind::subeq => out.cyan().out("-=").reset();
            assignment_kind::muleq => out.cyan().out("*=").reset();
            assignment_kind::diveq => out.cyan().out("/=").reset();
            assignment_kind::remeq => out.cyan().out("%=").reset();
            assignment_kind::andeq => out.cyan().out("&=").reset();
            assignment_kind::xoreq => out.cyan().out("^=").reset();
            assignment_kind::oreq => out.cyan().out("|=").reset();
        }
        out.out(" -> ");
        node->base.location.dump(out);

        self->push_indent();
        self->dump_call(node->left, out);
        self->set_last();
        self->dump(node->right, out);
        self->pop_indent();
    }

    func dump_cond_compile(self, node: ast_cond_compile*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("cond-compile ");
        out.out(node->cond_name.c_str).out(" -> ");
        node->base.location.dump(out);

        self->push_indent();
        var count: u64 = 0;
        foreach (var i; node->conds) {
            if (count == node->conds.size - 1 && node->enabled_decl == nil) {
                self->set_last();
            }
            self->dump_indent(out);
            out.out(i.key()->c_str).out(": ").out(i.value()->c_str).out("\n");
            count += 1;
        }
        if (node->enabled_decl != nil) {
            self->set_last();
            self->dump(node->enabled_decl, out);
        }
        self->pop_indent();
    }

    func dump_type_def(self, node: ast_type_def*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("type ");
        if (!node->is_const) {
            out.cyan().out("[mut]").reset();
        } else {
            out.cyan().out("[const]").reset();
        }
        out.cyan().out("[ptr-depth=").out_i64(node->pointer_depth).out("] ").reset();
        out.green().out(node->name->content.c_str).reset().out(" -> ");
        node->base.location.dump(out);

        if (node->generic_types != nil) {
            self->push_indent();
            self->set_last();
            self->dump_generic_type_list(node->generic_types, out);
            self->pop_indent();
        }
    }

    func dump_generic_type_list(self, node: ast_generic_type_list*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("generic-types -> ");
        node->base.location.dump(out);

        self->push_indent();
        for (var index: u64 = 0; index < node->types.size; index += 1) {
            if (index == node->types.size - 1) {
                self->set_last();
            }
            self->dump(node->types.get(index).unwrap(), out);
        }
        self->pop_indent();
    }

    func dump_enum_member(self, node: ast_enum_member*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("enum-member ");
        out.green().out(node->name->content.c_str).reset();
        out.out(" -> ");
        node->base.location.dump(out);

        if (node->value != nil) {
            self->push_indent();
            self->set_last();
            self->dump_number_literal(node->value, out);
            self->pop_indent();
        }
    }

    func dump_enum_decl(self, node: ast_enum_decl*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("enum ");
        if (node->is_public) {
            out.cyan().out("[pub] ").reset();
        }
        out.green().out(node->name.c_str).reset().out(" -> ");
        node->base.location.dump(out);

        self->push_indent();
        for (var index: u64 = 0; index < node->members.size; index += 1) {
            if (index == node->members.size - 1) {
                self->set_last();
            }
            self->dump(node->members.get(index).unwrap(), out);
        }
        self->pop_indent();
    }

    func dump_struct_field(self, node: ast_struct_field*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("field ");
        out.green().out(node->name->content.c_str).reset();
        out.out(" -> ");
        node->base.location.dump(out);

        self->push_indent();
        self->set_last();
        self->dump_type_def(node->type, out);
        self->pop_indent();
    }

    func dump_struct_decl(self, node: ast_struct_decl*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("struct ");
        if (node->is_public) {
            out.cyan().out("[pub]").reset();
        }
        if (node->is_extern) {
            out.cyan().out("[extern]").reset();
        }
        if (node->is_public || node->is_extern) {
            out.out(" ");
        }
        out.green().out(node->name.c_str).reset();
        out.out(" -> ");
        node->base.location.dump(out);

        self->push_indent();
        if (node->generic_types != nil) {
            if (node->fields.empty()) {
                self->set_last();
            }
            self->dump_generic_type_list(node->generic_types, out);
        }
        for (var index: u64 = 0; index < node->fields.size; index += 1) {
            if (index == node->fields.size - 1) {
                self->set_last();
            }
            self->dump(node->fields.get(index).unwrap(), out);
        }
        self->pop_indent();
    }

    func dump_param(self, node: ast_param*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("param ");
        out.green().out(node->name->content.c_str).reset();
        out.out(" -> ");
        node->base.location.dump(out);

        if (node->type != nil) {
            self->push_indent();
            self->set_last();
            self->dump_type_def(node->type, out);
            self->pop_indent();
        }
    }

    func dump_param_list(self, node: ast_param_list*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("param-list -> ");
        node->base.location.dump(out);

        self->push_indent();
        for (var index: u64 = 0; index < node->params.size; index += 1) {
            if (index == node->params.size - 1) {
                self->set_last();
            }
            self->dump(node->params.get(index).unwrap(), out);
        }
        self->pop_indent();
    }

    func dump_func_decl(self, node: ast_func_decl*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("func ");
        if (node->is_public) {
            out.cyan().out("[pub]").reset();
        }
        if (node->is_extern) {
            out.cyan().out("[extern]").reset();
        }
        if (node->is_public || node->is_extern) {
            out.out(" ");
        }
        out.green().out(node->name.c_str).reset().out(" -> ");
        node->base.location.dump(out);

        self->push_indent();
        if (node->generic_types != nil) {
            self->dump_generic_type_list(node->generic_types, out);
        }
        if (node->return_type == nil &&
            node->body == nil) {
            self->set_last();
        }
        self->dump_param_list(node->params, out);
        if (node->return_type != nil) {
            if (node->body == nil) {
                self->set_last();
            }
            self->dump_type_def(node->return_type, out);
        }
        if (node->body != nil) {
            self->set_last();
            self->dump_code_block(node->body, out);
        }
        self->pop_indent();
    }

    func dump_impl(self, node: ast_impl*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("impl [").out(node->name.c_str).out("] -> ");
        node->base.location.dump(out);

        self->push_indent();
        if (node->generic_types != nil) {
            if (node->methods.empty()) {
                self->set_last();
            }
            self->dump_generic_type_list(node->generic_types, out);
        }
        for (var index: u64 = 0; index < node->methods.size; index += 1) {
            if (index == node->methods.size - 1) {
                self->set_last();
            }
            self->dump(node->methods.get(index).unwrap(), out);
        }
        self->pop_indent();
    }

    func dump_use_stmt(self, node: ast_use_stmt*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("use -> ");
        node->base.location.dump(out);

        self->push_indent();

        self->dump_indent(out);
        out.out("module\n");
        self->push_indent();
        for (var index: u64 = 0; index < node->module_path.size; index += 1) {
            if (index == node->module_path.size - 1) {
                self->set_last();
            }
            self->dump(node->module_path.get(index).unwrap(), out);
        }
        self->pop_indent();

        if (node->import_symbol.empty()) {
            self->set_last();
            self->dump_indent(out);
            out.out("import-all\n");
        } else {
            self->set_last();
            self->dump_indent(out);
            out.out("import-specified\n");
            self->push_indent();
            for (var index: u64 = 0; index < node->import_symbol.size; index += 1) {
                if (index == node->import_symbol.size - 1) {
                    self->set_last();
                }
                self->dump(node->import_symbol.get(index).unwrap(), out);
            }
            self->pop_indent();
        }

        self->pop_indent();
    }

    func dump_definition(self, node: ast_definition*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("definition ")
           .green().out(node->name.c_str).reset().out(" -> ");
        node->base.location.dump(out);

        self->push_indent();
        if (node->type != nil) {
            self->dump_type_def(node->type, out);
        }
        self->set_last();
        self->dump(node->value, out);
        self->pop_indent();
    }

    func dump_cond_stmt(self, node: ast_cond_stmt*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("cond-stmt -> ");
        node->base.location.dump(out);

        self->push_indent();
        for (var index: u64 = 0; index < node->stmts.size; index += 1) {
            if (index == node->stmts.size - 1) {
                self->set_last();
            }
            self->dump(node->stmts.get(index).unwrap(), out);
        }
        self->pop_indent();
    }

    func dump_if_stmt(self, node: ast_if_stmt*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("if -> ");
        node->base.location.dump(out);

        self->push_indent();
        if (node->condition != nil) {
            self->dump(node->condition, out);
        }
        self->set_last();
        self->dump_code_block(node->body, out);
        self->pop_indent();
    }

    func dump_match_case(self, node: ast_match_case*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("match-case -> ");
        node->base.location.dump(out);

        self->push_indent();
        self->dump_call(node->pattern, out);
        self->set_last();
        self->dump_code_block(node->body, out);
        self->pop_indent();
    }

    func dump_match_stmt(self, node: ast_match_stmt*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("match -> ");
        node->base.location.dump(out);

        self->push_indent();
        self->dump(node->value, out);
        for (var index: u64 = 0; index < node->cases.size; index += 1) {
            if (index == node->cases.size - 1) {
                self->set_last();
            }
            self->dump(node->cases.get(index).unwrap(), out);
        }
        self->pop_indent();
    }

    func dump_while_stmt(self, node: ast_while_stmt*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("while -> ");
        node->base.location.dump(out);

        self->push_indent();
        self->dump(node->condition, out);
        self->set_last();
        self->dump_code_block(node->body, out);
        self->pop_indent();
    }

    func dump_for_stmt(self, node: ast_for_stmt*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("for -> ");
        node->base.location.dump(out);

        self->push_indent();
        if (node->init != nil) {
            self->dump_definition(node->init, out);
        }
        if (node->condition != nil) {
            self->dump(node->condition, out);
        }
        if (node->update != nil) {
            self->dump(node->update, out);
        }
        self->set_last();
        self->dump_code_block(node->body, out);
        self->pop_indent();
    }

    func dump_forindex(self, node: ast_forindex*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("forindex -> ");
        node->base.location.dump(out);

        self->push_indent();
        if (node->variable != nil) {
            self->dump_identifier(node->variable, out);
        }
        if (node->container != nil) {
            self->dump_call(node->container, out);
        }
        self->set_last();
        self->dump_code_block(node->body, out);
        self->pop_indent();
    }

    func dump_foreach(self, node: ast_foreach*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("foreach -> ");
        node->base.location.dump(out);

        self->push_indent();
        if (node->variable != nil) {
            self->dump_identifier(node->variable, out);
        }
        if (node->container != nil) {
            self->dump_call(node->container, out);
        }
        self->set_last();
        self->dump_code_block(node->body, out);
        self->pop_indent();
    }

    func dump_in_stmt_expr(self, node: ast_in_stmt_expr*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("in-stmt-expr -> ");
        node->base.location.dump(out);

        self->push_indent();
        self->set_last();
        self->dump(node->value, out);
        self->pop_indent();
    }

    func dump_ret_stmt(self, node: ast_ret_stmt*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("ret -> ");
        node->base.location.dump(out);

        if (node->value != nil) {
            self->push_indent();
            self->set_last();
            self->dump(node->value, out);
            self->pop_indent();
        }
    }

    func dump_continue_stmt(self, node: ast_continue_stmt*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("continue -> ");
        node->base.location.dump(out);
    }

    func dump_break_stmt(self, node: ast_break_stmt*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("break -> ");
        node->base.location.dump(out);
    }

    func dump_code_block(self, node: ast_code_block*, out: io) {
        self->dump_indent(out);
        out.out("[0x").out_hex(node => i64).out("] ");
        out.out("code-block -> ");
        node->base.location.dump(out);

        self->push_indent();
        for (var index: u64 = 0; index < node->stmts.size; index += 1) {
            if (index == node->stmts.size - 1) {
                self->set_last();
            }
            self->dump(node->stmts.get(index).unwrap(), out);
        }
        self->pop_indent();
    }
}