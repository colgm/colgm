use std::str::str;
use std::libc::{ malloc, free, streq, putchar, itoa };
use err::span::*;
use err::report::*;
use ast::ast::*;
use cli::*;
use std::io::{readfile_into_string, io};

use lexer::{ lexer };

func test_report(rep: report*, filename: i8*) {
    var sp = span::new();
    sp->file.copy_const(filename);
    sp->begin_line = 1;
    sp->begin_column = 6;
    sp->end_line = 5;
    sp->end_column = 8;
    rep->error(sp, "colgm error test, ignore it.");
    rep->warn(sp, "colgm warning test, ignore it.");
    sp->delete();
    free(sp => i8*);
    return;
}

func compile(filename: i8*, library_path: i8*, option: cli_option*) {
    io::stdlog()->out("[colgm] source file: \"")
                ->out(filename)
                ->out("\"")
                ->endln();
    if (library_path!=nil) {
        io::stdlog()->out("[colgm] library path: \"")
                    ->out(library_path)
                    ->out("\"")
                    ->endln();
    } else {
        io::stdlog()->out("[colgm] library path: <none>")->endln();
    }

    var rep = report::new();
    var lex = lexer::new(rep);

    # do lexer scanning
    lex->scan(filename);
    if (option->OPTION_VIEW_TOKEN) {
        lex->dump();
    }

    lex->delete();
    free(lex => i8*);

    test_report(rep, filename);
    return;
}

func main(argc: i32, argv: i8**) -> i32 {
    if (argc==(1 => i32)) {
        logo();
        return 0 => i32;
    }

    if (argc==(2 => i32) && (streq(argv[1], "-h") || streq(argv[1], "--help"))) {
        help();
        return 0 => i32;
    }
    if (argc==(2 => i32) && (streq(argv[1], "-v") || streq(argv[1], "--version"))) {
        io::stdlog()->out(version())->endln();
        return 0 => i32;
    }

    var i = 1 => i32;
    var filename = nil;
    var library_path = nil;
    var option = cli_option::new();
    while(i < argc) {
        if (streq(argv[i], "-l") || streq(argv[i], "--lex")) {
            option->OPTION_VIEW_TOKEN = true;
        } elsif (streq(argv[i], "-a") || streq(argv[i], "--ast")) {
            option->OPTION_VIEW_AST = true;
        } elsif (streq(argv[i], "-s") || streq(argv[i], "--sema")) {
            option->OPTION_VIEW_SEMA = true;
        } elsif (streq(argv[i], "-L") || streq(argv[i], "--library")) {
            library_path = argv[i + (1 => i32)];
            i += 1 => i32;
        } elsif (streq(argv[i], "--dump-lib")) {
            option->OPTION_VIEW_LIB = true;
        } elsif (streq(argv[i], "--mir")) {
            option->OPTION_VIEW_MIR = true;
        } elsif (streq(argv[i], "--sir")) {
            option->OPTION_VIEW_SIR = true;
        } elsif (argv[i][0]=='-') {
            io::stderr()->out("invalid argument: ")->out(argv[i])->endln();
            return (-1) => i32;
        } else {
            filename = argv[i];
        }
        i += 1 => i32;
    }

    if (filename == nil) {
        io::stderr()->out("no source file specified")->endln();
        return (-1) => i32;
    }

    compile(filename, library_path, option);
    free(option => i8*);
    return 0 => i32;
}
