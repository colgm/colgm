use std::str::str;
use std::libc::{ malloc, streq, print, println };
use err::span::span;
use ast::ast::*;
use cli::*;
use std::io::readfile;

func test_string() {
    var s = str::new();
    s->copy_const("for test, first self-host compiler");
    println(s->c_str);
    s->delete();
    return;
}

func main(argc: i32, argv: i8**) -> i32 {
    test_string();


    if (argc==i64::i32(1)) {
        logo();
        return i64::i32(0);
    }
    if (argc==i64::i32(2) && (streq(argv[1], "-h") || streq(argv[1], "--help"))) {
        help();
        return i64::i32(0);
    }
    if (argc==i64::i32(2) && (streq(argv[1], "-v") || streq(argv[1], "--version"))) {
        println(version());
        return i64::i32(0);
    }
    var i = i64::i32(1);
    while(i < argc) {
        if (streq(argv[i], "-l") || streq(argv[i], "--lex")) {
            println("unimplemented");
        } elsif (streq(argv[i], "-a") || streq(argv[i], "--ast")) {
            println("unimplemented");
        } elsif (streq(argv[i], "-s") || streq(argv[i], "--sema")) {
            println("unimplemented");
        } elsif (streq(argv[i], "-i") || streq(argv[i], "--ir")) {
            println("unimplemented");
        } elsif (streq(argv[i], "-L") || streq(argv[i], "--library")) {
            println("unimplemented");
        } elsif (streq(argv[i], "--dump-lib")) {
            println("unimplemented");
        } elsif (streq(argv[i], "-Wt")) {
            println("unimplemented");
        } elsif (argv[i][0]=='-') {
            print("invalid argument: ");
            println(argv[i]);
            return i64::i32(0-1);
        } else {
            readfile(argv[i]);
        }
        i += i64::i32(1);
    }

    return i64::i32(0);
}