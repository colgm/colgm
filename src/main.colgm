use std::libc::{ streq, strlen, free };
use std::io::{ readfile_into_string, io };
use std::fs::{ fs };

use util::cli::*;
use util::frontend::{ frontend };

use sema::context::{ global_symbol_table, sema_context };
use sema::regist::{ regist_pass };
use sema::sema::{ sema };

func compile(option: cli_option) {
    var err = io::stderr();
    if (!fs::exists(option.input_file)) {
        err.red().out("Error: ").reset();
        err.out("failed to load file <").out(option.input_file);
        err.out(">, check if exists and is readable\n");
        return;
    }
    if (fs::is_dir(option.input_file)) {
        err.red().out("Error: ").reset();
        err.out("failed to load file <").out(option.input_file);
        err.out(">, this is a directory\n");
        return;
    }
    if (option.library_path != nil && !fs::is_dir(option.library_path)) {
        err.red().out("Error: ").reset();
        err.out("failed to load library path <").out(option.library_path);
        err.out(">, check if exists and is directory\n");
        return;
    }

    var cc = frontend::instance(option.__ptr__());
    var gt = global_symbol_table::new();
    var ctx = sema_context::instance(gt);
    var regpass = regist_pass::new(cc.err, cc.pkg, ctx.__ptr__(), cc.copt);
    var semantic = sema::new(cc.err, cc.pkg, ctx.__ptr__(), cc.copt);

    cc.pkg->library_path.clear();
    cc.pkg->library_path.append_i8_vec(option.library_path);

    // do lexer scanning
    cc.lex->scan(option.input_file);
    if (cc.err->error_count > 0) {
        var COLGM_REPORT = io::colgm_report();
        cc.lex->dump(COLGM_REPORT);
        COLGM_REPORT.close();

        cc.delete();
        return;
    }
    if (option.OPTION_VIEW_TOKEN) {
        cc.lex->dump(io::stdout());
    }

    cc.par->parse();
    if (cc.err->error_count > 0) {
        var COLGM_REPORT = io::colgm_report();
        cc.par->dump(COLGM_REPORT);
        COLGM_REPORT.close();

        cc.delete();
        return;
    }
    if (option.OPTION_VIEW_AST) {
        cc.par->dump(io::stdout());
    }

    regpass->run(cc.par->root);
    if (cc.err->error_count > 0) {
        cc.delete();
        return;
    }

    semantic->analyse(cc.par->root);
    if (cc.err->error_count > 0) {
        cc.delete();
        var COLGM_REPORT = io::colgm_report();
        semantic->ctx->dump(COLGM_REPORT, cc.pkg);
        COLGM_REPORT.close();
        return;
    }
    if (option.OPTION_VIEW_SEMA) {
        semantic->ctx->dump(io::stdout(), cc.pkg);
    }

    cc.delete();

    gt->delete();
    ctx.delete();
    regpass->delete();
    semantic->delete();
    free(gt => i8*);
    free(regpass => i8*);
    free(semantic => i8*);
}

func main(argc: i32, argv: i8**) -> i32 {
    if (argc == 1) {
        logo(argv[0]);
        return 0;
    }

    if (argc == 2 && (streq(argv[1], "-h") || streq(argv[1], "--help"))) {
        help();
        return 0;
    }
    if (argc == 2 && (streq(argv[1], "-v") || streq(argv[1], "--version"))) {
        print_version();
        return 0;
    }

    var option = cli_option::instance();
    for(var i: i32 = 1; i < argc; i += 1) {
        if (streq(argv[i], "-h") || streq(argv[i], "--help")) {
            help();
            return 0;
        } elsif (streq(argv[i], "-v") || streq(argv[i], "--version")) {
            print_version();
            return 0;
        } elsif (streq(argv[i], "-l") || streq(argv[i], "--lex")) {
            option.OPTION_VIEW_TOKEN = true;
        } elsif (streq(argv[i], "-a") || streq(argv[i], "--ast")) {
            option.OPTION_VIEW_AST = true;
        } elsif (streq(argv[i], "-s") || streq(argv[i], "--sema")) {
            option.OPTION_VIEW_SEMA = true;
        } elsif (streq(argv[i], "--library")) {
            if (i + 1 >= argc) {
                report_missing_given_info("library path");
            }
            if (option.library_path != nil) {
                report_multiple_given_info("library path");
            }
            option.library_path = argv[i + 1];
            if (strlen(option.library_path) == 0 || option.library_path[0] == '-') {
                report_invalid_given_info("library path", option.library_path);
            }
            i += 1;
        } elsif (streq(argv[i], "-o") || streq(argv[i], "--output")) {
            if (i + 1 >= argc) {
                report_missing_given_info("output file");
            }
            if (option.output_file != nil) {
                report_multiple_given_info("output file");
            }
            option.output_file = argv[i + 1];
            if (strlen(option.output_file) == 0 || option.output_file[0] == '-') {
                report_invalid_given_info("output file", option.output_file);
            }
            i += 1;
        } elsif (streq(argv[i], "--arch")) {
            if (i + 1 >= argc) {
                report_missing_given_info("arch");
            }
            if (option.arch != nil) {
                report_multiple_given_info("arch");
            }
            option.arch = argv[i + 1];
            if (strlen(option.arch) == 0 || option.arch[0] == '-') {
                report_invalid_given_info("arch", option.arch);
            }
            i += 1;
        } elsif (streq(argv[i], "--platform")) {
            if (i + 1 >= argc) {
                report_missing_given_info("platform");
            }
            if (option.platform != nil) {
                report_multiple_given_info("platform");
            }
            option.platform = argv[i + 1];
            if (strlen(option.platform) == 0 || option.platform[0] == '-') {
                report_invalid_given_info("platform", option.platform);
            }
            i += 1;
        } elsif (streq(argv[i], "--dump-lib")) {
            option.OPTION_VIEW_LIB = true;
        } elsif (streq(argv[i], "--pass-info")) {
            option.OPTION_VIEW_PASS = true;
        } elsif (streq(argv[i], "--mir")) {
            option.OPTION_VIEW_MIR = true;
        } elsif (streq(argv[i], "--sir")) {
            option.OPTION_VIEW_SIR = true;
        } elsif (argv[i][0]=='-') {
            report_invalid_argument(argv[i]);
        } else if (option.input_file == nil) {
            option.input_file = argv[i];
        } else {
            report_invalid_argument(argv[i]);
        }
    }

    if (option.input_file == nil) {
        io::stderr().red().out("Error:").reset()
                    .out(" no source file specified").endln();
        return -1;
    }
    if (option.output_file == nil) {
        option.output_file = "out.ll";
    }
    if (option.library_path == nil) {
        option.library_path = ".";
    }

    compile(option);
    return 0;
}
