use std::str::str;
use std::libc::{ malloc, streq, print, println };
use err::span::span;
use ast::ast::*;
use cli::*;
use std::io::readfile_into_string;

use lexer::lexer;

func test_string_module() {
    var s = str::new();
    s->copy_const("for test, first self-host compiler");
    s->append_char('!');
    println(s->c_str);
    s->delete();
    return;
}

func compile(filename: i8*) {
    var lex = lexer::__alloc__();

    var source = str::new();
    readfile_into_string(filename, source);
    print(source->c_str);

    return;
}

func main(argc: i32, argv: i8**) -> i32 {
    test_string_module();

    if (argc==(1 => i32)) {
        logo();
        return 0 => i32;
    }
    if (argc==(2 => i32) && (streq(argv[1], "-h") || streq(argv[1], "--help"))) {
        help();
        return 0 => i32;
    }
    if (argc==(2 => i32) && (streq(argv[1], "-v") || streq(argv[1], "--version"))) {
        println(version());
        return 0 => i32;
    }
    var i = 1 => i32;
    var filename = nil;
    while(i < argc) {
        if (streq(argv[i], "-l") || streq(argv[i], "--lex")) {
            println("unimplemented");
        } elsif (streq(argv[i], "-a") || streq(argv[i], "--ast")) {
            println("unimplemented");
        } elsif (streq(argv[i], "-s") || streq(argv[i], "--sema")) {
            println("unimplemented");
        } elsif (streq(argv[i], "-i") || streq(argv[i], "--ir")) {
            println("unimplemented");
        } elsif (streq(argv[i], "-L") || streq(argv[i], "--library")) {
            println("unimplemented");
        } elsif (streq(argv[i], "--dump-lib")) {
            println("unimplemented");
        } elsif (streq(argv[i], "-Wt")) {
            println("unimplemented");
        } elsif (argv[i][0]=='-') {
            print("invalid argument: ");
            println(argv[i]);
            return (0-1) => i32;
        } else {
            filename = argv[i];
        }
        i += 1 => i32;
    }

    compile(filename);

    return 0 => i32;
}
