use std::libc::{ streq, strlen, system };
use std::io::{ io };
use std::fs::{ fs };
use std::str::{ str };

use util::cli::*;
use util::frontend::{ frontend };
use util::clang_finder::{ find_clang };
use util::timestamp::{ maketimestamp };

use sema::context::{ global_symbol_table, sema_context };
use sema::regist::{ regist_pass };
use sema::sema::{ sema };

use mir::mir::*;
use mir::context::{ mir_context };
use mir::ast2mir::{ ast2mir };

use sir::sir::*;
use sir::context::{ sir_context };
use sir::mir2sir::{ mir2sir };

func clang_compile(co: cli_option*) -> i32 {
    if (co->EMIT_LLVM_ONLY) {
        io::stdout().green().out("[    CLANG ] ").reset();
        io::stdout().out("Compilation disabled by option\n");
        return 0;
    }

    var t_stamp = maketimestamp();
    t_stamp.stamp();

    var clang = find_clang();
    defer clang.delete();

    if (clang.empty()) {
        io::stdout().red().out("[    CLANG ] ").reset();
        io::stdout().out("Cannot find suitable clang\n");
        return -1;
    } else if (co->VERBOSE) {
        io::stdout().green().out("[    CLANG ] ").reset();
        io::stdout().out("Find clang ");
        io::stdout().light_cyan().out("<").out(clang.c_str).out("> ").reset();
        io::stdout().out_f64(t_stamp.elapsed_msec()).out(" ms\n");
    }

    var cmd = clang.copy_instance();
    defer cmd.delete();

    var ll_file = str::from(co->output_file);
    ll_file.append(".ll");
    defer ll_file.delete();

    if (!fs::exists(ll_file.c_str)) {
        return -1;
    }

    cmd.append(" ")->append(co->get_opt_level())->append(" ");
    cmd.append(ll_file.c_str);
    if (co->DEBUG_MODE) {
        cmd.append(" -g");
    }
    cmd.append(" -o ");
    cmd.append(co->output_file);
    cmd.append(" -rdynamic -lm");
    if (co->VERBOSE) {
        io::stdout().green().out("[    CLANG ] ").reset();
        io::stdout().out("Executing ");
        io::stdout().light_cyan().out("\"").out(cmd.c_str).out("\"\n").reset();
    } else {
        io::stdout().green().out("[    CLANG ] ").reset();
        io::stdout().out("Compiling...\r");
    }

    t_stamp.stamp();
    var ret_code = system(cmd.c_str);
    if (ret_code == 0) {
        io::stdout().green().out("[    CLANG ] ").reset();
        io::stdout().out("Compilation ").light_cyan().out("succeeded ").reset();
    } else {
        io::stdout().red().out("[    CLANG ] ").reset();
        io::stdout().out("Compilation ").light_red().out("failed ").reset();
    }
    io::stdout().out_f64(t_stamp.elapsed_msec()).out(" ms\n");

    return ret_code;
}

func compile(option: cli_option) -> i32 {
    var err = io::stderr();
    if (!fs::exists(option.input_file)) {
        err.red().out("Error: ").reset();
        err.out("failed to load file <").out(option.input_file);
        err.out(">, check if exists and is readable\n");
        return -1;
    }
    if (fs::is_dir(option.input_file)) {
        err.red().out("Error: ").reset();
        err.out("failed to load file <").out(option.input_file);
        err.out(">, this is a directory\n");
        return -1;
    }
    if (option.library_path != nil && !fs::is_dir(option.library_path)) {
        err.red().out("Error: ").reset();
        err.out("failed to load library path <").out(option.library_path);
        err.out(">, check if exists and is directory\n");
        return -1;
    }

    var cwd = fs::getcwd();
    defer cwd.delete();
    if (!cwd.empty()) {
        io::stdout().green().out("[    COLGM ] ").reset();
        io::stdout().out("In directory ");
        io::stdout().light_cyan().out("<").out(cwd.c_str).out(">").reset().endln();
    }

    var cc = frontend::instance(option.__ptr__());
    defer cc.delete();

    // global symbol table
    var gt = global_symbol_table::instance();
    gt.main_input_file.append(option.input_file);
    defer gt.delete();

    // semantic context
    var ctx = sema_context::instance(gt.__ptr__());
    defer ctx.delete();

    // mir context
    var mctx = mir_context::instance();
    defer mctx.delete();

    // sir context
    var sctx = sir_context::instance(cc.pkg.__ptr__());
    defer sctx.delete();

    var regpass = regist_pass::instance(
        cc.err,
        cc.pkg.__ptr__(),
        ctx.__ptr__(),
        cc.copt,
        mctx.__ptr__()
    );
    defer regpass.delete();

    var semantic = sema::instance(
        cc.err,
        cc.pkg.__ptr__(),
        ctx.__ptr__(),
        cc.copt
    );
    defer semantic.delete();

    var ast2mir_worker = ast2mir::instance(
        cc.err,
        ctx.__ptr__(),
        cc.pkg.__ptr__(),
        mctx.__ptr__()
    );
    defer ast2mir_worker.delete();

    var mir2sir_worker = mir2sir::instance(
        ctx.__ptr__(),
        sctx.__ptr__(),
        cc.pkg.__ptr__(),
        cc.err
    );
    defer mir2sir_worker.delete();

    cc.pkg.library_path.clear();
    cc.pkg.library_path.append(option.library_path);

    var t_stamp = maketimestamp();

    // do lexer scanning
    t_stamp.stamp();
    cc.lex.scan(option.input_file);
    if (option.VERBOSE) {
        io::stdout().green().out("[    LEXER ] ").reset();
        io::stdout().out("Scan token ");
        io::stdout().out_f64(t_stamp.elapsed_msec()).out(" ms\n");
    }

    if (cc.err->error_count > 0) {
        if (option.VERBOSE) {
            cc.lex.log_dump();
        }
        return -1;
    }
    if (option.VIEW_TOKEN) {
        cc.lex.dump(io::stdout());
    }

    t_stamp.stamp();
    cc.par.parse(cc.lex.__ptr__());
    if (option.VERBOSE) {
        io::stdout().green().out("[   PARSER ] ").reset();
        io::stdout().out("Parse syntax ");
        io::stdout().out_f64(t_stamp.elapsed_msec()).out(" ms\n");
    }

    if (cc.err->error_count > 0) {
        if (option.VERBOSE) {
            cc.par.log_dump();
        }
        return -1;
    }
    if (option.VIEW_AST) {
        cc.par.dump(io::stdout());
    }

    t_stamp.stamp();
    regpass.run(cc.par.root);
    if (cc.err->error_count > 0) {
        return -1;
    }

    semantic.analyse(cc.par.root);
    io::stdout().green().out("[ SEMANTIC ] ").reset();
    io::stdout().out("Finish module ");
    io::stdout().light_cyan().out("<").out(option.input_file).out("> ").reset();
    io::stdout().out_f64(t_stamp.elapsed_msec()).out(" ms\n");

    if (cc.err->error_count > 0) {
        if (option.VERBOSE) {
            semantic.ctx->log_dump(cc.pkg.__ptr__());
        }
        return -1;
    }
    if (option.VIEW_RESOLVED_AST) {
        semantic.view_resolved_ast(io::stdout());
    }
    if (option.VIEW_SEMA) {
        semantic.ctx->dump(io::stdout(), cc.pkg.__ptr__());
    }

    ast2mir_worker.generate(cc.par.root);
    if (cc.err->error_count > 0) {
        return -1;
    }
    mctx.adjust_posix_open(option.VERBOSE);
    mctx.add_default_func(option.VERBOSE);
    if (option.VIEW_MIR) {
        mctx.dump(io::stdout(), cc.pkg.__ptr__());
    }

    mir2sir_worker.generate(mctx.__ptr__(), option.VERBOSE, option.DEBUG_MODE);
    if (option.VIEW_SIR) {
        sctx.dump(io::stdout());
    }
    if (cc.err->error_count > 0) {
        return -1;
    }

    var ll_file = str::from(option.output_file);
    ll_file.append(".ll");
    defer ll_file.delete();

    var file_output = io::fileout(ll_file.c_str);
    if (option.VERBOSE) {
        io::stdout().green().out("[ SIR-PASS ] ").reset();
        io::stdout().out("Generating ");
        io::stdout().light_cyan().out("<").out(option.output_file).out(".ll> ").reset();
    }
    t_stamp.stamp();
    sctx.dump(file_output);
    file_output.close();
    if (option.VERBOSE) {
        io::stdout().out_f64(t_stamp.elapsed_msec()).out(" ms\n");
    }

    return clang_compile(option.__ptr__());
}

func main(argc: i32, argv: i8**) -> i32 {
    if (argc == 1) {
        logo(argv[0]);
        return 0;
    }

    if (argc == 2 && (streq(argv[1], "-h") || streq(argv[1], "--help"))) {
        help();
        return 0;
    }
    if (argc == 2 && (streq(argv[1], "-v") || streq(argv[1], "--version"))) {
        print_version();
        return 0;
    }

    var option = cli_option::instance();
    for (var i: i32 = 1; i < argc; i += 1) {
        if (streq(argv[i], "-h") || streq(argv[i], "--help")) {
            help();
            return 0;
        } elsif (streq(argv[i], "-v") || streq(argv[i], "--version")) {
            print_version();
            return 0;
        } elsif (streq(argv[i], "-l") || streq(argv[i], "--lex")) {
            option.VIEW_TOKEN = true;
        } elsif (streq(argv[i], "-a") || streq(argv[i], "--ast")) {
            option.VIEW_AST = true;
        } elsif (streq(argv[i], "-s") || streq(argv[i], "--sema")) {
            option.VIEW_SEMA = true;
        } elsif (streq(argv[i], "-V") || streq(argv[i], "--verbose")) {
            option.VERBOSE = true;
        } elsif (streq(argv[i], "-g") || streq(argv[i], "--debug")) {
            option.DEBUG_MODE = true;
        } elsif (streq(argv[i], "-L") || streq(argv[i], "--library")) {
            if (i + 1 >= argc) {
                report_missing_given_info("library path");
            }
            if (option.library_path != nil) {
                report_multiple_given_info("library path");
            }
            option.library_path = argv[i + 1];
            if (strlen(option.library_path) == 0 || option.library_path[0] == '-') {
                report_invalid_given_info("library path", option.library_path);
            }
            i += 1;
        } elsif (streq(argv[i], "-o") || streq(argv[i], "--output")) {
            if (i + 1 >= argc) {
                report_missing_given_info("output file");
            }
            if (option.output_file != nil) {
                report_multiple_given_info("output file");
            }
            option.output_file = argv[i + 1];
            if (strlen(option.output_file) == 0 || option.output_file[0] == '-') {
                report_invalid_given_info("output file", option.output_file);
            }
            i += 1;
        } elsif (streq(argv[i], "--arch")) {
            if (i + 1 >= argc) {
                report_missing_given_info("arch");
            }
            if (option.arch != nil) {
                report_multiple_given_info("arch");
            }
            option.arch = argv[i + 1];
            if (strlen(option.arch) == 0 || option.arch[0] == '-') {
                report_invalid_given_info("arch", option.arch);
            }
            i += 1;
        } elsif (streq(argv[i], "--platform")) {
            if (i + 1 >= argc) {
                report_missing_given_info("platform");
            }
            if (option.platform != nil) {
                report_multiple_given_info("platform");
            }
            option.platform = argv[i + 1];
            if (strlen(option.platform) == 0 || option.platform[0] == '-') {
                report_invalid_given_info("platform", option.platform);
            }
            i += 1;
        } elsif (streq(argv[i], "--view-resolved-ast")) {
            option.VIEW_RESOLVED_AST = true;
        } elsif (streq(argv[i], "--view-type-replace")) {
            option.VIEW_TYPE_REPLACE_INFO = true;
        } elsif (streq(argv[i], "--mir")) {
            option.VIEW_MIR = true;
        } elsif (streq(argv[i], "--sir")) {
            option.VIEW_SIR = true;
        } elsif (streq(argv[i], "--emit-llvm")) {
            option.EMIT_LLVM_ONLY = true;
        } elsif (streq(argv[i], "-O0") ||
                 streq(argv[i], "-O1") ||
                 streq(argv[i], "-O2") ||
                 streq(argv[i], "-O3") ||
                 streq(argv[i], "-Oz") ||
                 streq(argv[i], "-Os")) {
            option.set_opt_level(argv[i]);
        } elsif (argv[i][0]=='-') {
            report_invalid_argument(argv[i]);
        } else if (option.input_file == nil) {
            option.input_file = argv[i];
        } else {
            report_invalid_argument(argv[i]);
        }
    }

    if (option.input_file == nil) {
        io::stderr().red().out("Error:").reset()
                    .out(" no source file specified").endln();
        return -1;
    }

    // set default output file
    if (option.output_file == nil) {
        option.output_file = "a.out";
    }
    // set default library path
    if (option.library_path == nil) {
        option.library_path = ".";
    }

    // clang may return 256 if error ocurred
    // when cast to u8, this may return 0, so we check the return code
    if (compile(option) != 0) {
        return -1;
    }
    return 0;
}
