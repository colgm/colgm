use std::libc::{ streq, strlen, free, system };
use std::io::{ readfile_into_string, io };
use std::fs::{ fs };

use util::cli::*;
use util::frontend::{ frontend };
use util::clang_finder::{ find_clang };

use sema::context::{ global_symbol_table, sema_context };
use sema::regist::{ regist_pass };
use sema::sema::{ sema };

use mir::mir::*;
use mir::context::{ mir_context };
use mir::ast2mir::{ ast2mir };

use sir::sir::*;
use sir::context::{ sir_context };
use sir::mir2sir::{ mir2sir };

func clang_compile(co: cli_option*) -> i32 {
    var clang = find_clang();
    if (clang.empty()) {
        clang.delete();
        io::stdout().red().out("  [clang] ").reset();
        io::stdout().out("cannot find suitable clang\n");
        return -1;
    } else if (co->VERBOSE) {
        io::stdout().green().out("  [clang] ").reset();
        io::stdout().out("<").out(clang.c_str).out("> found\n");
    }

    var cmd = clang.copy_instance();
    if (!fs::exists("out.self_host.ll")) {
        clang.delete();
        cmd.delete();
        return -1;
    }

    cmd.append_i8_vec(" -Oz out.self_host.ll -o a.out -rdynamic -lm");
    if (co->VERBOSE) {
        io::stdout().green().out("  [clang] ").reset();
        io::stdout().out("executing \"").out(cmd.c_str).out("\"\n");
    }
    var ret_code = system(cmd.c_str);
    if (ret_code == 0) {
        io::stdout().green().out("  [clang] ").reset();
        io::stdout().out("compilation succeeded\n");
    } else {
        io::stdout().red().out("  [clang] ").reset();
        io::stdout().out("compilation failed\n");
    }

    clang.delete();
    cmd.delete();
    return ret_code;
}

func compile(option: cli_option) -> i32 {
    var err = io::stderr();
    if (!fs::exists(option.input_file)) {
        err.red().out("Error: ").reset();
        err.out("failed to load file <").out(option.input_file);
        err.out(">, check if exists and is readable\n");
        return -1;
    }
    if (fs::is_dir(option.input_file)) {
        err.red().out("Error: ").reset();
        err.out("failed to load file <").out(option.input_file);
        err.out(">, this is a directory\n");
        return -1;
    }
    if (option.library_path != nil && !fs::is_dir(option.library_path)) {
        err.red().out("Error: ").reset();
        err.out("failed to load library path <").out(option.library_path);
        err.out(">, check if exists and is directory\n");
        return -1;
    }

    var cc = frontend::instance(option.__ptr__());
    var gt = global_symbol_table::instance();
    var ctx = sema_context::instance(gt.__ptr__());
    var mctx = mir_context::instance();
    var sctx = sir_context::instance(cc.pkg);
    var regpass = regist_pass::instance(cc.err, cc.pkg, ctx.__ptr__(), cc.copt, mctx.__ptr__());
    var semantic = sema::instance(cc.err, cc.pkg, ctx.__ptr__(), cc.copt);
    var ast2mir_worker = ast2mir::instance(
        cc.err,
        ctx.__ptr__(),
        cc.pkg,
        mctx.__ptr__()
    );
    var mir2sir_worder = mir2sir::instance(
        ctx.__ptr__(),
        sctx.__ptr__(),
        cc.pkg
    );

    cc.pkg->library_path.clear();
    cc.pkg->library_path.append_i8_vec(option.library_path);

    // do lexer scanning
    if (option.VERBOSE) {
        io::stdout().green().out("  [lexer] ").reset();
        io::stdout().out("scanning tokens").endln();
    }
    cc.lex->scan(option.input_file);
    if (cc.err->error_count > 0) {
        if (option.VERBOSE) {
            cc.lex->log_dump();
        }
        cc.delete();
        return -1;
    }
    if (option.OPTION_VIEW_TOKEN) {
        cc.lex->dump(io::stdout());
    }

    if (option.VERBOSE) {
        io::stdout().green().out("  [parse] ").reset();
        io::stdout().out("parsing").endln();
    }
    cc.par.parse();
    if (cc.err->error_count > 0) {
        if (option.VERBOSE) {
            cc.par.log_dump();
        }
        cc.delete();
        return -1;
    }
    if (option.OPTION_VIEW_AST) {
        cc.par.dump(io::stdout());
    }

    if (option.VERBOSE) {
        io::stdout().green().out("  [sema] ").reset();
        io::stdout().out("scanning symbols").endln();
    }
    regpass.run(cc.par.root);
    if (cc.err->error_count > 0) {
        cc.delete();
        return -1;
    }

    if (option.VERBOSE) {
        io::stdout().green().out("  [sema] ").reset();
        io::stdout().out("analysing").endln();
    }
    semantic.analyse(cc.par.root);
    if (cc.err->error_count > 0) {
        if (option.VERBOSE) {
            semantic.ctx->log_dump(cc.pkg);
        }
        cc.delete();
        return -1;
    }
    if (option.VIEW_RESOLVED_AST) {
        semantic.view_resolved_ast(io::stdout());
    }
    if (option.OPTION_VIEW_SEMA) {
        semantic.ctx->dump(io::stdout(), cc.pkg);
    }
    io::stdout().green().out("  [sema] ").reset();
    io::stdout().out("finish analysing process").endln();

    if (option.VERBOSE) {
        io::stdout().green().out("  [ast2mir] ").reset();
        io::stdout().out("translating ast to mir").endln();
    }
    ast2mir_worker.generate(cc.par.root);
    mctx.adjust_posix_open();
    mctx.add_default_func();
    if (option.OPTION_VIEW_MIR) {
        mctx.dump(io::stdout(), cc.pkg);
    }

    if (option.VERBOSE) {
        io::stdout().green().out("  [mir2sir] ").reset();
        io::stdout().out("translating mir to sir").endln();
    }
    mir2sir_worder.generate(mctx.__ptr__());
    if (option.OPTION_VIEW_SIR) {
        sctx.dump(io::stdout());
    }

    var file_output = io::fileout("out.self_host.ll");
    if (option.VERBOSE) {
        io::stdout().green().out("  [sir] ").reset();
        io::stdout().out("generating \"out.self_host.ll\"").endln();
    }
    sctx.dump(file_output);
    file_output.close();

    var ret_code = clang_compile(option.__ptr__());

    cc.delete();
    gt.delete();
    ctx.delete();
    regpass.delete();
    semantic.delete();
    mctx.delete();
    sctx.delete();
    ast2mir_worker.delete();
    mir2sir_worder.delete();
    return ret_code;
}

func main(argc: i32, argv: i8**) -> i32 {
    if (argc == 1) {
        logo(argv[0]);
        return 0;
    }

    if (argc == 2 && (streq(argv[1], "-h") || streq(argv[1], "--help"))) {
        help();
        return 0;
    }
    if (argc == 2 && (streq(argv[1], "-v") || streq(argv[1], "--version"))) {
        print_version();
        return 0;
    }

    var option = cli_option::instance();
    for(var i: i32 = 1; i < argc; i += 1) {
        if (streq(argv[i], "-h") || streq(argv[i], "--help")) {
            help();
            return 0;
        } elsif (streq(argv[i], "-v") || streq(argv[i], "--version")) {
            print_version();
            return 0;
        } elsif (streq(argv[i], "-l") || streq(argv[i], "--lex")) {
            option.OPTION_VIEW_TOKEN = true;
        } elsif (streq(argv[i], "-a") || streq(argv[i], "--ast")) {
            option.OPTION_VIEW_AST = true;
        } elsif (streq(argv[i], "-s") || streq(argv[i], "--sema")) {
            option.OPTION_VIEW_SEMA = true;
        } elsif (streq(argv[i], "-V") || streq(argv[i], "--verbose")) {
            option.VERBOSE = true;
        } elsif (streq(argv[i], "--library")) {
            if (i + 1 >= argc) {
                report_missing_given_info("library path");
            }
            if (option.library_path != nil) {
                report_multiple_given_info("library path");
            }
            option.library_path = argv[i + 1];
            if (strlen(option.library_path) == 0 || option.library_path[0] == '-') {
                report_invalid_given_info("library path", option.library_path);
            }
            i += 1;
        } elsif (streq(argv[i], "-o") || streq(argv[i], "--output")) {
            if (i + 1 >= argc) {
                report_missing_given_info("output file");
            }
            if (option.output_file != nil) {
                report_multiple_given_info("output file");
            }
            option.output_file = argv[i + 1];
            if (strlen(option.output_file) == 0 || option.output_file[0] == '-') {
                report_invalid_given_info("output file", option.output_file);
            }
            i += 1;
        } elsif (streq(argv[i], "--arch")) {
            if (i + 1 >= argc) {
                report_missing_given_info("arch");
            }
            if (option.arch != nil) {
                report_multiple_given_info("arch");
            }
            option.arch = argv[i + 1];
            if (strlen(option.arch) == 0 || option.arch[0] == '-') {
                report_invalid_given_info("arch", option.arch);
            }
            i += 1;
        } elsif (streq(argv[i], "--platform")) {
            if (i + 1 >= argc) {
                report_missing_given_info("platform");
            }
            if (option.platform != nil) {
                report_multiple_given_info("platform");
            }
            option.platform = argv[i + 1];
            if (strlen(option.platform) == 0 || option.platform[0] == '-') {
                report_invalid_given_info("platform", option.platform);
            }
            i += 1;
        } elsif (streq(argv[i], "--dump-lib")) {
            option.OPTION_VIEW_LIB = true;
        } elsif (streq(argv[i], "--pass-info")) {
            option.OPTION_VIEW_PASS = true;
        } elsif (streq(argv[i], "--view-resolved-ast")) {
            option.VIEW_RESOLVED_AST = true;
        } elsif (streq(argv[i], "--enable-type-replace-info")) {
            option.VIEW_TYPE_REPLACE_INFO = true;
        } elsif (streq(argv[i], "--mir")) {
            option.OPTION_VIEW_MIR = true;
        } elsif (streq(argv[i], "--sir")) {
            option.OPTION_VIEW_SIR = true;
        } elsif (argv[i][0]=='-') {
            report_invalid_argument(argv[i]);
        } else if (option.input_file == nil) {
            option.input_file = argv[i];
        } else {
            report_invalid_argument(argv[i]);
        }
    }

    if (option.input_file == nil) {
        io::stderr().red().out("Error:").reset()
                    .out(" no source file specified").endln();
        return -1;
    }
    if (option.output_file == nil) {
        option.output_file = "out.ll";
    }
    if (option.library_path == nil) {
        option.library_path = ".";
    }

    return compile(option);
}
