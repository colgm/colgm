use std::libc::{ streq, strlen };
use err::span::*;
use util::cli::*;
use std::io::{ readfile_into_string, io };
use std::fs::{ fs };
use compiler::{ compiler };

func compile(option: cli_option) {
    var err = io::stderr();
    if (!fs::exists(option.input_file)) {
        err.red().out("Error: ").reset();
        err.out("failed to load file <").out(option.input_file);
        err.out(">, check if exists and is readable\n");
        return;
    }
    if (fs::is_dir(option.input_file)) {
        err.red().out("Error: ").reset();
        err.out("failed to load file <").out(option.input_file);
        err.out(">, this is a directory\n");
        return;
    }
    if (option.library_path != nil && !fs::is_dir(option.library_path)) {
        err.red().out("Error: ").reset();
        err.out("failed to load library path <").out(option.library_path);
        err.out(">, check if exists and is directory\n");
        return;
    }

    var cc = compiler::instance();
    cc.pkg->library_path = option.library_path;

    // do lexer scanning
    cc.lex->scan(option.input_file);
    if (cc.rep->error_count > 0) {
        cc.delete();
        return;
    }
    if (option.OPTION_VIEW_TOKEN) {
        cc.lex->dump();
    }

    cc.par->parse();
    if (cc.rep->error_count > 0) {
        cc.delete();
        return;
    }
    if (option.OPTION_VIEW_AST) {
        cc.par->dump();
    }

    cc.sema->scan(cc.par->root);
    if (cc.rep->error_count > 0) {
        cc.delete();
        return;
    }

    cc.delete();
}

func main(argc: i32, argv: i8**) -> i32 {
    if (argc==(1 => i32)) {
        logo(argv[0]);
        return 0 => i32;
    }

    if (argc==(2 => i32) && (streq(argv[1], "-h") || streq(argv[1], "--help"))) {
        help();
        return 0 => i32;
    }
    if (argc==(2 => i32) && (streq(argv[1], "-v") || streq(argv[1], "--version"))) {
        print_version();
        return 0 => i32;
    }

    var option = cli_option::instance();
    for(var i = 1 => i32; i < argc; i += 1 => i32) {
        if (streq(argv[i], "-l") || streq(argv[i], "--lex")) {
            option.OPTION_VIEW_TOKEN = true;
        } elsif (streq(argv[i], "-a") || streq(argv[i], "--ast")) {
            option.OPTION_VIEW_AST = true;
        } elsif (streq(argv[i], "-s") || streq(argv[i], "--sema")) {
            option.OPTION_VIEW_SEMA = true;
        } elsif (streq(argv[i], "--library")) {
            if (i + (1 => i32) >= argc) {
                report_missing_given_info("library path");
            }
            if (option.library_path != nil) {
                report_multiple_given_info("library path");
            }
            option.library_path = argv[i + (1 => i32)];
            if (strlen(option.library_path)==0 || option.library_path[0]=='-') {
                report_invalid_given_info("library path", option.library_path);
            }
            i += 1 => i32;
        } elsif (streq(argv[i], "-o") || streq(argv[i], "--output")) {
            if (i + (1 => i32) >= argc) {
                report_missing_given_info("output file");
            }
            if (option.output_file != nil) {
                report_multiple_given_info("output file");
            }
            option.output_file = argv[i + (1 => i32)];
            if (strlen(option.output_file)==0 || option.output_file[0]=='-') {
                report_invalid_given_info("output file", option.output_file);
            }
            i += 1 => i32;
        } elsif (streq(argv[i], "--dump-lib")) {
            option.OPTION_VIEW_LIB = true;
        } elsif (streq(argv[i], "--mir")) {
            option.OPTION_VIEW_MIR = true;
        } elsif (streq(argv[i], "--sir")) {
            option.OPTION_VIEW_SIR = true;
        } elsif (argv[i][0]=='-') {
            report_invalid_argument(argv[i]);
        } else if (option.input_file == nil) {
            option.input_file = argv[i];
        } else {
            report_invalid_argument(argv[i]);
        }
    }

    if (option.input_file == nil) {
        io::stderr().red().out("Error:").reset()
                    .out(" no source file specified").endln();
        return (-1) => i32;
    }
    if (option.output_file == nil) {
        option.output_file = "out.ll";
    }
    if (option.library_path == nil) {
        option.library_path = ".";
    }

    compile(option);
    return 0 => i32;
}
