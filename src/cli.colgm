use std::libc::puts;

struct cli_option {
    OPTION_VIEW_TOKEN: bool,
    OPTION_VIEW_AST: bool,
    OPTION_VIEW_LIB: bool,
    OPTION_VIEW_SEMA: bool,
    OPTION_VIEW_SIR: bool,
    OPTION_VIEW_MIR: bool
}

impl cli_option {
    func new() -> cli_option* {
        var res = cli_option::__alloc__();
        res->OPTION_VIEW_TOKEN = false;
        res->OPTION_VIEW_AST = false;
        res->OPTION_VIEW_LIB = false;
        res->OPTION_VIEW_SEMA = false;
        res->OPTION_VIEW_SIR = false;
        res->OPTION_VIEW_MIR = false;
        return res;
    }
}

func help() {
    puts("\ncolgm <option>");
    puts("option:");
    puts("   -h,   --help           | get help.");
    puts("   -v,   --version        | get version.");
    puts("\ncolgm [option] <file>");
    puts("option:");
    puts("   -l,   --lex            | view analysed tokens.");
    puts("   -a,   --ast            | view ast.");
    puts("   -s,   --sema           | view semantic result.");
    puts("         --mir            | view mir.");
    puts("         --sir            | view sir.");
    puts("   -L,   --library <path> | add library path.");
    puts("         --dump-lib       | view libraries.");
    puts("file:");
    puts("   <filename>             | input file.");
    puts("");
    return;
}

func logo() {
    puts("                __              ");
    puts("    _________  / /___ _____ ___ ");
    puts("   / ___/ __ \\/ / __ `/ __ `__ \\");
    puts("  / /__/ /_/ / / /_/ / / / / / /");
    puts("  \\___/\\____/_/\\__, /_/ /_/ /_/ ");
    puts("              /____/            \n");
    puts(version());
    puts("");
    puts("input <colgm -h> to get help .\n");
    return;
}

func version() -> i8* {
    return "colgm compiler version 0.2";
}