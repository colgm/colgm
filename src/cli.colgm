use std::io::{ io };

struct cli_option {
    OPTION_VIEW_TOKEN: bool,
    OPTION_VIEW_AST: bool,
    OPTION_VIEW_LIB: bool,
    OPTION_VIEW_SEMA: bool,
    OPTION_VIEW_SIR: bool,
    OPTION_VIEW_MIR: bool
}

impl cli_option {
    func new() -> cli_option* {
        var res = cli_option::__alloc__();
        res->OPTION_VIEW_TOKEN = false;
        res->OPTION_VIEW_AST = false;
        res->OPTION_VIEW_LIB = false;
        res->OPTION_VIEW_SEMA = false;
        res->OPTION_VIEW_SIR = false;
        res->OPTION_VIEW_MIR = false;
        return res;
    }
}

func version() -> i8* {
    return "colgm compiler version 0.2";
}

func help() {
    io::stdout()
        .out("\ncolgm <option>\n")
        .out("option:\n")
        .out("   -h,   --help           | get help.\n")
        .out("   -v,   --version        | get version.\n")
        .out("\ncolgm [option] <file>\n")
        .out("option:\n")
        .out("   -l,   --lex            | view analysed tokens.\n")
        .out("   -a,   --ast            | view ast.\n")
        .out("   -s,   --sema           | view semantic result.\n")
        .out("         --mir            | view mir.\n")
        .out("         --sir            | view sir.\n")
        .out("   -L,   --library <path> | add library path.\n")
        .out("         --dump-lib       | view libraries.\n")
        .out("file:\n")
        .out("   <filename>             | input file.\n")
        .endln();
}

func logo() {
    io::stdout()
        .green()
        .out("                __              \n")
        .out("    _________  / /___ _____ ___ \n")
        .out("   / ___/ __ \\/ / __ `/ __ `__ \\\n")
        .out("  / /__/ /_/ / / /_/ / / / / / /\n")
        .out("  \\___/\\____/_/\\__, /_/ /_/ /_/ \n")
        .out("              /____/            \n\n")
        .reset()
        .out("ver  : ").out(version()).out("\n")
        .out("repo : https://github.com/colgm/colgm\n\n")
        .out("input <colgm -h> to get help.\n\n");
}
