use std::str::{ str };

use err::panic::{ panic };

pub enum symbol_kind {
    error_kind,
    basic_kind,
    enum_kind,
    struct_kind,
    func_kind,
    package_kind,
    module_kind
}

pub struct symbol_info {
    kind: symbol_kind,
    loc_file: str,
    is_public: bool
}

impl symbol_info {
    pub func instance(k: symbol_kind, f: i8*, p: bool) -> symbol_info {
        return symbol_info {
            kind: k,
            loc_file: str::from(f),
            is_public: p
        };
    }

    pub func delete(self) {
        self->loc_file.delete();
    }

    pub func copy(self) -> symbol_info* {
        var res = symbol_info::__alloc__();
        if (res == nil) {
            panic("failed to allocate memory");
        }
        res->kind = self->kind;
        res->loc_file = self->loc_file.copy_instance();
        res->is_public = self->is_public;
        return res;
    }

    pub func copy_instance(self) -> symbol_info {
        return symbol_info {
            kind: self->kind,
            loc_file: self->loc_file.copy_instance(),
            is_public: self->is_public
        };
    }
}