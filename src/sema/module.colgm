use std::str::{ str };
use std::map::{ hashmap };
use std::io::{ io };

use err::panic::{ panic };
use util::package::{ package };

use sema::function::{ colgm_func };
use sema::structure::{ colgm_struct };
use sema::enumerate::{ colgm_enum };
use sema::symbol_info::{ symbol_info };

pub struct colgm_module {
    file_name: str,
    enums: hashmap<str, colgm_enum>,
    structs: hashmap<str, colgm_struct>,
    functions: hashmap<str, colgm_func>,
    generic_structs: hashmap<str, colgm_struct>,
    generic_functions: hashmap<str, colgm_func>,

    // store global symbols used in current scope
    // both normal and generic symbols are stored
    // so if want to check if symbol exists, it's enough to just use this
    global_symbol: hashmap<str, symbol_info>,

    // only store generics in current scope
    // for type resolver to check if a symbol is generic
    generic_symbol: hashmap<str, symbol_info>
}

impl colgm_module {
    pub func instance() -> colgm_module {
        return colgm_module {
            file_name: str::instance(),
            enums: hashmap<str, colgm_enum>::instance(),
            structs: hashmap<str, colgm_struct>::instance(),
            functions: hashmap<str, colgm_func>::instance(),
            generic_structs: hashmap<str, colgm_struct>::instance(),
            generic_functions: hashmap<str, colgm_func>::instance(),
            global_symbol: hashmap<str, symbol_info>::instance(),
            generic_symbol: hashmap<str, symbol_info>::instance()
        };
    }

    pub func delete(self) {
        self->file_name.delete();
        self->enums.delete();
        self->structs.delete();
        self->functions.delete();
        self->generic_structs.delete();
        self->generic_functions.delete();
        self->global_symbol.delete();
        self->generic_symbol.delete();
    }

    pub func copy(self) -> colgm_module* {
        var res = colgm_module::__alloc__();
        if (res == nil) {
            panic("failed to allocate memory");
        }
        res->file_name = self->file_name.copy_instance();
        res->enums = self->enums.copy_instance();
        res->structs = self->structs.copy_instance();
        res->functions = self->functions.copy_instance();
        res->generic_structs = self->generic_structs.copy_instance();
        res->generic_functions = self->generic_functions.copy_instance();
        res->global_symbol = self->global_symbol.copy_instance();
        res->generic_symbol = self->generic_symbol.copy_instance();
        return res;
    }

    pub func copy_instance(self) -> colgm_module {
        return colgm_module {
            file_name: self->file_name.copy_instance(),
            enums: self->enums.copy_instance(),
            structs: self->structs.copy_instance(),
            functions: self->functions.copy_instance(),
            generic_structs: self->generic_structs.copy_instance(),
            generic_functions: self->generic_functions.copy_instance(),
            global_symbol: self->global_symbol.copy_instance(),
            generic_symbol: self->generic_symbol.copy_instance()
        };
    }
}

impl colgm_module {
    pub func has_symbol(self) -> bool {
        return self->enums.size > 0 ||
               self->structs.size > 0 ||
               self->functions.size > 0 ||
               self->generic_structs.size > 0 ||
               self->generic_functions.size > 0;
    }

    pub func dump(self, out: io, pkg: package*) {
        out.cyan().out("domain ").reset().out(self->file_name.c_str);
        if (!self->has_symbol()) {
            out.out(" contains 0 symbol\n");
            return;
        }
        out.out(":\n");
        if (self->enums.size > 0) {
            foreach (var i; self->enums) {
                i.value()->dump(out);
            }
        }

        if (self->structs.size > 0) {
            foreach (var i; self->structs) {
                i.value()->dump(out, pkg);
            }
        }

        if (self->generic_structs.size > 0) {
            foreach (var i; self->generic_structs) {
                i.value()->dump(out, pkg);
            }
        }

        if (self->functions.size > 0) {
            foreach (var i; self->functions) {
                i.value()->dump(out, pkg, "");
            }
        }

        if (self->generic_functions.size > 0) {
            foreach (var i; self->generic_functions) {
                i.value()->dump(out, pkg, "");
            }
        }
    }
}