use std::str::{ str };
use std::vec::{ vec };
use std::map::{ hashmap };
use std::ptr::{ basic };
use std::io::{ io };

use err::span::{ span };

pub struct colgm_enum {
    name: str,
    location: span,
    ordered_member: vec<str>,
    members: hashmap<str, basic<u64>>,
    // mark whether the enum is public or not
    is_public: bool
}

impl colgm_enum {
    pub func new(name: str*, loc: span*) -> colgm_enum* {
        var res = colgm_enum::__alloc__();
        res->name = name->copy_instance();
        res->location = loc->copy_instance();
        res->ordered_member = vec<str>::instance();
        res->members = hashmap<str, basic<u64>>::instance();
        res->is_public = false;
        return res;
    }

    pub func delete(self) {
        self->name.delete();
        self->location.delete();
        self->ordered_member.delete();
        self->members.delete();
    }

    pub func copy(self) -> colgm_enum* {
        var res = colgm_enum::__alloc__();
        res->name = self->name.copy_instance();
        res->location = self->location.copy_instance();
        res->ordered_member = self->ordered_member.copy_instance();
        res->members = self->members.copy_instance();
        res->is_public = self->is_public;
        return res;
    }
}

impl colgm_enum {
    pub func dump(self, out: io) {
        out.out("  ");
        if (self->is_public) {
            out.green().out("pub ").reset();
        }
        out.cyan().out("enum ").reset();
        out.white().out(self->name.c_str).reset();
        if (self->ordered_member.size == 0) {
            out.out(" {}\n");
            return;
        }
        out.out(" {\n");
        for (var i: u64 = 0; i < self->ordered_member.size; i += 1) {
            out.out("    ").out(self->ordered_member.get(i)->c_str).out(": ");
            var v = self->members.get(self->ordered_member.get(i));
            out.orange().out_i64(v->data => i64).reset().out("\n");
        }
        out.out("  }\n");
    }
}