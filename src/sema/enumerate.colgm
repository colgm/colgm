use std::str::{ str };
use std::vec::{ vec };
use std::map::{ hashmap };
use std::io::{ io };
use std::panic::{ panic };

use err::span::{ span };

pub struct colgm_enum {
    name: str,
    location: span,
    ordered_member: vec<str>,
    members: hashmap<str, i64>,
    // mark whether the enum is public or not
    is_public: bool
}

impl colgm_enum {
    pub func new(name: str&, loc: span&) -> colgm_enum* {
        var res = colgm_enum::__alloc__();
        if (res == nil) {
            panic("failed to allocate memory");
        }
        res->name = name.clone();
        res->location = loc.clone();
        res->ordered_member = vec<str>::instance();
        res->members = hashmap<str, i64>::instance();
        res->is_public = false;
        return res;
    }

    pub func delete(self) {
        self.name.delete();
        self.location.delete();
        self.ordered_member.delete();
        self.members.delete();
    }

    pub func clone(self) ->colgm_enum {
        return colgm_enum {
            name: self.name.clone(),
            location: self.location.clone(),
            ordered_member: self.ordered_member.clone(),
            members: self.members.clone(),
            is_public: self.is_public
        };
    }
}

impl colgm_enum {
    pub func dump(self, out: io&) {
        out.out("  ");
        if (self.is_public) {
            out.green().out("pub ").reset();
        }
        out.cyan().out("enum ").reset();
        out.white().out(self.name.c_str).reset();
        if (self.ordered_member.empty()) {
            out.out(" {}\n");
            return;
        }
        out.out(" {\n");
        foreach (var i; self.ordered_member) {
            out.out("    ").out(i.get()->c_str).out(": ");
            var v = self.members.get(i.get());
            out.orange().out_i64(v).reset().out("\n");
        }
        out.out("  }\n");
    }
}