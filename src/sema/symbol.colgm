use std::str::{ str };
use err::span::{ span };
use err::panic::{ panic };
use sema::type::{ type };

pub struct symbol {
    name: str,
    type: type,
    loc: span
}

impl symbol {
    pub func delete(self) {
        self->name.delete();
        self->type.delete();
        self->loc.delete();
    }

    pub func copy(self) -> symbol* {
        var res = symbol::__alloc__();
        if (res == nil) {
            panic("failed to allocate memory");
        }
        res->name = self->name.copy_instance();
        res->type = self->type.copy_instance();
        res->loc = self->loc.copy_instance();
        return res;
    }

    pub func copy_instance(self) -> symbol {
        return symbol {
            name: self->name.copy_instance(),
            type: self->type.copy_instance(),
            loc: self->loc.copy_instance()
        };
    }
}