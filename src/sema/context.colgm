use std::map::{ hashmap };
use std::set::{ hashset };
use std::str::{ str };
use std::io::{ io };
use err::panic::{ panic };

use sema::function::{ colgm_func };
use sema::primitive::{ colgm_primitive };
use sema::module::{ colgm_module };
use sema::symbol_info::{ symbol_info };

pub struct global_symbol_table {
    constant_string: hashset<str>,
    primitives: hashmap<str, colgm_primitive>,
    domain: hashmap<str, colgm_module>
}

impl global_symbol_table {
    pub func new() -> global_symbol_table* {
        var res = global_symbol_table::__alloc__();
        if (res == nil) {
            panic("global_symbol_table::new: failed to allocate memory");
        }
        res->constant_string = hashset<str>::instance();
        res->primitives = hashmap<str, colgm_primitive>::instance();
        res->domain = hashmap<str, colgm_module>::instance();
        return res;
    }

    pub func delete(self) {
        self->constant_string.delete();
        self->primitives.delete();
        self->domain.delete();
    }

    pub func create_domain_if_not_exist(self, name: str*) {
        if (self->domain.has(name)) {
            return;
        }

        var res = colgm_module::instance();
        self->domain.insert(name, res.__ptr__());
        res.delete();
    }
}

pub struct sema_context {
    global: global_symbol_table*,
    this_file: str,
    generics: hashset<str>
}

impl sema_context {
    pub func global_symbol(self) -> hashmap<str, symbol_info>* {
        if (!self->global->domain.has(self->this_file.__ptr__())) {
            panic("sema_context::global_symbol: domain does not exist");
        }
        return self->global->domain
                   .get(self->this_file.__ptr__())
                   ->global_symbol
                   .__ptr__();
    }

    pub func generic_symbol(self) -> hashmap<str, symbol_info>* {
        if (!self->global->domain.has(self->this_file.__ptr__())) {
            panic("sema_context::generic_symbol: domain does not exist");
        }
        return self->global->domain
                   .get(self->this_file.__ptr__())
                   ->generic_symbol
                   .__ptr__();
    }
}

impl sema_context {
    pub func instance(g: global_symbol_table*) -> sema_context {
        return sema_context {
            global: g,
            this_file: str::instance(),
            generics: hashset<str>::instance()
        };
    }

    pub func delete(self) {
        self->this_file.delete();
        self->generics.delete();
    }

    pub func dump(self, out: io) {
        var gt = self->global;
        if (gt->primitives.size > 0) {
            out.out("primitives:\n");
        }
        for (var i = gt->primitives.iter(); !i.is_end(); i = i.next()) {
            out.out("  ");
            i.value()->dump(out);
        }

        for (var i = gt->domain.iter(); !i.is_end(); i = i.next()) {
            i.value()->dump(out);
            out.endln();
        }
    }

    pub func log_dump(self) {
        var logger = io::colgm_report();
        self->dump(logger);
        logger.close();
    }
}

impl sema_context {
    pub func create_domain_if_not_exist(self, name: str*) {
        self->global->create_domain_if_not_exist(name);
    }

    pub func get_domain(self, name: str*) -> colgm_module* {
        if (self->global->domain.has(name)) {
            return self->global->domain.get(name);
        }

        panic("sema_context::get_domain: domain not found");
        return nil;
    }
}