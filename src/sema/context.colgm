use std::map::{ hashmap };
use std::set::{ hashset };
use std::vec::{ vec };
use std::str::{ str };
use std::io::{ io };

use err::panic::{ panic };
use util::package::{ package };

use sema::function::{ colgm_func };
use sema::primitive::{ colgm_primitive };
use sema::module::{ colgm_module };
use sema::type::{ type };
use sema::symbol_info::{ symbol_info };

pub struct global_symbol_table {
    main_input_file: str,
    constant_string: hashset<str>,
    primitives: hashmap<str, colgm_primitive>,
    domain: hashmap<str, colgm_module>
}

impl global_symbol_table {
    pub func instance() -> global_symbol_table {
        return global_symbol_table {
            main_input_file: str::instance(),
            constant_string: hashset<str>::instance(),
            primitives: hashmap<str, colgm_primitive>::instance(),
            domain: hashmap<str, colgm_module>::instance()
        };
    }

    pub func delete(self) {
        self->main_input_file.delete();
        self->constant_string.delete();
        self->primitives.delete();
        self->domain.delete();
    }

    pub func create_domain_if_not_exist(self, name: str*) {
        if (self->domain.has(name)) {
            return;
        }

        var res = colgm_module::instance();
        self->domain.insert(name, res.__ptr__());
        res.delete();
    }
}

pub struct sema_context {
    global: global_symbol_table*,
    this_file: str,
    generics: hashset<str>,
    constant_string: hashset<str>,
    local_scope: vec<hashmap<str, type>>
}

impl sema_context {
    pub func push_scope_level(self) {
        var res = hashmap<str, type>::instance();
        self->local_scope.push(res.__ptr__());
        res.delete();
    }

    pub func pop_scope_level(self) {
        self->local_scope.pop_back();
    }

    pub func add_local_var(self, name: str*, t: type*) {
        self->local_scope.back()->insert(name, t);
    }

    pub func get_local(self, name: str*) -> type* {
        if (self->local_scope.empty()) {
            return nil;
        }
        for (var i = self->local_scope.size - 1; (i => i64) >= 0; i -= 1) {
            if (self->local_scope.get(i)->has(name)) {
                return self->local_scope.get(i)->get(name);
            }
        }
        return nil;
    }

    pub func find_local(self, name: str*) -> bool {
        if (self->local_scope.empty()) {
            return false;
        }
        for (var i = self->local_scope.size - 1; (i => i64) >= 0; i -= 1) {
            if (self->local_scope.get(i)->has(name)) {
                return true;
            }
        }
        return false;
    }
}

impl sema_context {
    pub func global_symbol(self) -> hashmap<str, symbol_info>* {
        return self->get_domain(self->this_file.__ptr__())
                   ->global_symbol
                   .__ptr__();
    }

    pub func generic_symbol(self) -> hashmap<str, symbol_info>* {
        return self->get_domain(self->this_file.__ptr__())
                   ->generic_symbol
                   .__ptr__();
    }
}

impl sema_context {
    pub func instance(g: global_symbol_table*) -> sema_context {
        return sema_context {
            global: g,
            this_file: str::instance(),
            generics: hashset<str>::instance(),
            constant_string: hashset<str>::instance(),
            local_scope: vec<hashmap<str, type>>::instance()
        };
    }

    pub func delete(self) {
        self->this_file.delete();
        self->generics.delete();
        self->local_scope.delete();
    }

    pub func dump(self, out: io, pkg: package*) {
        var gt = self->global;
        if (gt->primitives.size > 0) {
            out.cyan().out("primitives:\n").reset();
        }
        foreach (var i; gt->primitives) {
            out.out("  ");
            i.value()->dump(out);
        }

        foreach (var i; gt->domain) {
            i.value()->dump(out, pkg);
            out.endln();
        }
    }

    pub func log_dump(self, pkg: package*) {
        var logger = io::colgm_report();
        self->dump(logger, pkg);
        logger.close();
    }
}

impl sema_context {
    pub func create_domain_if_not_exist(self, name: str*) {
        self->global->create_domain_if_not_exist(name);
    }

    pub func has_domain(self, name: str*) -> bool {
        return self->global->domain.has(name);
    }

    pub func get_domain(self, name: str*) -> colgm_module* {
        if (self->has_domain(name)) {
            return self->global->domain.get(name);
        }

        panic("domain does not exist");
        return nil;
    }
}