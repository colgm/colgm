use sema::function::{ colgm_func };
use std::panic::{ panic };
use std::map::{ hashmap };
use std::str::{ str };
use std::io::{ io };

pub struct colgm_primitive {
    name: str,
    static_method: hashmap<str, colgm_func>,
    method: hashmap<str, colgm_func>
}

impl colgm_primitive {
    pub func instance() -> colgm_primitive {
        return colgm_primitive {
            name: str::instance(),
            static_method: hashmap<str, colgm_func>::instance(),
            method: hashmap<str, colgm_func>::instance()
        };
    }

    pub func delete(self) {
        self->name.delete();
        self->static_method.delete();
        self->method.delete();
    }

    pub func copy(self) -> colgm_primitive* {
        var res = colgm_primitive::__alloc__();
        if (res == nil) {
            panic("failed to allocate memory");
        }
        res->name = self->name.copy_instance();
        res->static_method = self->static_method.copy_instance();
        res->method = self->method.copy_instance();
        return res;
    }

    pub func copy_instance(self) -> colgm_primitive {
        return colgm_primitive {
            name: self->name.copy_instance(),
            static_method: self->static_method.copy_instance(),
            method: self->method.copy_instance()
        };
    }

    pub func dump(self, out: io) {
        out.cyan().out("primitive ").reset();
        out.white().out(self->name.c_str).reset().out(" {").endln();
        foreach (var i; self->static_method) {
            i.value()->dump(out, nil, "  ");
        }
        foreach (var i; self->method) {
            i.value()->dump(out, nil, "  ");
        }
        out.out("  }\n");
    }
}