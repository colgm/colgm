use sema::function::{ colgm_func };
use std::panic::{ panic };
use std::map::{ hashmap };
use std::str::{ str };
use std::io::{ io };

pub struct colgm_primitive {
    name: str,
    static_method: hashmap<str, colgm_func>,
    method: hashmap<str, colgm_func>
}

impl colgm_primitive {
    pub func instance() -> colgm_primitive {
        return colgm_primitive {
            name: str::instance(),
            static_method: hashmap<str, colgm_func>::instance(),
            method: hashmap<str, colgm_func>::instance()
        };
    }

    pub func delete(self) {
        self.name.delete();
        self.static_method.delete();
        self.method.delete();
    }

    pub func clone(self) -> colgm_primitive {
        return colgm_primitive {
            name: self.name.clone(),
            static_method: self.static_method.clone(),
            method: self.method.clone()
        };
    }

    pub func dump(self, out: io&) {
        out.cyan().out("primitive ").reset();
        out.white().out(self.name.c_str).reset().out(" {").endln();
        foreach (var i; self.static_method) {
            i.value().dump(out, nil, "  ");
        }
        foreach (var i; self.method) {
            i.value().dump(out, nil, "  ");
        }
        out.out("  }\n");
    }
}