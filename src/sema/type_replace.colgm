use err::report::{ report };
use ast::ast::*;
use package::{ package };

use std::str::{ str };
use std::map::{ hashmap };
use std::io::{ io };
use std::vec::{ vec };

use sema::type::{ type };
use sema::context::{ sema_context };
use sema::symbol_info::{ symbol_kind, symbol_info };
use sema::type_resolve::{ type_resolve };

struct generic_data {
    generic_type: type,
    types: hashmap<str, type>
}

impl generic_data {
    pub func new() -> generic_data* {
        var res = generic_data::__alloc__();
        res->generic_type = type::instance();
        res->types = hashmap<str, type>::instance();
        return res;
    }

    pub func delete(self) {
        self->generic_type.delete();
        self->types.delete();
    }

    pub func copy(self) -> generic_data* {
        var res = generic_data::__alloc__();
        res->generic_type = self->generic_type.copy_instance();
        res->types = self->types.copy_instance();
        return res;
    }
}

pub struct type_replace_pass {
    err: report*,
    ctx: sema_context*,
    g_data: generic_data*
}

pub struct generic_visitor {
    err: report*,
    pkg: package*,
    ctx: sema_context*,
    root: root*,
    tr: type_resolve,
    generic_type_map: hashmap<str, generic_data>
}

impl generic_visitor {
    pub func instance(e: report*, c: sema_context*, p: package*) -> generic_visitor {
        return generic_visitor {
            err: e,
            pkg: p,
            ctx: c,
            root: nil,
            tr: type_resolve::instance(e, c, p),
            generic_type_map: hashmap<str, generic_data>::instance()
        };
    }

    pub func delete(self) {
        self->generic_type_map.delete();
    }

    func insert_into_symbol_table(self) -> u64 { return 0; }

    pub func scan_and_insert(self, n: root*) {
        self->root = n;

        self->generic_type_map.clear();
        self->visit_root(n);
        while (self->insert_into_symbol_table() != 0) {
            self->generic_type_map.clear();
            self->visit_root(n);
        }
    }
}

impl generic_visitor {
    func scan_generic_type(self, n: ast_type_def*) {
        var type_name = n->name->content.__ptr__();
        var domain_file: str* = nil;
        if (n->base.is_redirected()) {
            domain_file = n->base.redirect_location.__ptr__();
        } else {
            domain_file = n->base.location->file.__ptr__();
        }

        var dm = self->ctx->get_domain(domain_file);

        // check this symbol exists
        if (!dm->global_symbol.has(type_name) &&
            !dm->generic_symbol.has(type_name)) {
            var info = str::from("unknown type \"");
            info.append_str(type_name)->append_i8_vec("\"");
            self->err->error(n->base.location, info.c_str);
            info.delete();
            return;
        }

        // check this symbol is generic type
        if (!dm->generic_symbol.has(type_name)) {
            var info = str::from("\"");
            info.append_str(type_name);
            info.append_i8_vec("\" is not a generic type");
            self->err->error(n->base.location, info.c_str);
            info.delete();
            return;
        }

        var sym = dm->generic_symbol.get(type_name);
        if (sym->kind != symbol_kind::struct_kind) {
            var info = str::from("\"");
            info.append_str(type_name);
            info.append_i8_vec("\" is not a struct type");
            self->err->error(n->base.location, info.c_str);
            info.delete();
            return;
        }

        var sym_belonged_dm = self->ctx->get_domain(sym->loc_file.__ptr__());
        var generic_struct = sym_belonged_dm->generic_structs.get(type_name);
        var generic_template = generic_struct->generic_template.__ptr__();
        self->check_generic_type(n,
                                 type_name,
                                 sym,
                                 n->generic_types,
                                 generic_template);
    }

    func check_generic_type(self,
                            n: ast_type_def*,
                            type_name: str*,
                            sym: symbol_info*,
                            type_list_node: ast_generic_type_list*,
                            generic_template: vec<str>*) {
        var type_list = type_list_node->types.__ptr__();
        // check size match
        if (type_list->size != generic_template->size) {
            self->err->error(n->base.location,
                "generic type count does not match"
            );
            return;
        }

        var ss = str::from("");
        ss.append_str(type_name)->append_char('<');
        for (var i = type_list->iter(); !i.is_end(); i = i.next()) {
            var r_type = self->tr.resolve(i.get().unwrap() => ast_type_def*);
            var r_type_fpn = r_type.full_path_name(self->pkg);
            ss.append_str(r_type_fpn.__ptr__());
            r_type_fpn.delete();
            if (i.index() != type_list->size - 1) {
                ss.append_char(',');
            }
            r_type.delete();
        }
        ss.append_char('>');
        if (self->err->error_count > 0) {
            ss.delete();
            return;
        }

        // insert data
        if (self->generic_type_map.has(ss.__ptr__())) {
            ss.delete();
            return;
        }
        // TODO: unfinished
        io::stdout().out("insert ").out(ss.c_str).endln();

        ss.delete();
        return;
    }
}

impl generic_visitor {
    func visit_ast(self, n: ast*) {
        match(n->kind) {
            ast_kind::ast_unary_operator =>
                self->visit_unary_operator(n => ast_unary_operator*);
            ast_kind::ast_binary_operator =>
                self->visit_binary_operator(n => ast_binary_operator*);
            ast_kind::ast_type_convert =>
                self->visit_type_convert(n => ast_type_convert*);
            ast_kind::ast_array_literal =>
                self->visit_array_literal(n => ast_array_literal*);
            ast_kind::ast_call_index =>
                self->visit_call_index(n => ast_call_index*);
            ast_kind::ast_call_func_args =>
                self->visit_call_func_args(n => ast_call_func_args*);
            ast_kind::ast_init_pair =>
                self->visit_init_pair(n => ast_init_pair*);
            ast_kind::ast_initializer =>
                self->visit_initializer(n => ast_initializer*);
            ast_kind::ast_call_id =>
                self->visit_call_id(n => ast_call_id*);
            ast_kind::ast_call => self->visit_call(n => ast_call*);
            ast_kind::ast_assignment =>
                self->visit_assignment(n => ast_assignment*);
            ast_kind::ast_cond_compile =>
                self->visit_cond_compile(n => ast_cond_compile*);
            ast_kind::ast_type_def =>
                self->visit_type_def(n => ast_type_def*);
            ast_kind::ast_generic_type_list =>
                self->visit_generic_type_list(n => ast_generic_type_list*);
            ast_kind::ast_struct_field =>
                self->visit_struct_field(n => ast_struct_field*);
            ast_kind::ast_struct_decl =>
                self->visit_struct_decl(n => ast_struct_decl*);
            ast_kind::ast_param =>
                self->visit_param(n => ast_param*);
            ast_kind::ast_param_list =>
                self->visit_param_list(n => ast_param_list*);
            ast_kind::ast_func_decl => 
                self->visit_func_decl(n => ast_func_decl*);
            ast_kind::ast_impl =>
                self->visit_impl(n => ast_impl*);
            ast_kind::ast_definition =>
                self->visit_definition(n => ast_definition*);
            ast_kind::ast_cond_stmt =>
                self->visit_cond_stmt(n => ast_cond_stmt*);
            ast_kind::ast_if_stmt =>
                self->visit_if_stmt(n => ast_if_stmt*);
            ast_kind::ast_match_case =>
                self->visit_match_case(n => ast_match_case*);
            ast_kind::ast_match_stmt =>
                self->visit_match_stmt(n => ast_match_stmt*);
            ast_kind::ast_while_stmt =>
                self->visit_while_stmt(n => ast_while_stmt*);
            ast_kind::ast_for_stmt =>
                self->visit_for_stmt(n => ast_for_stmt*);
            ast_kind::ast_in_stmt_expr =>
                self->visit_in_stmt_expr(n => ast_in_stmt_expr*);
            ast_kind::ast_ret_stmt =>
                self->visit_ret_stmt(n => ast_ret_stmt*);
            ast_kind::ast_code_block =>
                self->visit_code_block(n => ast_code_block*);
            _ => {}
        }
    }
}

impl generic_visitor {
    func visit_root(self, n: root*) {
        for (var i = n->decls.iter(); !i.is_end(); i = i.next()) {
            var d = i.get().unwrap();
            match (d->kind) {
                ast_kind::ast_struct_decl => {
                    self->visit_struct_decl(d => ast_struct_decl*);
                }
                ast_kind::ast_func_decl => {
                    self->visit_func_decl(d => ast_func_decl*);
                }
                ast_kind::ast_impl => {
                    self->visit_impl(d => ast_impl*);
                }
                ast_kind::ast_cond_compile => {
                    self->visit_cond_compile(d => ast_cond_compile*);
                }
                _ => {}
            }
        }
    }

    func visit_struct_decl(self, n: ast_struct_decl*) {
        if (n->generic_types != nil) {
            return;
        }
        for (var i = n->fields.iter(); !i.is_end(); i = i.next()) {
            var f = i.get().unwrap();
            if (!f->is(ast_kind::ast_struct_field)) {
                continue;
            }
            self->visit_struct_field(f => ast_struct_field*);
        }
    }

    func visit_func_decl(self, n: ast_func_decl*) {
        if (n->generic_types != nil) {
            return;
        }
        self->visit_param_list(n->params);
        if (n->return_type != nil) {
            self->visit_type_def(n->return_type);
        }
        if (n->body != nil) {
            self->visit_code_block(n->body);
        }
    }

    func visit_impl(self, n: ast_impl*) {
        if (n->generic_types != nil) {
            return;
        }
        for (var i = n->methods.iter(); !i.is_end(); i = i.next()) {
            var f = i.get().unwrap();
            if (!f->is(ast_kind::ast_func_decl)) {
                continue;
            }
            self->visit_func_decl(f => ast_func_decl*);
        }
    }

    func visit_unary_operator(self, n: ast_unary_operator*) {
        self->visit_ast(n->value);
    }

    func visit_binary_operator(self, n: ast_binary_operator*) {
        self->visit_ast(n->left);
        self->visit_ast(n->right);
    }

    func visit_type_convert(self, n: ast_type_convert*) {
        self->visit_type_def(n->to);
    }

    func visit_array_literal(self, n: ast_array_literal*) {
        if (n->type != nil) {
            self->visit_type_def(n->type);
        }
    }

    func visit_call_index(self, n: ast_call_index*) {
        self->visit_ast(n->index);
    }

    func visit_call_func_args(self, n: ast_call_func_args*) {
        for (var i = n->args.iter(); !i.is_end(); i = i.next()) {
            self->visit_ast(i.get().unwrap());
        }
    }

    func visit_init_pair(self, n: ast_init_pair*) {
        self->visit_ast(n->value);
    }

    func visit_initializer(self, n: ast_initializer*) {
        for (var i = n->pairs.iter(); !i.is_end(); i = i.next()) {
            self->visit_ast(i.get().unwrap());
        }
    }

    func visit_call_id(self, n: ast_call_id*) {
        if (n->generic_types != nil) {
            self->visit_generic_type_list(n->generic_types);
        }
    }

    func visit_call(self, n: ast_call*) {
        self->visit_call_id(n->head);
        for (var i = n->chain.iter(); !i.is_end(); i = i.next()) {
            self->visit_ast(i.get().unwrap());
        }
    }

    func visit_assignment(self, n: ast_assignment*) {
        self->visit_call(n->left);
        self->visit_ast(n->right);
    }

    func visit_cond_compile(self, n: ast_cond_compile*) {
        self->visit_ast(n->enabled_decl);
    }

    func visit_type_def(self, n: ast_type_def*) {
        if (n->generic_types != nil) {
            self->visit_generic_type_list(n->generic_types);
            self->scan_generic_type(n);
        }
    }

    func visit_generic_type_list(self, n: ast_generic_type_list*) {
        for (var i = n->types.iter(); !i.is_end(); i = i.next()) {
            self->visit_ast(i.get().unwrap());
        }
    }

    func visit_struct_field(self, n: ast_struct_field*) {
        self->visit_type_def(n->type);
    }

    func visit_param(self, n: ast_param*) {
        if (n->type != nil) {
            self->visit_type_def(n->type);
        }
    }

    func visit_param_list(self, n: ast_param_list*) {
        for (var i = n->params.iter(); !i.is_end(); i = i.next()) {
            self->visit_ast(i.get().unwrap());
        }
    }

    func visit_definition(self, n: ast_definition*) {
        if (n->type != nil) {
            self->visit_type_def(n->type);
        }
        self->visit_ast(n->value);
    }

    func visit_cond_stmt(self, n: ast_cond_stmt*) {
        for (var i = n->stmts.iter(); !i.is_end(); i = i.next()) {
            self->visit_ast(i.get().unwrap());
        }
    }

    func visit_if_stmt(self, n: ast_if_stmt*) {
        if (n->condition != nil) {
            self->visit_ast(n->condition);
        }
        if (n->body != nil) {
            self->visit_code_block(n->body);
        }
    }

    func visit_match_case(self, n: ast_match_case*) {
        self->visit_call(n->pattern);
        if (n->body != nil) {
            self->visit_code_block(n->body);
        }
    }

    func visit_match_stmt(self, n: ast_match_stmt*) {
        self->visit_ast(n->value);
        for (var i = n->cases.iter(); !i.is_end(); i = i.next()) {
            self->visit_ast(i.get().unwrap());
        }
    }

    func visit_while_stmt(self, n: ast_while_stmt*) {
        if (n->condition != nil) {
            self->visit_ast(n->condition);
        }
        if (n->body != nil) {
            self->visit_code_block(n->body);
        }
    }

    func visit_for_stmt(self, n: ast_for_stmt*) {
        if (n->init != nil) {
            self->visit_definition(n->init);
        }
        if (n->condition != nil) {
            self->visit_ast(n->condition);
        }
        if (n->update != nil) {
            self->visit_ast(n->update);
        }
        if (n->body != nil) {
            self->visit_code_block(n->body);
        }
    }

    func visit_in_stmt_expr(self, n: ast_in_stmt_expr*) {
        self->visit_ast(n->value);
    }

    func visit_ret_stmt(self, n: ast_ret_stmt*) {
        if (n->value != nil) {
            self->visit_ast(n->value);
        }
    }

    func visit_code_block(self, n: ast_code_block*) {
        for (var i = n->stmts.iter(); !i.is_end(); i = i.next()) {
            self->visit_ast(i.get().unwrap());
        }
    }
}