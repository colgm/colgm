use err::report::{ report };
use err::span::{ span };

use ast::ast::*;
use util::cli::{ cli_option };
use util::package::{ package };

use std::str::{ str };
use std::map::{ hashmap };
use std::io::{ io };
use std::vec::{ vec };

use sema::type::{ type };
use sema::generic_data::{ generic_data };
use sema::context::{ sema_context };

pub struct type_replace_pass {
    err: report*,
    ctx: sema_context*,
    pkg: package*,
    co: cli_option*,
    g_data: generic_data*
}

impl type_replace_pass {
    pub func replace_func(self, n: ast_func_decl*) {
        self.visit_func_decl(n);
    }

    pub func replace_impl(self, n: ast_impl*) {
        self.visit_impl(n);
    }

    pub func replace_struct(self, n: ast_struct_decl*) {
        self.visit_struct_decl(n);
    }
}

impl type_replace_pass {
    func generate_generic_type(self, t: type&, loc: span&) -> ast_type_def* {
        var new_def = ast_type_def::new(loc);
        new_def->name = ast_identifier::new(loc, t.name);
        new_def->name->base.redirect_location.append_str(t.loc_file);
        new_def->base.redirect_location.append_str(t.loc_file);
        new_def->is_const = t.is_const;
        new_def->pointer_depth = t.pointer_depth;
        if (t.generics.size > 0) {
            new_def->generic_types = ast_generic_type_list::new(loc);
            foreach (var i; t.generics) {
                new_def->generic_types->types.push(
                    self.generate_generic_type(i.get(), loc) => ast*
                );
            }
        }
        return new_def;
    }
}

impl type_replace_pass {
    func visit_ast(self, n: ast*) {
        match (n->kind) {
            ast_kind::ast_unary_operator =>
                self.visit_unary_operator(n => ast_unary_operator*);
            ast_kind::ast_binary_operator =>
                self.visit_binary_operator(n => ast_binary_operator*);
            ast_kind::ast_type_convert =>
                self.visit_type_convert(n => ast_type_convert*);
            ast_kind::ast_array_list =>
                self.visit_array_list(n => ast_array_list*);
            ast_kind::ast_call_index =>
                self.visit_call_index(n => ast_call_index*);
            ast_kind::ast_call_func_args =>
                self.visit_call_func_args(n => ast_call_func_args*);
            ast_kind::ast_init_pair =>
                self.visit_init_pair(n => ast_init_pair*);
            ast_kind::ast_initializer =>
                self.visit_initializer(n => ast_initializer*);
            ast_kind::ast_call_id =>
                self.visit_call_id(n => ast_call_id*);
            ast_kind::ast_call => self.visit_call(n => ast_call*);
            ast_kind::ast_assignment =>
                self.visit_assignment(n => ast_assignment*);
            ast_kind::ast_type_def =>
                self.visit_type_def(n => ast_type_def*);
            ast_kind::ast_generic_type_list =>
                self.visit_generic_type_list(n => ast_generic_type_list*);
            ast_kind::ast_field_pair =>
                self.visit_field_pair(n => ast_field_pair*);
            ast_kind::ast_struct_decl =>
                self.visit_struct_decl(n => ast_struct_decl*);
            ast_kind::ast_param =>
                self.visit_param(n => ast_param*);
            ast_kind::ast_param_list =>
                self.visit_param_list(n => ast_param_list*);
            ast_kind::ast_func_decl => 
                self.visit_func_decl(n => ast_func_decl*);
            ast_kind::ast_impl =>
                self.visit_impl(n => ast_impl*);
            ast_kind::ast_definition =>
                self.visit_definition(n => ast_definition*);
            ast_kind::ast_cond_stmt =>
                self.visit_cond_stmt(n => ast_cond_stmt*);
            ast_kind::ast_if_stmt =>
                self.visit_if_stmt(n => ast_if_stmt*);
            ast_kind::ast_match_case =>
                self.visit_match_case(n => ast_match_case*);
            ast_kind::ast_match_stmt =>
                self.visit_match_stmt(n => ast_match_stmt*);
            ast_kind::ast_while_stmt =>
                self.visit_while_stmt(n => ast_while_stmt*);
            ast_kind::ast_for_stmt =>
                self.visit_for_stmt(n => ast_for_stmt*);
            ast_kind::ast_forindex =>
                self.visit_forindex(n => ast_forindex*);
            ast_kind::ast_foreach =>
                self.visit_foreach(n => ast_foreach*);
            ast_kind::ast_in_stmt_expr =>
                self.visit_in_stmt_expr(n => ast_in_stmt_expr*);
            ast_kind::ast_ret_stmt =>
                self.visit_ret_stmt(n => ast_ret_stmt*);
            ast_kind::ast_code_block =>
                self.visit_code_block(n => ast_code_block*);
            _ => {}
        }
    }

    func visit_struct_decl(self, n: ast_struct_decl*) {
        foreach (var i; n->fields) {
            self.visit_field_pair(i.get());
        }
    }

    func visit_func_decl(self, n: ast_func_decl*) {
        self.visit_param_list(n->params);
        if (n->return_type != nil) {
            self.visit_type_def(n->return_type);
        }
        if (n->body != nil) {
            self.visit_code_block(n->body);
        }
    }

    func visit_impl(self, n: ast_impl*) {
        foreach (var i; n->methods) {
            var f = i.get();
            if (!f->is(ast_kind::ast_func_decl)) {
                continue;
            }
            self.visit_func_decl(f => ast_func_decl*);
        }
    }

    func visit_unary_operator(self, n: ast_unary_operator*) {
        self.visit_ast(n->value);
    }

    func visit_binary_operator(self, n: ast_binary_operator*) {
        self.visit_ast(n->left);
        self.visit_ast(n->right);
    }

    func visit_type_convert(self, n: ast_type_convert*) {
        self.visit_ast(n->from);
        self.visit_type_def(n->to);
    }

    func visit_array_list(self, n: ast_array_list*) {
        foreach (var i; n->value) {
            self.visit_ast(i.get());
        }
    }

    func visit_call_index(self, n: ast_call_index*) {
        self.visit_ast(n->index);
    }

    func visit_call_func_args(self, n: ast_call_func_args*) {
        foreach (var i; n->args) {
            self.visit_ast(i.get());
        }
    }

    func visit_init_pair(self, n: ast_init_pair*) {
        self.visit_ast(n->value);
    }

    func visit_initializer(self, n: ast_initializer*) {
        foreach (var i; n->pairs) {
            self.visit_ast(i.get());
        }
    }

    func visit_call_id(self, n: ast_call_id*) {
        var name: str& = n->id->content;
        var copy = name.clone();
        defer copy.delete();

        if (self.g_data->types.has(name)) {
            var select_type = self.g_data->types.get(name);

            if (select_type.pointer_depth > 0) {
                var st_full_name = select_type.full_path_name_with_pointer(self.pkg);
                var info = str::from("replace generic type with pointer type \"");
                defer {
                    st_full_name.delete();
                    info.delete();
                }
                info.append_str(st_full_name);
                info.append("\", which is not allowed here");

                self.err->error(n->base.location, info.c_str);
            }

            // cannot replace T in T<K> with another generic V<X>
            // because V<X><K> is not a valid type
            if (select_type.generics.size > 0 &&
                n->generic_types != nil) {
                var info = str::from("try to replace generic \"");
                var st_full_name = select_type.full_path_name_with_pointer(self.pkg);
                defer {
                    info.delete();
                    st_full_name.delete();
                }
                info.append_str(name);
                info.append("\" with \"");
                info.append_str(st_full_name);
                info.append("\", which is already a generic type");

                self.err->error(n->base.location, info.c_str);
            }

            n->id->content.clear();
            n->id->content.append_str(select_type.name);
            n->id->base.redirect_location.append_str(select_type.loc_file);
            n->base.redirect_location.append_str(select_type.loc_file);

            if (select_type.generics.size > 0 &&
                n->generic_types == nil) {
                n->generic_types = ast_generic_type_list::new(n->base.location);
                foreach (var i; select_type.generics) {
                    n->generic_types->types.push(self.generate_generic_type(
                        i.get(),
                        n->base.location
                    ) => ast*);
                }
            }

            if (self.co->VIEW_TYPE_REPLACE_INFO) {
                var st_full_name = select_type.generic_name(self.pkg);
                defer st_full_name.delete();

                io::stdout().out("[type_replace] call_id");
                io::stdout().out(" replace ").orange().out(copy.c_str).reset();
                io::stdout().out(" with ").cyan().out(st_full_name.c_str).reset().out(" ");
                n->base.location.dump(io::stdout());
            }
        }

        if (n->generic_types != nil) {
            self.visit_generic_type_list(n->generic_types);
        }
    }

    func visit_call(self, n: ast_call*) {
        self.visit_call_id(n->head);
        foreach (var i; n->chain) {
            self.visit_ast(i.get());
        }
    }

    func visit_assignment(self, n: ast_assignment*) {
        self.visit_call(n->left);
        self.visit_ast(n->right);
    }

    func visit_type_def(self, n: ast_type_def*) {
        var name: str& = n->name->content;
        var copy = name.clone();
        defer copy.delete();

        if (self.g_data->types.has(name)) {
            var select_type = self.g_data->types.get(name);

            // cannot replace T in T<K> with another generic V<X>
            // because V<X><K> is not a valid type
            if (select_type.generics.size > 0 &&
                n->generic_types != nil) {
                var info = str::from("try to replace generic \"");
                var st_full_name = select_type.full_path_name_with_pointer(self.pkg);
                defer {
                    info.delete();
                    st_full_name.delete();
                }
                info.append_str(name);
                info.append("\" with \"");
                info.append_str(st_full_name);
                info.append("\", which is already a generic type");

                self.err->error(n->base.location, info.c_str);
            }

            n->name->content.clear();
            n->name->content.append_str(select_type.name);
            n->name->base.redirect_location.append_str(select_type.loc_file);
            n->base.redirect_location.append_str(select_type.loc_file);

            n->pointer_depth += select_type.pointer_depth;

            if (select_type.generics.size > 0 &&
                n->generic_types == nil) {
                n->generic_types = ast_generic_type_list::new(n->base.location);
                foreach (var i; select_type.generics) {
                    n->generic_types->types.push(self.generate_generic_type(
                        i.get(),
                        n->base.location
                    ) => ast*);
                }
            }

            if (self.co->VIEW_TYPE_REPLACE_INFO) {
                var st_full_name = select_type.generic_name(self.pkg);
                defer st_full_name.delete();

                io::stdout().out("[type_replace] type_def");
                io::stdout().out(" replace ").orange().out(copy.c_str).reset();
                io::stdout().out(" with ").cyan().out(st_full_name.c_str).reset().out(" ");
                n->base.location.dump(io::stdout());
            }
        }

        if (n->generic_types != nil) {
            self.visit_generic_type_list(n->generic_types);
        }
    }

    func visit_generic_type_list(self, n: ast_generic_type_list*) {
        foreach (var i; n->types) {
            self.visit_ast(i.get());
        }
    }

    func visit_field_pair(self, n: ast_field_pair*) {
        self.visit_type_def(n->type);
    }

    func visit_param(self, n: ast_param*) {
        if (n->type != nil) {
            self.visit_type_def(n->type);
        }
    }

    func visit_param_list(self, n: ast_param_list*) {
        foreach (var i; n->params) {
            self.visit_ast(i.get());
        }
    }

    func visit_definition(self, n: ast_definition*) {
        if (n->type != nil) {
            self.visit_type_def(n->type);
        }
        self.visit_ast(n->value);
    }

    func visit_cond_stmt(self, n: ast_cond_stmt*) {
        foreach (var i; n->stmts) {
            self.visit_ast(i.get());
        }
    }

    func visit_if_stmt(self, n: ast_if_stmt*) {
        if (n->condition != nil) {
            self.visit_ast(n->condition);
        }
        if (n->body != nil) {
            self.visit_code_block(n->body);
        }
    }

    func visit_match_case(self, n: ast_match_case*) {
        self.visit_call(n->pattern);
        if (n->body != nil) {
            self.visit_code_block(n->body);
        }
    }

    func visit_match_stmt(self, n: ast_match_stmt*) {
        self.visit_ast(n->value);
        foreach (var i; n->cases) {
            self.visit_ast(i.get());
        }
    }

    func visit_while_stmt(self, n: ast_while_stmt*) {
        if (n->condition != nil) {
            self.visit_ast(n->condition);
        }
        if (n->body != nil) {
            self.visit_code_block(n->body);
        }
    }

    func visit_for_stmt(self, n: ast_for_stmt*) {
        if (n->init != nil) {
            self.visit_definition(n->init);
        }
        if (n->condition != nil) {
            self.visit_ast(n->condition);
        }
        if (n->update != nil) {
            self.visit_ast(n->update);
        }
        if (n->body != nil) {
            self.visit_code_block(n->body);
        }
    }

    func visit_forindex(self, n: ast_forindex*) {
        if (n->variable != nil) {
            self.visit_ast(n->variable => ast*);
        }
        if (n->container != nil) {
            self.visit_call(n->container);
        }
        if (n->body != nil) {
            self.visit_code_block(n->body);
        }

        if (n->lowered_init != nil) {
            self.visit_definition(n->lowered_init);
        }
        if (n->lowered_condition != nil) {
            self.visit_ast(n->lowered_condition);
        }
        if (n->lowered_update != nil) {
            self.visit_ast(n->lowered_update);
        }
    }

    func visit_foreach(self, n: ast_foreach*) {
        if (n->variable != nil) {
            self.visit_ast(n->variable => ast*);
        }
        if (n->container != nil) {
            self.visit_call(n->container);
        }
        if (n->body != nil) {
            self.visit_code_block(n->body);
        }

        if (n->lowered_init != nil) {
            self.visit_definition(n->lowered_init);
        }
        if (n->lowered_condition != nil) {
            self.visit_ast(n->lowered_condition);
        }
        if (n->lowered_update != nil) {
            self.visit_ast(n->lowered_update);
        }
    }

    func visit_in_stmt_expr(self, n: ast_in_stmt_expr*) {
        self.visit_ast(n->value);
    }

    func visit_ret_stmt(self, n: ast_ret_stmt*) {
        if (n->value != nil) {
            self.visit_ast(n->value);
        }
    }

    func visit_code_block(self, n: ast_code_block*) {
        foreach (var i; n->stmts) {
            self.visit_ast(i.get());
        }
    }
}
