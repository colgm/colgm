use err::report::{ report };
use ast::ast::*;
use package::{ package };

use std::str::{ str };
use std::map::{ hashmap };
use std::io::{ io };

use sema::type::{ type };
use sema::context::{ sema_context };
use sema::type_resolve::{ type_resolve };

struct generic_data {
    generic_type: type,
    types: hashmap<str, type>
}

impl generic_data {
    pub func new() -> generic_data* {
        var res = generic_data::__alloc__();
        res->generic_type = type::instance();
        res->types = hashmap<str, type>::instance();
        return res;
    }

    pub func delete(self) {
        self->generic_type.delete();
        self->types.delete();
    }

    pub func copy(self) -> generic_data* {
        var res = generic_data::__alloc__();
        res->generic_type = self->generic_type.copy_instance();
        res->types = self->types.copy_instance();
        return res;
    }
}

pub struct generic_visitor {
    err: report*,
    ctx: sema_context*,
    root: root*,
    tr: type_resolve,
    generic_type_map: hashmap<str, generic_data>
}

impl generic_visitor {
    pub func instance(e: report*, c: sema_context*, p: package*) -> generic_visitor {
        return generic_visitor {
            err: e,
            ctx: c,
            root: nil,
            tr: type_resolve::instance(e, c, p),
            generic_type_map: hashmap<str, generic_data>::instance()
        };
    }

    pub func delete(self) {
        self->generic_type_map.delete();
    }

    func insert_into_symbol_table(self) -> u64 { return 0; }

    pub func scan_and_insert(self, n: root*) {
        self->root = n;

        self->generic_type_map.clear();
        self->visit_root(n);
        while (self->insert_into_symbol_table() != 0) {
            self->generic_type_map.clear();
            self->visit_root(n);
        }
    }
}

impl generic_visitor {
    func visit_ast(self, n: ast*) {
        match(n->kind) {
            ast_kind::ast_null => self->visit_null(n => ast_null*);
            ast_kind::ast_root => return; // do not visit root again
            ast_kind::ast_unary_operator =>
                self->visit_unary_operator(n => ast_unary_operator*);
            ast_kind::ast_binary_operator =>
                self->visit_binary_operator(n => ast_binary_operator*);
            ast_kind::ast_type_convert =>
                self->visit_type_convert(n => ast_type_convert*);
            ast_kind::ast_identifier =>
                self->visit_identifier(n => ast_identifier*);
            ast_kind::ast_nil_literal =>
                self->visit_nil_literal(n => ast_nil_literal*);
            ast_kind::ast_number_literal =>
                self->visit_number_literal(n => ast_number_literal*);
            ast_kind::ast_string_literal =>
                self->visit_string_literal(n => ast_string_literal*);
            ast_kind::ast_char_literal =>
                self->visit_char_literal(n => ast_char_literal*);
            ast_kind::ast_bool_literal =>
                self->visit_bool_literal(n => ast_bool_literal*);
            ast_kind::ast_array_literal =>
                self->visit_array_literal(n => ast_array_literal*);
            ast_kind::ast_call_index =>
                self->visit_call_index(n => ast_call_index*);
            ast_kind::ast_call_func_args =>
                self->visit_call_func_args(n => ast_call_func_args*);
            ast_kind::ast_get_field =>
                self->visit_get_field(n => ast_get_field*);
            ast_kind::ast_ptr_get_field =>
                self->visit_ptr_get_field(n => ast_ptr_get_field*);
            ast_kind::ast_init_pair =>
                self->visit_init_pair(n => ast_init_pair*);
            ast_kind::ast_initializer =>
                self->visit_initializer(n => ast_initializer*);
            ast_kind::ast_call_path =>
                self->visit_call_path(n => ast_call_path*);
            ast_kind::ast_call_id =>
                self->visit_call_id(n => ast_call_id*);
            ast_kind::ast_call => self->visit_call(n => ast_call*);
            ast_kind::ast_assignment =>
                self->visit_assignment(n => ast_assignment*);
            ast_kind::ast_cond_compile =>
                self->visit_cond_compile(n => ast_cond_compile*);
            ast_kind::ast_type_def =>
                self->visit_type_def(n => ast_type_def*);
            ast_kind::ast_generic_type_list =>
                self->visit_generic_type_list(n => ast_generic_type_list*);
            ast_kind::ast_enum_member =>
                self->visit_enum_member(n => ast_enum_member*);
            ast_kind::ast_enum_decl =>
                self->visit_enum_decl(n => ast_enum_decl*);
            ast_kind::ast_struct_field =>
                self->visit_struct_field(n => ast_struct_field*);
            ast_kind::ast_struct_decl =>
                self->visit_struct_decl(n => ast_struct_decl*);
            ast_kind::ast_param =>
                self->visit_param(n => ast_param*);
            ast_kind::ast_param_list =>
                self->visit_param_list(n => ast_param_list*);
            ast_kind::ast_func_decl => 
                self->visit_func_decl(n => ast_func_decl*);
            ast_kind::ast_impl =>
                self->visit_impl(n => ast_impl*);
            ast_kind::ast_use_stmt =>
                self->visit_use_stmt(n => ast_use_stmt*);
            ast_kind::ast_definition =>
                self->visit_definition(n => ast_definition*);
            ast_kind::ast_cond_stmt =>
                self->visit_cond_stmt(n => ast_cond_stmt*);
            ast_kind::ast_if_stmt =>
                self->visit_if_stmt(n => ast_if_stmt*);
            ast_kind::ast_match_case =>
                self->visit_match_case(n => ast_match_case*);
            ast_kind::ast_match_stmt =>
                self->visit_match_stmt(n => ast_match_stmt*);
            ast_kind::ast_while_stmt =>
                self->visit_while_stmt(n => ast_while_stmt*);
            ast_kind::ast_for_stmt =>
                self->visit_for_stmt(n => ast_for_stmt*);
            ast_kind::ast_in_stmt_expr =>
                self->visit_in_stmt_expr(n => ast_in_stmt_expr*);
            ast_kind::ast_ret_stmt =>
                self->visit_ret_stmt(n => ast_ret_stmt*);
            ast_kind::ast_continue_stmt =>
                self->visit_continue_stmt(n => ast_continue_stmt*);
            ast_kind::ast_break_stmt =>
                self->visit_break_stmt(n => ast_break_stmt*);
            ast_kind::ast_code_block =>
                self->visit_code_block(n => ast_code_block*);
        }
    }
}

impl generic_visitor {
    func visit_null(self, n: ast_null*) {
        // do nothing
    }

    func visit_root(self, n: root*) {
        for (var i = n->decls.iter(); !i.is_end(); i = i.next()) {
            var d = i.get().unwrap();
            match (d->kind) {
                ast_kind::ast_struct_decl => {
                    self->visit_struct_decl(d => ast_struct_decl*);
                }
                ast_kind::ast_func_decl => {
                    self->visit_func_decl(d => ast_func_decl*);
                }
                ast_kind::ast_impl => {
                    self->visit_impl(d => ast_impl*);
                }
                ast_kind::ast_cond_compile => {
                    self->visit_cond_compile(d => ast_cond_compile*);
                }
                _ => {}
            }
        }
    }

    func visit_struct_decl(self, n: ast_struct_decl*) {
        if (n->generic_types != nil) {
            return;
        }
        for (var i = n->fields.iter(); !i.is_end(); i = i.next()) {
            var f = i.get().unwrap();
            if (!f->is(ast_kind::ast_struct_field)) {
                continue;
            }
            self->visit_struct_field(f => ast_struct_field*);
        }
    }

    func visit_func_decl(self, n: ast_func_decl*) {
        if (n->generic_types != nil) {
            return;
        }
        self->visit_param_list(n->params);
        if (n->return_type != nil) {
            self->visit_type_def(n->return_type);
        }
        if (n->body != nil) {
            self->visit_code_block(n->body);
        }
    }

    func visit_impl(self, n: ast_impl*) {
        if (n->generic_types != nil) {
            return;
        }
        for (var i = n->methods.iter(); !i.is_end(); i = i.next()) {
            var f = i.get().unwrap();
            if (!f->is(ast_kind::ast_func_decl)) {
                continue;
            }
            self->visit_func_decl(f => ast_func_decl*);
        }
    }

    func visit_unary_operator(self, n: ast_unary_operator*) {
        self->visit_ast(n->value);
    }

    func visit_binary_operator(self, n: ast_binary_operator*) {
        self->visit_ast(n->left);
        self->visit_ast(n->right);
    }

    func visit_type_convert(self, n: ast_type_convert*) {
        self->visit_type_def(n->to);
    }

    func visit_identifier(self, n: ast_identifier*) {
        // do nothing
    }

    func visit_nil_literal(self, n: ast_nil_literal*) {
        // do nothing
    }

    func visit_number_literal(self, n: ast_number_literal*) {
        // do nothing
    }

    func visit_string_literal(self, n: ast_string_literal*) {
        // do nothing
    }

    func visit_char_literal(self, n: ast_char_literal*) {
        // do nothing
    }

    func visit_bool_literal(self, n: ast_bool_literal*) {
        // do nothing
    }

    func visit_array_literal(self, n: ast_array_literal*) {
        if (n->type != nil) {
            self->visit_type_def(n->type);
        }
    }

    func visit_call_index(self, n: ast_call_index*) {
        self->visit_ast(n->index);
    }

    func visit_call_func_args(self, n: ast_call_func_args*) {
        for (var i = n->args.iter(); !i.is_end(); i = i.next()) {
            self->visit_ast(i.get().unwrap());
        }
    }

    func visit_get_field(self, n: ast_get_field*) {
        // do nothing
    }

    func visit_ptr_get_field(self, n: ast_ptr_get_field*) {
        // do nothing
    }

    func visit_init_pair(self, n: ast_init_pair*) {
        self->visit_identifier(n->field);
        self->visit_ast(n->value);
    }

    func visit_initializer(self, n: ast_initializer*) {
        for (var i = n->pairs.iter(); !i.is_end(); i = i.next()) {
            self->visit_ast(i.get().unwrap());
        }
    }

    func visit_call_path(self, n: ast_call_path*) {
        // do nothing
    }

    func visit_call_id(self, n: ast_call_id*) {
        self->visit_identifier(n->id);
        if (n->generic_types != nil) {
            self->visit_generic_type_list(n->generic_types);
        }
    }

    func visit_call(self, n: ast_call*) {
        self->visit_call_id(n->head);
        for (var i = n->chain.iter(); !i.is_end(); i = i.next()) {
            self->visit_ast(i.get().unwrap());
        }
    }

    func visit_assignment(self, n: ast_assignment*) {
        self->visit_call(n->left);
        self->visit_ast(n->right);
    }

    func visit_cond_compile(self, n: ast_cond_compile*) {
        self->visit_ast(n->enabled_decl);
    }

    func visit_type_def(self, n: ast_type_def*) {
        // TODO
        // io::stdout().out("scanning [0x").out_hex(n => i64).out("]\n");
        self->visit_identifier(n->name);
        if (n->generic_types != nil) {
            self->visit_generic_type_list(n->generic_types);
        }
    }

    func visit_generic_type_list(self, n: ast_generic_type_list*) {
        for (var i = n->types.iter(); !i.is_end(); i = i.next()) {
            self->visit_ast(i.get().unwrap());
        }
    }

    func visit_enum_member(self, n: ast_enum_member*) {
        // do nothing
    }

    func visit_enum_decl(self, n: ast_enum_decl*) {
        // do nothing
    }

    func visit_struct_field(self, n: ast_struct_field*) {
        self->visit_identifier(n->name);
        self->visit_type_def(n->type);
    }

    func visit_param(self, n: ast_param*) {
        self->visit_identifier(n->name);
        if (n->type != nil) {
            self->visit_type_def(n->type);
        }
    }

    func visit_param_list(self, n: ast_param_list*) {
        for (var i = n->params.iter(); !i.is_end(); i = i.next()) {
            self->visit_ast(i.get().unwrap());
        }
    }

    func visit_use_stmt(self, n: ast_use_stmt*) {
        // do nothing
    }

    func visit_definition(self, n: ast_definition*) {
        if (n->type != nil) {
            self->visit_type_def(n->type);
        }
        self->visit_ast(n->value);
    }

    func visit_cond_stmt(self, n: ast_cond_stmt*) {
        for (var i = n->stmts.iter(); !i.is_end(); i = i.next()) {
            self->visit_ast(i.get().unwrap());
        }
    }

    func visit_if_stmt(self, n: ast_if_stmt*) {
        if (n->condition != nil) {
            self->visit_ast(n->condition);
        }
        if (n->body != nil) {
            self->visit_code_block(n->body);
        }
    }

    func visit_match_case(self, n: ast_match_case*) {
        self->visit_call(n->pattern);
        if (n->body != nil) {
            self->visit_code_block(n->body);
        }
    }

    func visit_match_stmt(self, n: ast_match_stmt*) {
        self->visit_ast(n->value);
        for (var i = n->cases.iter(); !i.is_end(); i = i.next()) {
            self->visit_ast(i.get().unwrap());
        }
    }

    func visit_while_stmt(self, n: ast_while_stmt*) {
        if (n->condition != nil) {
            self->visit_ast(n->condition);
        }
        if (n->body != nil) {
            self->visit_code_block(n->body);
        }
    }

    func visit_for_stmt(self, n: ast_for_stmt*) {
        if (n->init != nil) {
            self->visit_definition(n->init);
        }
        if (n->condition != nil) {
            self->visit_ast(n->condition);
        }
        if (n->update != nil) {
            self->visit_ast(n->update);
        }
        if (n->body != nil) {
            self->visit_code_block(n->body);
        }
    }

    func visit_in_stmt_expr(self, n: ast_in_stmt_expr*) {
        self->visit_ast(n->value);
    }

    func visit_ret_stmt(self, n: ast_ret_stmt*) {
        if (n->value != nil) {
            self->visit_ast(n->value);
        }
    }

    func visit_continue_stmt(self, n: ast_continue_stmt*) {
        // do nothing
    }

    func visit_break_stmt(self, n: ast_break_stmt*) {
        // do nothing
    }

    func visit_code_block(self, n: ast_code_block*) {
        for (var i = n->stmts.iter(); !i.is_end(); i = i.next()) {
            self->visit_ast(i.get().unwrap());
        }
    }
}