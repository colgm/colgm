use err::report::{ report };
use err::panic::{ panic };

use std::io::{ io };
use std::libc::{ free };
use std::str::{ str };

use package::{ package };

use ast::ast::*;

use sema::context::{ sema_context };
use sema::type_resolve::{ type_resolve };

use util::cli::{ cli_option };

pub struct sema {
    err: report*,
    root: root*,
    ctx: sema_context*,
    co: cli_option*,
    tr: type_resolve,
    in_loop_level: i64,
    impl_struct_name: str
}

impl sema {
    pub func instance(err: report*,
                      pkg: package*,
                      ctx: sema_context*,
                      co: cli_option*) -> sema {
        return sema {
            err: err,
            root: nil,
            ctx: ctx,
            co: co,
            tr: type_resolve::instance(err, ctx, pkg),
            in_loop_level: 0,
            impl_struct_name: str::from("")
        };
    }

    pub func delete(self) {}
}

impl sema {
    pub func analyse(self, root: root*) {
        self->ctx->this_file.clear();
        self->ctx->this_file.append_str(root->base.location->file.__ptr__());
        self->root = root;

        self->resolve_function_block(root);
    }

    func resolve_function_block(self, ast_root: root*) {
        for (var i = ast_root->decls.iter(); !i.is_end(); i = i.next()) {
            var node = i.get().unwrap();
            if (node->is(ast_kind::ast_impl)) {
                self->resolve_impl(node => ast_impl*);
            }
            if (node->is(ast_kind::ast_func_decl)) {
                self->resolve_global_func(node => ast_func_decl*);
            }
        }
    }

    func resolve_impl(self, node: ast_impl*) {
        // do not resolve generic impl
        if (node->generic_types != nil) {
            return;
        }

        var loc_file = self->ctx->this_file.copy_instance();
        if (self->ctx->global_symbol()->has(node->name.__ptr__())) {
            loc_file.clear();
            loc_file.append_str(
                self->ctx->global_symbol()
                         ->get(node->name.__ptr__())
                         ->loc_file.__ptr__()
            );
        }

        var dm = self->ctx->global->domain.get(loc_file.__ptr__());
        if (!dm->structs.has(node->name.__ptr__())) {
            var info = str::from("cannot implement \"");
            info.append_str(node->name.__ptr__());
            info.append_i8_vec("\", because it is not defined in the same file");
            self->err->error(node->base.location, info.c_str);
            info.delete();
            return;
        }
    }

    func resolve_global_func(self, node: ast_func_decl*) {
        // do not resolve generic function
        if (node->generic_types != nil) {
            return;
        }

        var dm = self->ctx->global->domain.get(self->ctx->this_file.__ptr__());
        if (!dm->functions.has(node->name.__ptr__())) {
            var info = str::from("cannot find function \"");
            info.append_str(node->name.__ptr__());
            info.append_i8_vec("\"");
            self->err->error(node->base.location, info.c_str);
            info.delete();
            return;
        }
    }
}