use err::report::{ report };
use err::panic::{ panic, unreachable };

use std::io::{ io };
use std::libc::{ free, itoa };
use std::math::{ isinf, isnan };
use std::str::{ str };
use std::ptr::{ ptr };
use std::vec::{ primitive_vec };

use package::{ package };

use ast::ast::*;

use sema::structure::{ colgm_struct };
use sema::function::{ colgm_func };
use sema::context::{ sema_context };
use sema::type::{ type };
use sema::type_resolve::{ type_resolve };

use util::cli::{ cli_option };
use util::to_num::{ str_to_num, hex_to_i64, oct_to_i64 };

pub struct sema {
    err: report*,
    root: root*,
    ctx: sema_context*,
    co: cli_option*,
    pkg: package*,
    tr: type_resolve,
    in_loop_level: i64,
    impl_struct_name: str
}

impl sema {
    pub func instance(err: report*,
                      pkg: package*,
                      ctx: sema_context*,
                      co: cli_option*) -> sema {
        return sema {
            err: err,
            root: nil,
            ctx: ctx,
            co: co,
            pkg: pkg,
            tr: type_resolve::instance(err, ctx, pkg),
            in_loop_level: 0,
            impl_struct_name: str::from("")
        };
    }

    pub func delete(self) {
        // nothing to do now
    }
}

impl sema {
    func resolve_nil_literal(self, n: ast_nil_literal*) -> type {
        var ty = type::i8_type(1);
        n->base.resolved_type.reset_with(ty.__ptr__());
        return ty;
    }

    func resolve_number_literal(self, n: ast_number_literal*) -> type {
        var result = str_to_num(n->literal.c_str);
        if (isinf(result) || isnan(result)) {
            var info = str::from("invalid number \"");
            info.append_str(n->literal.__ptr__());
            info.append_char('\"');
            self->err->error(n->base.location, info.c_str);
            info.delete();
            return type::error_type();
        }
        if (n->literal.contains('.') || n->literal.contains('e')) {
            var ty = type::f64_type();
            n->base.resolved_type.reset_with(ty.__ptr__());
            return ty;
        }
        if (n->literal.size > 2 && n->literal.c_str[1] == 'o') {
            var buff = [i8; 128];
            itoa(oct_to_i64(n->literal.c_str), buff, 8);
            n->literal.clear();
            n->literal.append_i8_vec(buff);
            var ty = type::u64_type();
            n->base.resolved_type.reset_with(ty.__ptr__());
            return ty;
        }
        if (n->literal.size > 2 && n->literal.c_str[0] == 'x') {
            var buff = [i8; 128];
            itoa(hex_to_i64(n->literal.c_str), buff, 8);
            n->literal.clear();
            n->literal.append_i8_vec(buff);
            var ty = type::u64_type();
            n->base.resolved_type.reset_with(ty.__ptr__());
            return ty;
        }
        var default_ty = type::i64_type();
        n->base.resolved_type.reset_with(default_ty.__ptr__());
        return default_ty;
    }

    func resolve_string_literal(self, n: ast_string_literal*) -> type {
        var ty = type::i8_type(1);
        self->ctx->constant_string.insert(n->literal.__ptr__());
        n->base.resolved_type.reset_with(ty.__ptr__());
        return ty;
    }

    func resolve_char_literal(self, n: ast_char_literal*) -> type {
        var ty = type::i8_type(0);
        n->base.resolved_type.reset_with(ty.__ptr__());
        return ty;
    }

    func resolve_bool_literal(self, n: ast_bool_literal*) -> type {
        var ty = type::bool_type();
        n->base.resolved_type.reset_with(ty.__ptr__());
        return ty;
    }

    func resolve_array_literal(self, n: ast_array_literal*) -> type {
        var size_infer = self->resolve_number_literal(n->size);
        if (!size_infer.is_integer()) {
            self->err->error(n->base.location, "array size must be integer");
            size_infer.delete();
            return type::error_type();
        }
        size_infer.delete();

        var type_infer = self->tr.resolve(n->type);
        type_infer.pointer_depth += 1;
        type_infer.is_immutable = true;
        n->base.resolved_type.reset_with(type_infer.__ptr__());
        return type_infer;
    }

    func resolve_unary_neg(self, n: ast_unary_operator*) -> type {
        // TODO
        return type::error_type();
    }

    func resolve_unary_bnot(self, n: ast_unary_operator*) -> type {
        // TODO
        return type::error_type();
    }

    func resolve_unary_lnot(self, n: ast_unary_operator*) -> type {
        // TODO
        return type::bool_type();
    }

    func resolve_unary_operator(self, n: ast_unary_operator*) -> type {
        match (n->kind) {
            unary_kind::neg => {
                var ty = self->resolve_unary_neg(n);
                n->base.resolved_type.reset_with(ty.__ptr__());
                return ty;
            }
            unary_kind::bnot => {
                var ty = self->resolve_unary_bnot(n);
                n->base.resolved_type.reset_with(ty.__ptr__());
                return ty;
            }
            unary_kind::lnot => {
                var ty = self->resolve_unary_lnot(n);
                n->base.resolved_type.reset_with(ty.__ptr__());
                return ty;
            }
        }

        unreachable();
        return type::error_type();
    }

    func resolve_comparison_operator(self, n: ast_binary_operator*) -> type {
        // TODO
        return type::error_type();
    }

    func resolve_logical_operator(self, n: ast_binary_operator*) -> type {
        // TODO
        return type::error_type();
    }

    func resolve_arithmetic_operator(self, n: ast_binary_operator*) -> type {
        // TODO
        return type::error_type();
    }

    func resolve_bitwise_operator(self, n: ast_binary_operator*) -> type {
        // TODO
        return type::error_type();
    }

    func resolve_binary_operator(self, n: ast_binary_operator*) -> type {
        // TODO
        match (n->kind) {
            binary_kind::add => {
                var ty = self->resolve_arithmetic_operator(n);
                n->base.resolved_type.reset_with(ty.__ptr__());
                return ty;
            }
            binary_kind::sub => {
                var ty = self->resolve_arithmetic_operator(n);
                n->base.resolved_type.reset_with(ty.__ptr__());
                return ty;
            }
            binary_kind::mul => {
                var ty = self->resolve_arithmetic_operator(n);
                n->base.resolved_type.reset_with(ty.__ptr__());
                return ty;
            }
            binary_kind::div => {
                var ty = self->resolve_arithmetic_operator(n);
                n->base.resolved_type.reset_with(ty.__ptr__());
                return ty;
            }
            binary_kind::rem => {
                var ty = self->resolve_arithmetic_operator(n);
                n->base.resolved_type.reset_with(ty.__ptr__());
                return ty;
            }
            binary_kind::cmpeq => {
                var ty = self->resolve_comparison_operator(n);
                n->base.resolved_type.reset_with(ty.__ptr__());
                return ty;
            }
            binary_kind::cmpne => {
                var ty = self->resolve_comparison_operator(n);
                n->base.resolved_type.reset_with(ty.__ptr__());
                return ty;
            }
            binary_kind::less => {
                var ty = self->resolve_comparison_operator(n);
                n->base.resolved_type.reset_with(ty.__ptr__());
                return ty;
            }
            binary_kind::leq => {
                var ty = self->resolve_comparison_operator(n);
                n->base.resolved_type.reset_with(ty.__ptr__());
                return ty;
            }
            binary_kind::grt => {
                var ty = self->resolve_comparison_operator(n);
                n->base.resolved_type.reset_with(ty.__ptr__());
                return ty;
            }
            binary_kind::geq => {
                var ty = self->resolve_comparison_operator(n);
                n->base.resolved_type.reset_with(ty.__ptr__());
                return ty;
            }
            binary_kind::cmpand => {
                var ty = self->resolve_logical_operator(n);
                n->base.resolved_type.reset_with(ty.__ptr__());
                return ty;
            }
            binary_kind::cmpor => {
                var ty = self->resolve_logical_operator(n);
                n->base.resolved_type.reset_with(ty.__ptr__());
                return ty;
            }
            binary_kind::band => {
                var ty = self->resolve_bitwise_operator(n);
                n->base.resolved_type.reset_with(ty.__ptr__());
                return ty;
            }
            binary_kind::bor => {
                var ty = self->resolve_bitwise_operator(n);
                n->base.resolved_type.reset_with(ty.__ptr__());
                return ty;
            }
            binary_kind::bxor => {
                var ty = self->resolve_bitwise_operator(n);
                n->base.resolved_type.reset_with(ty.__ptr__());
                return ty;
            }
        }

        unreachable();
        return type::error_type();
    }

    func resolve_type_convert(self, n: ast_type_convert*) -> type {
        var res = self->resolve_expression(n->from);
        var type_res = self->tr.resolve(n->to);
        // TODO
        res.delete();
        return type_res;
    }

    func resolve_call(self, n: ast_call*) -> type {
        return type::error_type();
    }

    func resolve_assignment(self, n: ast_assignment*) -> type {
        return type::error_type();
    }

    func resolve_expression(self, n: ast*) -> type {
        match (n->kind) {
            ast_kind::ast_unary_operator => {
                return self->resolve_unary_operator(n => ast_unary_operator*);
            }
            ast_kind::ast_binary_operator => {
                return self->resolve_binary_operator(n => ast_binary_operator*);
            }
            ast_kind::ast_type_convert => {
                return self->resolve_type_convert(n => ast_type_convert*);
            }
            ast_kind::ast_nil_literal => {
                return self->resolve_nil_literal(n => ast_nil_literal*);
            }
            ast_kind::ast_number_literal => {
                return self->resolve_number_literal(n => ast_number_literal*);
            }
            ast_kind::ast_string_literal => {
                return self->resolve_string_literal(n => ast_string_literal*);
            }
            ast_kind::ast_char_literal => {
                return self->resolve_char_literal(n => ast_char_literal*);
            }
            ast_kind::ast_bool_literal => {
                return self->resolve_bool_literal(n => ast_bool_literal*);
            }
            ast_kind::ast_array_literal => {
                return self->resolve_array_literal(n => ast_array_literal*);
            }
            ast_kind::ast_call => {
                return self->resolve_call(n => ast_call*);
            }
            ast_kind::ast_assignment => {
                return self->resolve_assignment(n => ast_assignment*);
            }
            _ => { unreachable(); }
        }
        return type::error_type();
    }
}

impl sema {
    func check_defined_variable_is_void(self, n: ast_definition*, ty: type*) {
        var ty_path = ty->full_path_name(self->pkg, true);
        io::stdout().out(n->name.c_str).out(" : ").out(ty_path.c_str).endln();
        ty_path.delete();
        if (!ty->is_void()) {
            return;
        }
        self->err->error(
            n->base.location,
            "cannot define variable with void type"
        );
    }

    func resolve_definition(self, n: ast_definition*, func_self: colgm_func*) {
        var name = n->name.__ptr__();
        // check if conflicts with local variable
        if (self->ctx->find_local(name)) {
            var info = str::from("redefinition of variable \"");
            info.append_str(name);
            info.append_i8_vec("\"");
            self->err->error(n->base.location, info.c_str);
            info.delete();
            return;
        }

        // check if conflicts with global symbol
        if (self->ctx->global_symbol()->has(name)) {
            var info = str::from("variable \"");
            info.append_str(name);
            info.append_i8_vec("\" conflicts with global symbol");
            self->err->error(n->base.location, info.c_str);
            info.delete();
            return;
        }

        // check if not initialized
        if (n->value == nil) {
            self->err->error(n->base.location, "variable must be initialized");
            return;
        }

        if (n->type == nil) {
            var real_type = self->resolve_expression(n->value);
            n->base.resolved_type.reset_with(real_type.__ptr__());
            self->ctx->add_local_var(name, real_type.__ptr__());
            self->check_defined_variable_is_void(n, real_type.__ptr__());
            real_type.delete();
            return;
        }

        // TODO
        var expect_type = self->tr.resolve(n->type);
        var real_type = self->resolve_expression(n->value);

        expect_type.delete();
        real_type.delete();
    }

    func resolve_if_stmt(self, n: ast_if_stmt*, func_self: colgm_func*) {
        if (n->condition != nil) {
            var ty = self->resolve_expression(n->condition => ast*);
            if (!ty.is_bool() && !ty.is_error()) {
                self->err->error(n->condition->location,
                                 "condition must be bool");
            }
            ty.delete();
        }

        // resolve block
        if (n->body != nil) {
            self->in_loop_level += 1;
            self->resolve_code_block(n->body, func_self);
            self->in_loop_level -= 1;
        }
    }

    func resolve_cond_stmt(self, n: ast_cond_stmt*, func_self: colgm_func*) {
        for (var i = n->stmts.iter(); !i.is_end(); i = i.next()) {
            self->resolve_if_stmt(i.get().unwrap() => ast_if_stmt*, func_self);
        }
    }

    func resolve_match_stmt(self, n: ast_match_stmt*, func_self: colgm_func*) {
        // TODO
    }

    func resolve_while_stmt(self, n: ast_while_stmt*, func_self: colgm_func*) {
        var infer = self->resolve_expression(n->condition => ast*);
        if (!infer.is_bool() && !infer.is_error()) {
            self->err->error(n->condition->location,
                             "condition must be bool");
        }
        infer.delete();

        // resolve block
        if (n->body != nil) {
            self->in_loop_level += 1;
            self->resolve_code_block(n->body, func_self);
            self->in_loop_level -= 1;
        }
    }

    func resolve_for_stmt(self, n: ast_for_stmt*, func_self: colgm_func*) {
        self->ctx->push_scope_level();
        if (n->init != nil) {
            self->resolve_definition(n->init, func_self);
        }
        if (n->condition != nil) {
            var ty = self->resolve_expression(n->condition => ast*);
            if (!ty.is_bool() && !ty.is_error()) {
                self->err->error(n->condition->location,
                                 "condition must be bool");
            }
            ty.delete();
        }
        if (n->update != nil) {
            var ty = self->resolve_expression(n->update => ast*);
            ty.delete();
        }
        if (n->body != nil) {
            self->in_loop_level += 1;
            self->resolve_code_block(n->body, func_self);
            self->in_loop_level -= 1;
        }
        self->ctx->pop_scope_level();
    }

    func resolve_in_stmt_expr(self, n: ast_in_stmt_expr*, func_self: colgm_func*) {
        var ty = self->resolve_expression(n->value => ast*);
        n->base.resolved_type.reset_with(ty.__ptr__());
        ty.delete();
    }

    func resolve_ret_stmt(self, n: ast_ret_stmt*, func_self: colgm_func*) {
        // TODO
    }

    func resolve_statement(self, n: ast*, func_self: colgm_func*) {
        match (n->kind) {
            ast_kind::ast_definition =>
                self->resolve_definition(n => ast_definition*, func_self);
            ast_kind::ast_cond_stmt =>
                self->resolve_cond_stmt(n => ast_cond_stmt*, func_self);
            ast_kind::ast_match_stmt =>
                self->resolve_match_stmt(n => ast_match_stmt*, func_self);
            ast_kind::ast_while_stmt =>
                self->resolve_while_stmt(n => ast_while_stmt*, func_self);
            ast_kind::ast_for_stmt =>
                self->resolve_for_stmt(n => ast_for_stmt*, func_self);
            ast_kind::ast_in_stmt_expr =>
                self->resolve_in_stmt_expr(n => ast_in_stmt_expr*, func_self);
            ast_kind::ast_ret_stmt =>
                self->resolve_ret_stmt(n => ast_ret_stmt*, func_self);
            ast_kind::ast_break_stmt => {
                if (self->in_loop_level == 0) {
                    self->err->error(n->location,
                                     "break statement is not in loop");
                }
            }
            ast_kind::ast_continue_stmt => {
                if (self->in_loop_level == 0) {
                    self->err->error(n->location,
                                     "continue statement is not in loop");
                }
            }
            _ => { unreachable(); }
        }
    }

    func resolve_code_block(self, node: ast_code_block*, func_self: colgm_func*) {
        self->ctx->push_scope_level();
        for (var i = node->stmts.iter(); !i.is_end(); i = i.next()) {
            var n = i.get().unwrap();
            self->resolve_statement(n, func_self);
            if (n->is(ast_kind::ast_ret_stmt) ||
                n->is(ast_kind::ast_break_stmt) ||
                n->is(ast_kind::ast_continue_stmt)) {
                self->report_unreachable_statements(node);
                break;
            }
        }
        self->ctx->pop_scope_level();
    }
}

impl sema {
    pub func analyse(self, root: root*) {
        self->ctx->this_file.clear();
        self->ctx->this_file.append_str(root->base.location->file.__ptr__());
        self->root = root;

        self->resolve_function_block(root);
    }

    func report_unreachable_statements(self, n: ast_code_block*) {
        var flag_block_ended = false;
        var unreachable_statements = primitive_vec<ptr<ast>>::instance();

        for (var i = n->stmts.iter(); !i.is_end(); i = i.next()) {
            var tmp = i.get().unwrap();
            if (flag_block_ended) {
                unreachable_statements.push(ptr<ast>::wrap(tmp));
            }
            if (tmp->is(ast_kind::ast_ret_stmt) ||
                tmp->is(ast_kind::ast_break_stmt) ||
                tmp->is(ast_kind::ast_continue_stmt)) {
                flag_block_ended = true;
            }
        }

        if (unreachable_statements.empty()) {
            unreachable_statements.delete();
            return;
        }

        var unreachable_location = unreachable_statements
                                   .get(0).unwrap()->location->copy();
        for (var i = unreachable_statements.iter(); !i.is_end(); i = i.next()) {
            var tmp = i.get().unwrap();
            unreachable_location->end_column = tmp->location->end_column;
            unreachable_location->end_line = tmp->location->end_line;
        }

        if (unreachable_statements.size > 1) {
            self->err->error(unreachable_location,
                             "unreachable statements");
        } else {
            self->err->error(unreachable_location,
                             "unreachable statement");
        }

        unreachable_statements.delete();
        unreachable_location->delete();
        free(unreachable_location => i8*);
    }

    func report_top_level_block_has_no_return(self,
                                              n: ast_code_block*,
                                              func_self: colgm_func*) {
        var flag_has_return = false;
        for (var i = n->stmts.iter(); !i.is_end(); i = i.next()) {
            var tmp = i.get().unwrap();
            if (tmp->is(ast_kind::ast_ret_stmt)) {
                flag_has_return = true;
                break;
            }
        }

        if (flag_has_return) {
            return;
        }

        if (func_self->return_type.is_void()) {
            var rs = ast_ret_stmt::new(n->base.location->copy());
            n->stmts.push(ptr<ast>::wrap(rs => ast*));
            return;
        }

        self->err->error(n->base.location, "function has no return statement");
    }

    func resolve_function_block(self, ast_root: root*) {
        for (var i = ast_root->decls.iter(); !i.is_end(); i = i.next()) {
            var node = i.get().unwrap();
            if (node->is(ast_kind::ast_impl)) {
                self->resolve_impl(node => ast_impl*);
            }
            if (node->is(ast_kind::ast_func_decl)) {
                self->resolve_global_func(node => ast_func_decl*);
            }
        }
    }

    func resolve_impl(self, node: ast_impl*) {
        // do not resolve generic impl
        if (node->generic_types != nil) {
            return;
        }

        var loc_file = self->ctx->this_file.copy_instance();
        if (self->ctx->global_symbol()->has(node->name.__ptr__())) {
            loc_file.clear();
            loc_file.append_str(
                self->ctx->global_symbol()
                         ->get(node->name.__ptr__())
                         ->loc_file.__ptr__()
            );
        }

        var dm = self->ctx->global->domain.get(loc_file.__ptr__());
        if (!dm->structs.has(node->name.__ptr__())) {
            var info = str::from("cannot implement \"");
            info.append_str(node->name.__ptr__());
            info.append_i8_vec("\", because it is not defined in the same file");
            self->err->error(node->base.location, info.c_str);
            info.delete();
            return;
        }

        var struct_self = dm->structs.get(node->name.__ptr__());
        self->impl_struct_name.clear();
        self->impl_struct_name.append_str(node->name.__ptr__());
        for (var i = node->methods.iter(); !i.is_end(); i = i.next()) {
            var func_node = i.get().unwrap();
            self->resolve_method(func_node => ast_func_decl*, struct_self);
        }
        self->impl_struct_name.clear();
    }

    func resolve_global_func(self, node: ast_func_decl*) {
        // do not resolve generic function
        if (node->generic_types != nil) {
            return;
        }

        var dm = self->ctx->global->domain.get(self->ctx->this_file.__ptr__());
        if (!dm->functions.has(node->name.__ptr__())) {
            var info = str::from("cannot find function \"");
            info.append_str(node->name.__ptr__());
            info.append_i8_vec("\"");
            self->err->error(node->base.location, info.c_str);
            info.delete();
            return;
        }

        var func_self = dm->functions.get(node->name.__ptr__());
        if (node->body == nil) {
            if (!func_self->is_extern) {
                var info = str::from("non-extern function \"");
                info.append_str(node->name.__ptr__());
                info.append_i8_vec("\" is not implemented");
                self->err->error(node->base.location, info.c_str);
                info.delete();
            }
            return;
        }

        self->ctx->push_scope_level();
        for (var p = func_self->unordered_params.iter(); !p.is_end(); p = p.next()) {
            var param_name = p.key();
            var param_type = p.value();
            self->ctx->add_local_var(param_name, param_type);
        }
        for (var i = node->body->stmts.iter(); !i.is_end(); i = i.next()) {
            var n = i.get().unwrap();
            self->resolve_statement(n, func_self);
            if (n->is(ast_kind::ast_ret_stmt) ||
                n->is(ast_kind::ast_break_stmt) ||
                n->is(ast_kind::ast_continue_stmt)) {
                self->report_unreachable_statements(node->body);
                break;
            }
        }
        self->report_top_level_block_has_no_return(node->body, func_self);
        self->ctx->pop_scope_level();
    }

    func resolve_method(self, node: ast_func_decl*, struct_self: colgm_struct*) {
        if (node->body == nil) {
            self->err->error(node->base.location,
                             "method should be implemented");
            return;
        }
        
        var method_self: colgm_func* = nil;
        if (struct_self->methods.has(node->name.__ptr__())) {
            method_self = struct_self->methods.get(node->name.__ptr__());
        } else {
            method_self = struct_self->static_methods.get(node->name.__ptr__());
        }

        self->ctx->push_scope_level();
        for (var p = method_self->unordered_params.iter(); !p.is_end(); p = p.next()) {
            var param_name = p.key();
            var param_type = p.value();
            self->ctx->add_local_var(param_name, param_type);
        }
        for (var i = node->body->stmts.iter(); !i.is_end(); i = i.next()) {
            var n = i.get().unwrap();
            self->resolve_statement(n, method_self);
            if (n->is(ast_kind::ast_ret_stmt) ||
                n->is(ast_kind::ast_break_stmt) ||
                n->is(ast_kind::ast_continue_stmt)) {
                self->report_unreachable_statements(node->body);
                break;
            }
        }
        self->report_top_level_block_has_no_return(node->body, method_self);
        self->ctx->pop_scope_level();
    }
}