use std::str::{ str };
use std::libc::{ free };
use std::vec::{ vec };
use std::map::{ hashmap };
use std::io::{ io };

use err::span::{ span };
use ast::ast::{ ast, ast_func_decl };
use sema::type::{ type };

pub struct colgm_func {
    name: str,
    location: span,
    return_type: type,
    param_name: vec<str>,
    param_type: vec<type>,
    unordered_params: hashmap<str, type>,

    generic_template: vec<str>,
    generic_func_decl: ast_func_decl*,

    is_public: bool,
    is_extern: bool
}

impl colgm_func {
    pub func delete(self) {
        self->name.delete();
        self->location.delete();
        self->return_type.delete();
        self->param_name.delete();
        self->param_type.delete();
        self->unordered_params.delete();
        self->generic_template.delete();
        if (self->generic_func_decl != nil) {
            var tmp = self->generic_func_decl => ast*;
            tmp->delete();
            free(tmp => i8*);
        }
    }

    pub func copy(self) -> colgm_func* {
        var res = colgm_func::__alloc__();
        res->name = self->name.copy_instance();
        res->location = self->location.copy_instance();
        res->return_type = self->return_type.copy_instance();
        res->param_name = self->param_name.copy_instance();
        res->param_type = self->param_type.copy_instance();
        res->unordered_params = self->unordered_params.copy_instance();
        res->generic_template = self->generic_template.copy_instance();
        if (self->generic_func_decl != nil) {
            res->generic_func_decl = self->generic_func_decl->copy();
        } else {
            res->generic_func_decl = nil;
        }
        res->is_public = self->is_public;
        res->is_extern = self->is_extern;
        return res;
    }
}

impl colgm_func {
    pub func dump(self, out: io) {}
}