use std::str::{ str };
use std::libc::{ free };
use std::vec::{ vec };
use std::map::{ hashmap };
use std::io::{ io };
use std::panic::{ panic };

use err::span::{ span };
use ast::ast::{ ast, ast_func_decl };
use util::package::{ package };
use sema::type::{ type };

pub struct colgm_func {
    name: str,
    location: span,
    return_type: type,
    param_name: vec<str>,
    param_type: vec<type>,
    param_location: hashmap<str, span>,
    unordered_params: hashmap<str, type>,

    generic_template: vec<str>,
    generic_func_decl: ast_func_decl*,

    is_public: bool,
    is_extern: bool
}

impl colgm_func {
    pub func new(name: str*, loc: span*, ret_type: type*) -> colgm_func* {
        var res = colgm_func::__alloc__();
        if (res == nil) {
            panic("failed to allocate memory");
        }
        res->name = name->clone();
        res->location = loc->clone();
        res->return_type = ret_type->clone();
        res->param_name = vec<str>::instance();
        res->param_type = vec<type>::instance();
        res->param_location = hashmap<str, span>::instance();
        res->unordered_params = hashmap<str, type>::instance();
        res->generic_template = vec<str>::instance();
        res->generic_func_decl = nil;

        res->is_public = false;
        res->is_extern = false;
        return res;
    }

    pub func instance(name: str*, loc: span*, ret_type: type*) -> colgm_func {
        return colgm_func {
            name: name->clone(),
            location: loc->clone(),
            return_type: ret_type->clone(),
            param_name: vec<str>::instance(),
            param_type: vec<type>::instance(),
            param_location: hashmap<str, span>::instance(),
            unordered_params: hashmap<str, type>::instance(),
            generic_template: vec<str>::instance(),
            generic_func_decl: nil,
            is_public: false,
            is_extern: false
        };
    }

    pub func delete(self) {
        self.name.delete();
        self.location.delete();
        self.return_type.delete();
        self.param_name.delete();
        self.param_type.delete();
        self.param_location.delete();
        self.unordered_params.delete();
        self.generic_template.delete();
        if (self.generic_func_decl != nil) {
            var tmp = self.generic_func_decl => ast*;
            tmp->delete();
            free(tmp => i8*);
        }
    }

    pub func clone(self) -> colgm_func {
        var res = colgm_func {
            name: self.name.clone(),
            location: self.location.clone(),
            return_type: self.return_type.clone(),
            param_name: self.param_name.clone(),
            param_type: self.param_type.clone(),
            param_location: self.param_location.clone(),
            unordered_params: self.unordered_params.clone(),
            generic_template:self.generic_template.clone(),
            generic_func_decl: nil,
            is_public: self.is_public,
            is_extern: self.is_extern
        };
        if (self.generic_func_decl != nil) {
            res.generic_func_decl = self.generic_func_decl->copy();
        }
        return res;
    }
}

impl colgm_func {
    pub func dump(self, out: io, pkg: package*, indent: i8*) {
        out.out(indent).out("  ");
        if (self.is_extern) {
            out.green().out("extern ").reset();
        }
        if (self.is_public) {
            out.green().out("pub ").reset();
        }
        out.cyan().out("func ").reset();
        out.white().out(self.name.c_str).reset();

        // print generic template
        if (self.generic_template.size > 0) {
            out.out("<");
            foreach (var i; self.generic_template) {
                out.out(i.get()->c_str);
                if (i.index() != self.generic_template.size - 1) {
                    out.out(", ");
                }
            }
            out.out(">");
        }

        out.out("(");
        foreach (var i; self.param_name) {
            out.out(i.get()->c_str).out(": ");
            self.param_type.get(i.index())->dump(out, pkg);
            if (i.index() != self.param_name.size - 1) {
                out.out(", ");
            }
        }
        out.out(") -> ");
        self.return_type.dump(out, pkg);
        out.out("\n");
    }
}