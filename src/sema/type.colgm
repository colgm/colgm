use std::str::{ str };
use std::vec::{ vec };
use std::io::{ io };

use err::panic::{ panic };
use package::{ package };

pub struct method_info {
    flag_is_static: bool,
    flag_is_normal: bool,
    method_name: str
}

impl method_info {
    pub func instance() -> method_info {
        var res = method_info {
            flag_is_static: false,
            flag_is_normal: false,
            method_name: str::from("")
        };
        return res;
    }

    pub func copy_instance(self) -> method_info {
        var res = method_info {
            flag_is_static: self->flag_is_static,
            flag_is_normal: self->flag_is_normal,
            method_name: self->method_name.copy_instance()
        };
        return res;
    }

    pub func delete(self) {
        self->method_name.delete();
    }
}

pub struct type {
    name: str,
    loc_file: str,
    pointer_depth: i64,
    is_global_sym: bool,          // global symbol
    is_global_func: bool,         // global function
    is_enum: bool,                // enum
    is_immutable: bool,           // immutable
    is_generic_placeholder: bool, // generic placeholder

    stm_info: method_info,        // struct methods
    prm_info: method_info,        // primitive type methods(intrinsic)

    generics: vec<type>
}

impl type {
    pub func delete(self) {
        self->name.delete();
        self->loc_file.delete();
        self->stm_info.delete();
        self->prm_info.delete();
        self->generics.delete();
    }

    pub func reset_with(self, t: type*) {
        self->delete();
        self->name = t->name.copy_instance();
        self->loc_file = t->loc_file.copy_instance();
        self->pointer_depth = t->pointer_depth;
        self->is_global_sym = t->is_global_sym;
        self->is_global_func = t->is_global_func;
        self->is_enum = t->is_enum;
        self->is_immutable = t->is_immutable;
        self->is_generic_placeholder = t->is_generic_placeholder;
        self->stm_info = t->stm_info.copy_instance();
        self->prm_info = t->prm_info.copy_instance();
        self->generics = t->generics.copy_instance();
    }

    pub func copy(self) -> type* {
        var res = type::__alloc__();
        res->name = self->name.copy_instance();
        res->loc_file = self->loc_file.copy_instance();
        res->pointer_depth = self->pointer_depth;
        res->is_global_sym = self->is_global_sym;
        res->is_global_func = self->is_global_func;
        res->is_enum = self->is_enum;
        res->is_immutable = self->is_immutable;
        res->is_generic_placeholder = self->is_generic_placeholder;
        res->stm_info = self->stm_info.copy_instance();
        res->prm_info = self->prm_info.copy_instance();
        res->generics = self->generics.copy_instance();
        return res;
    }

    pub func copy_instance(self) -> type {
        return type {
            name: self->name.copy_instance(),
            loc_file: self->loc_file.copy_instance(),
            pointer_depth: self->pointer_depth,
            is_global_sym: self->is_global_sym,
            is_global_func: self->is_global_func,
            is_enum: self->is_enum,
            is_immutable: self->is_immutable,
            is_generic_placeholder: self->is_generic_placeholder,
            stm_info: self->stm_info.copy_instance(),
            prm_info: self->prm_info.copy_instance(),
            generics: self->generics.copy_instance()
        };
    }
}

impl type {
    pub func check_pointer_depth(self) {
        if (self->pointer_depth >= 0) {
            return;
        }
        io::stderr().out("invalid pointer depth: ")
                   .out_i64(self->pointer_depth);
        panic("type::check_pointer_depth(): invalid pointer depth");
    }
}

impl type {
    func default_init(self) {
        self->name = str::from("");
        self->loc_file = str::from("");
        self->pointer_depth = 0;
        self->is_global_sym = false;
        self->is_global_func = false;
        self->is_enum = false;
        self->is_immutable = false;
        self->is_generic_placeholder = false;
        self->stm_info = method_info::instance();
        self->prm_info = method_info::instance();
        self->generics = vec<type>::instance();
    }

    pub func instance() -> type {
        var res = type {};
        res.default_init();
        return res;
    }

    pub func is_pointer(self) -> bool {
        return self->pointer_depth > 0;
    }

    pub func is_void(self) -> bool {
        return self->name.eq_const("void") && self->pointer_depth == 0;
    }

    pub func error_type() -> type {
        var res = type::instance();
        res.name.append_i8_vec("<error>");
        return res;
    }

    pub func void_type() -> type {
        var res = type::instance();
        res.name.append_i8_vec("void");
        return res;
    }

    pub func bool_type() -> type {
        var res = type::instance();
        res.name.append_i8_vec("bool");
        return res;
    }

    pub func i8_type() -> type {
        var res = type::instance();
        res.name.append_i8_vec("i8");
        return res;
    }

    pub func i16_type() -> type {
        var res = type::instance();
        res.name.append_i8_vec("i16");
        return res;
    }

    pub func i32_type() -> type {
        var res = type::instance();
        res.name.append_i8_vec("i32");
        return res;
    }

    pub func i64_type() -> type {
        var res = type::instance();
        res.name.append_i8_vec("i64");
        return res;
    }

    pub func u8_type() -> type {
        var res = type::instance();
        res.name.append_i8_vec("u8");
        return res;
    }

    pub func u16_type() -> type {
        var res = type::instance();
        res.name.append_i8_vec("u16");
        return res;
    }

    pub func u32_type() -> type {
        var res = type::instance();
        res.name.append_i8_vec("u32");
        return res;
    }

    pub func u64_type() -> type {
        var res = type::instance();
        res.name.append_i8_vec("u64");
        return res;
    }

    pub func f32_type() -> type {
        var res = type::instance();
        res.name.append_i8_vec("f32");
        return res;
    }

    pub func f64_type() -> type {
        var res = type::instance();
        res.name.append_i8_vec("f64");
        return res;
    }
}

impl type {
    pub func dump(self, out: io, pkg: package*) {
        out.light_orange();
        if (pkg->has_file(self->loc_file.__ptr__())) {
            out.out(pkg->get_module_name(self->loc_file.__ptr__())->c_str);
            out.out("::");
        }
        out.out(self->name.c_str).reset();
        if (self->generics.size > 0) {
            out.out("<");
            for (var i: u64 = 0; i < self->generics.size; i += 1) {
                var t = self->generics.get(i);
                t->dump(out, pkg);
                if (i != self->generics.size - 1) {
                    out.out(",");
                }
            }
            out.out(">");
        }
        out.light_orange();
        for (var i = 0; i < self->pointer_depth; i += 1) {
            out.out("*");
        }
        out.reset();
    }

    pub func generic_name(self, pkg: package*) -> str {
        var res = str::from(self->name.c_str);
        if (self->generics.size > 0) {
            res.append_char('<');
            for (var i: u64 = 0; i < self->generics.size; i += 1) {
                var t = self->generics.get(i);
                var t_fpn = t->full_path_name(pkg, true);
                res.append_i8_vec(t_fpn.c_str);
                t_fpn.delete();

                if (i != self->generics.size - 1) {
                    res.append_char(',');
                }
            }
            res.append_char('>');
        }
        return res;
    }

    pub func full_path_name(self, pkg: package*, with_pointer: bool) -> str {
        var res = str::instance();
        if (pkg->has_file(self->loc_file.__ptr__())) {
            res.append_str(pkg->get_module_name(self->loc_file.__ptr__()));
            res.append_i8_vec("::");
        }
        res.append_str(self->name.__ptr__());
        if (self->generics.size > 0) {
            res.append_char('<');
            for (var i: u64 = 0; i < self->generics.size; i += 1) {
                var t = self->generics.get(i);
                var t_fpn = t->full_path_name(pkg, true);
                res.append_i8_vec(t_fpn.c_str);
                t_fpn.delete();

                if (i != self->generics.size - 1) {
                    res.append_char(',');
                }
            }
            res.append_char('>');
        }
        if (with_pointer) {
            for (var i = 0; i < self->pointer_depth; i += 1) {
                res.append_char('*');
            }
        }
        return res;
    }
}

pub struct symbol {
    name: str,
    sym_type: type
}

impl symbol {
    pub func delete(self) {
        self->name.delete();
        self->sym_type.delete();
    }

    pub func copy(self) -> symbol* {
        var res = symbol::__alloc__();
        res->name = self->name.copy_instance();
        res->sym_type = self->sym_type.copy_instance();
        return res;
    }

    pub func copy_instance(self) -> symbol {
        return symbol {
            name: self->name.copy_instance(),
            sym_type: self->sym_type.copy_instance()
        };
    }
}
