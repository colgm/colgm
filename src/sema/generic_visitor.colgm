use err::report::{ report };
use err::span::{ span };

use ast::ast::*;
use util::cli::{ cli_option };
use util::package::{ package };

use std::str::{ str };
use std::io::{ io };
use std::vec::{ vec };
use std::libc::{ free };

use sema::type::{ type };
use sema::generic_data::{ generic_data };
use sema::symbol_info::{ symbol_kind, symbol_info };
use sema::context::{ sema_context };
use sema::type_resolve::{ type_resolve };
use sema::function::{ colgm_func };
use sema::structure::{ colgm_struct };
use sema::module::{ colgm_module };
use sema::type_replace::{ type_replace_pass };

pub struct generic_visitor {
    err: report*,
    pkg: package*,
    ctx: sema_context*,
    root: root*,
    tr: type_resolve,
    co: cli_option*,

    insert_count: i64,
    need_to_be_inserted: vec<ast*>,
    MAX_RECURSIVE_DEPTH: i64
}

impl generic_visitor {
    pub func instance(e: report*,
                      c: sema_context*,
                      p: package*,
                      co: cli_option*) -> generic_visitor {
        return generic_visitor {
            err: e,
            pkg: p,
            ctx: c,
            root: nil,
            tr: type_resolve::instance(e, c, p),
            co: co,
            insert_count: 0,
            need_to_be_inserted: vec<ast*>::instance(),
            MAX_RECURSIVE_DEPTH: 16
        };
    }

    pub func delete(self) {
        self.need_to_be_inserted.delete();
    }

    func report_recursive_generic_generation(self, ty: type&) {
        var generic_name = ty.generic_name(self.pkg);
        defer generic_name.delete();
        
        var domain_file: str& = ty.loc_file;
        if (!self.ctx->has_domain(domain_file)) {
            return;
        }

        var dm = self.ctx->get_domain(domain_file);
        if (dm.structs.has(generic_name) ||
            dm.functions.has(generic_name)) {
            return;
        }

        var loc: span* = nil;
        if (dm.generic_structs.has(ty.name)) {
            loc = dm.generic_structs.get(ty.name).location.__ptr__();
        } else if (dm.generic_functions.has(ty.name)) {
            loc = dm.generic_functions.get(ty.name).location.__ptr__();
        }

        self.err->out("template instantiation depth exceeds maximum of ")
                 .out_i64(self.MAX_RECURSIVE_DEPTH)
                 .out(":\n  --> ")
                 .out(generic_name.c_str)
                 .emit_err(loc);
    }

    pub func scan_and_insert(self, n: root*) {
        self.root = n;

        var scan_count = 0;
        self.insert_count = 0;
        self.need_to_be_inserted.clear();
        self.visit_root(n);
        foreach (var i; self.need_to_be_inserted) {
            self.root->decls.push(i.get());
        }

        while (self.insert_count != 0) {
            scan_count += 1;
            self.insert_count = 0;
            self.need_to_be_inserted.clear();
            self.visit_root(n);
            foreach (var i; self.need_to_be_inserted) {
                self.root->decls.push(i.get());
            }
        }

        if (scan_count > 0 && self.co->VIEW_TYPE_REPLACE_INFO) {
            io::stdout().out("[generic_visitor] generate generics of ")
                        .white().out(n->base.location.file.c_str).reset()
                        .out(" after ").out_i64(scan_count).out(" scan(s)")
                        .endln();
        }
    }
}

impl generic_visitor {
    func check_generic_exists(self, dm: colgm_module&, type_name: str&, n: ast*) -> bool {
        // check this symbol exists
        // remember, symbol is stored both in global_symbol and generic_symbol
        if (!dm.global_symbol.has(type_name)) {
            var info = str::from("unknown type \"");
            defer info.delete();
            info.append_str(type_name).append("\"");

            self.err->error(n->location.__ptr__(), info.c_str);
            return false;
        }

        // check this symbol is generic type
        if (!dm.generic_symbol.has(type_name)) {
            var info = str::from("\"");
            defer info.delete();
            info.append_str(type_name);
            info.append("\" is not a generic type");

            self.err->error(n->location.__ptr__(), info.c_str);
            return false;
        }

        return true;
    }

    func scan_generic_type(self, n: ast_type_def*) {
        var type_name: str& = n->name->content;
        var domain_file = n->base.get_real_location_file();

        var dm = self.ctx->get_domain(domain_file);
        if (!self.check_generic_exists(dm, type_name, n => ast*)) {
            return;
        }

        var sym = dm.generic_symbol.get(type_name);
        if (sym.kind != symbol_kind::struct_kind) {
            var info = str::from("\"");
            defer info.delete();
            info.append_str(type_name);
            info.append("\" is not a struct type");

            self.err->error(n->base.location.__ptr__(), info.c_str);
            return;
        }

        var sym_belonged_dm = self.ctx->get_domain(sym.loc_file);
        var generic_struct = sym_belonged_dm.generic_structs.get(type_name);
        var generic_template = generic_struct.generic_template.__ptr__();
        self.check_generic_type(n => ast*,
                                type_name,
                                sym,
                                n->generic_types,
                                generic_template);
    }

    func check_generic_type(self,
                            n: ast*,
                            type_name: str&,
                            sym: symbol_info&,
                            type_list_node: ast_generic_type_list*,
                            generic_template: vec<str>*) {
        var type_list = type_list_node->types.__ptr__();
        // check size match
        if (type_list->size != generic_template->size) {
            self.err->error(n->location.__ptr__(),
                "generic type count does not match"
            );
            return;
        }

        var ss = str::from("");
        defer ss.delete();
        ss.append_str(type_name).append_char('<');
        foreach (var i; type_list) {
            var r_type = self.tr.resolve(i.get() => ast_type_def*);
            var r_type_fpn = r_type.full_path_name_with_pointer(self.pkg);
            defer {
                r_type.delete();
                r_type_fpn.delete();
            }

            ss.append_str(r_type_fpn);
            if (i.index() != type_list->size - 1) {
                ss.append_char(',');
            }
        }
        ss.append_char('>');
        if (self.err->error_count > 0) {
            return;
        }

        // load useful data into generic_data
        var g_data = generic_data::instance();
        defer g_data.delete();
        g_data.name.append_str(ss);
        g_data.generic_type.name.append_str(type_name);
        g_data.generic_type.loc_file.append_str(sym.loc_file);

        foreach (var i; type_list) {
            var r_type = self.tr.resolve(i.get() => ast_type_def*);
            defer r_type.delete();

            g_data.generic_type.generics.push(r_type);
            g_data.types.insert(generic_template->get(i.index()), r_type);
        }

        self.insert_count += self.insert_generic_type(g_data);
        return;
    }
}

impl generic_visitor {
    func visit_ast(self, n: ast*) {
        match (n->kind) {
            ast_kind::ast_unary_operator =>
                self.visit_unary_operator(n => ast_unary_operator*);
            ast_kind::ast_binary_operator =>
                self.visit_binary_operator(n => ast_binary_operator*);
            ast_kind::ast_type_convert =>
                self.visit_type_convert(n => ast_type_convert*);
            ast_kind::ast_array_list =>
                self.visit_array_list(n => ast_array_list*);
            ast_kind::ast_call_index =>
                self.visit_call_index(n => ast_call_index*);
            ast_kind::ast_call_func_args =>
                self.visit_call_func_args(n => ast_call_func_args*);
            ast_kind::ast_init_pair =>
                self.visit_init_pair(n => ast_init_pair*);
            ast_kind::ast_initializer =>
                self.visit_initializer(n => ast_initializer*);
            ast_kind::ast_call_id =>
                self.visit_call_id(n => ast_call_id*);
            ast_kind::ast_call => self.visit_call(n => ast_call*);
            ast_kind::ast_assignment =>
                self.visit_assignment(n => ast_assignment*);
            ast_kind::ast_type_def =>
                self.visit_type_def(n => ast_type_def*);
            ast_kind::ast_generic_type_list =>
                self.visit_generic_type_list(n => ast_generic_type_list*);
            ast_kind::ast_field_pair =>
                self.visit_field_pair(n => ast_field_pair*);
            ast_kind::ast_struct_decl =>
                self.visit_struct_decl(n => ast_struct_decl*);
            ast_kind::ast_tagged_union_decl =>
                self.visit_tagged_union_decl(n => ast_tagged_union_decl*);
            ast_kind::ast_param =>
                self.visit_param(n => ast_param*);
            ast_kind::ast_param_list =>
                self.visit_param_list(n => ast_param_list*);
            ast_kind::ast_func_decl => 
                self.visit_func_decl(n => ast_func_decl*);
            ast_kind::ast_impl =>
                self.visit_impl(n => ast_impl*);
            ast_kind::ast_definition =>
                self.visit_definition(n => ast_definition*);
            ast_kind::ast_cond_stmt =>
                self.visit_cond_stmt(n => ast_cond_stmt*);
            ast_kind::ast_if_stmt =>
                self.visit_if_stmt(n => ast_if_stmt*);
            ast_kind::ast_match_case =>
                self.visit_match_case(n => ast_match_case*);
            ast_kind::ast_match_stmt =>
                self.visit_match_stmt(n => ast_match_stmt*);
            ast_kind::ast_while_stmt =>
                self.visit_while_stmt(n => ast_while_stmt*);
            ast_kind::ast_for_stmt =>
                self.visit_for_stmt(n => ast_for_stmt*);
            ast_kind::ast_forindex =>
                self.visit_forindex(n => ast_forindex*);
            ast_kind::ast_foreach =>
                self.visit_foreach(n => ast_foreach*);
            ast_kind::ast_in_stmt_expr =>
                self.visit_in_stmt_expr(n => ast_in_stmt_expr*);
            ast_kind::ast_ret_stmt =>
                self.visit_ret_stmt(n => ast_ret_stmt*);
            ast_kind::ast_code_block =>
                self.visit_code_block(n => ast_code_block*);
            _ => {}
        }
    }
}

impl generic_visitor {
    func visit_root(self, n: root*) {
        foreach (var i; n->decls) {
            var d = i.get();
            match (d->kind) {
                ast_kind::ast_struct_decl => {
                    self.visit_struct_decl(d => ast_struct_decl*);
                }
                ast_kind::ast_tagged_union_decl => {
                    self.visit_tagged_union_decl(d => ast_tagged_union_decl*);
                }
                ast_kind::ast_func_decl => {
                    self.visit_func_decl(d => ast_func_decl*);
                }
                ast_kind::ast_impl => {
                    self.visit_impl(d => ast_impl*);
                }
                _ => {}
            }
        }
    }

    func visit_struct_decl(self, n: ast_struct_decl*) {
        if (n->generic_types != nil) {
            return;
        }
        foreach (var i; n->fields) {
            self.visit_field_pair(i.get());
        }
    }

    func visit_tagged_union_decl(self, n: ast_tagged_union_decl*) {
        foreach (var i; n->members) {
            self.visit_field_pair(i.get());
        }
    }

    func visit_func_decl(self, n: ast_func_decl*) {
        if (n->generic_types != nil) {
            return;
        }
        self.visit_param_list(n->params);
        if (n->return_type != nil) {
            self.visit_type_def(n->return_type);
        }
        if (n->body != nil) {
            self.visit_code_block(n->body);
        }
    }

    func visit_impl(self, n: ast_impl*) {
        if (n->generic_types != nil) {
            return;
        }
        foreach (var i; n->methods) {
            var f = i.get();
            if (!f->is(ast_kind::ast_func_decl)) {
                continue;
            }
            self.visit_func_decl(f => ast_func_decl*);
        }
    }

    func visit_unary_operator(self, n: ast_unary_operator*) {
        self.visit_ast(n->value);
    }

    func visit_binary_operator(self, n: ast_binary_operator*) {
        self.visit_ast(n->left);
        self.visit_ast(n->right);
    }

    func visit_type_convert(self, n: ast_type_convert*) {
        self.visit_ast(n->from);
        self.visit_type_def(n->to);
    }

    func visit_array_list(self, n: ast_array_list*) {
        foreach (var i; n->value) {
            self.visit_ast(i.get());
        }
    }

    func visit_call_index(self, n: ast_call_index*) {
        self.visit_ast(n->index);
    }

    func visit_call_func_args(self, n: ast_call_func_args*) {
        foreach (var i; n->args) {
            self.visit_ast(i.get());
        }
    }

    func visit_init_pair(self, n: ast_init_pair*) {
        self.visit_ast(n->value);
    }

    func visit_initializer(self, n: ast_initializer*) {
        foreach (var i; n->pairs) {
            self.visit_ast(i.get());
        }
    }

    func visit_call_id(self, n: ast_call_id*) {
        if (n->generic_types == nil) {
            return;
        }
        self.visit_generic_type_list(n->generic_types);

        var type_name: str& = n->id->content;
        var domain_file = n->base.get_real_location_file();

        var dm = self.ctx->get_domain(domain_file);
        if (!self.check_generic_exists(dm, type_name, n => ast*)) {
            return;
        }

        var sym = dm.generic_symbol.get(type_name);
        if (sym.kind != symbol_kind::struct_kind &&
            sym.kind != symbol_kind::func_kind) {
            var info = str::from("\"");
            defer info.delete();
            info.append_str(type_name);
            info.append("\" is not a struct type");

            self.err->error(n->base.location.__ptr__(), info.c_str);
            return;
        }

        var sym_belonged_dm = self.ctx->get_domain(sym.loc_file);
        var generic_template: vec<str>* = nil;
        if (sym.kind == symbol_kind::struct_kind) {
            var generic_struct = sym_belonged_dm.generic_structs.get(type_name);
            generic_template = generic_struct.generic_template.__ptr__();
        } else {
            var generic_func = sym_belonged_dm.generic_functions.get(type_name);
            generic_template = generic_func.generic_template.__ptr__();
        }
        self.check_generic_type(n => ast*,
                                type_name,
                                sym,
                                n->generic_types,
                                generic_template);
    }

    func visit_call(self, n: ast_call*) {
        self.visit_call_id(n->head);
        foreach (var i; n->chain) {
            self.visit_ast(i.get());
        }
    }

    func visit_assignment(self, n: ast_assignment*) {
        self.visit_call(n->left);
        self.visit_ast(n->right);
    }

    func visit_type_def(self, n: ast_type_def*) {
        if (n->generic_types != nil) {
            // dfs try to initialize generic input types first
            // then try to initialize the outside type
            self.visit_generic_type_list(n->generic_types);
            self.scan_generic_type(n);
        }
    }

    func visit_generic_type_list(self, n: ast_generic_type_list*) {
        foreach (var i; n->types) {
            self.visit_ast(i.get());
        }
    }

    func visit_field_pair(self, n: ast_field_pair*) {
        self.visit_type_def(n->type);
    }

    func visit_param(self, n: ast_param*) {
        if (n->type != nil) {
            self.visit_type_def(n->type);
        }
    }

    func visit_param_list(self, n: ast_param_list*) {
        foreach (var i; n->params) {
            self.visit_ast(i.get());
        }
    }

    func visit_definition(self, n: ast_definition*) {
        if (n->type != nil) {
            self.visit_type_def(n->type);
        }
        self.visit_ast(n->value);
    }

    func visit_cond_stmt(self, n: ast_cond_stmt*) {
        foreach (var i; n->stmts) {
            self.visit_ast(i.get());
        }
    }

    func visit_if_stmt(self, n: ast_if_stmt*) {
        if (n->condition != nil) {
            self.visit_ast(n->condition);
        }
        if (n->body != nil) {
            self.visit_code_block(n->body);
        }
    }

    func visit_match_case(self, n: ast_match_case*) {
        self.visit_call(n->pattern);
        if (n->body != nil) {
            self.visit_code_block(n->body);
        }
    }

    func visit_match_stmt(self, n: ast_match_stmt*) {
        self.visit_ast(n->value);
        foreach (var i; n->cases) {
            self.visit_ast(i.get());
        }
    }

    func visit_while_stmt(self, n: ast_while_stmt*) {
        if (n->condition != nil) {
            self.visit_ast(n->condition);
        }
        if (n->body != nil) {
            self.visit_code_block(n->body);
        }
    }

    func visit_for_stmt(self, n: ast_for_stmt*) {
        if (n->init != nil) {
            self.visit_definition(n->init);
        }
        if (n->condition != nil) {
            self.visit_ast(n->condition);
        }
        if (n->update != nil) {
            self.visit_ast(n->update);
        }
        if (n->body != nil) {
            self.visit_code_block(n->body);
        }
    }

    func visit_forindex(self, n: ast_forindex*) {
        if (n->variable != nil) {
            self.visit_ast(n->variable => ast*);
        }
        if (n->container != nil) {
            self.visit_call(n->container);
        }
        if (n->body != nil) {
            self.visit_code_block(n->body);
        }

        if (n->lowered_init != nil) {
            self.visit_definition(n->lowered_init);
        }
        if (n->lowered_condition != nil) {
            self.visit_ast(n->lowered_condition);
        }
        if (n->lowered_update != nil) {
            self.visit_ast(n->lowered_update);
        }
    }

    func visit_foreach(self, n: ast_foreach*) {
        if (n->variable != nil) {
            self.visit_ast(n->variable => ast*);
        }
        if (n->container != nil) {
            self.visit_call(n->container);
        }
        if (n->body != nil) {
            self.visit_code_block(n->body);
        }

        if (n->lowered_init != nil) {
            self.visit_definition(n->lowered_init);
        }
        if (n->lowered_condition != nil) {
            self.visit_ast(n->lowered_condition);
        }
        if (n->lowered_update != nil) {
            self.visit_ast(n->lowered_update);
        }
    }

    func visit_in_stmt_expr(self, n: ast_in_stmt_expr*) {
        self.visit_ast(n->value);
    }

    func visit_ret_stmt(self, n: ast_ret_stmt*) {
        if (n->value != nil) {
            self.visit_ast(n->value);
        }
    }

    func visit_code_block(self, n: ast_code_block*) {
        foreach (var i; n->stmts) {
            self.visit_ast(i.get());
        }
    }
}

impl generic_visitor {
    func insert_struct(self, dm: colgm_module&, gd: generic_data&, gn: str&) {
        if (dm.structs.has(gn)) {
            return;
        }

        var struct_info = dm.generic_structs.get(gd.generic_type.name).clone();
        struct_info.name.clear();
        struct_info.name.append_str(gn);
        struct_info.generic_template.clear();
        defer struct_info.delete();

        dm.structs.insert(gn, struct_info);

        var sym_info = symbol_info::instance(
            symbol_kind::struct_kind,
            struct_info.location.file.c_str,
            struct_info.is_public,
        );
        defer sym_info.delete();

        self.ctx->global_symbol().insert(gn, sym_info);
        self.replace_struct_type(dm.structs.get(gn), gd);
    }

    func insert_function(self, dm: colgm_module&, gd: generic_data&, gn: str&) {
        if (dm.functions.has(gn)) {
            return;
        }

        var func_info = dm.generic_functions.get(gd.generic_type.name).clone();
        func_info.name.clear();
        func_info.name.append_str(gn);
        func_info.generic_template.clear();
        defer func_info.delete();

        dm.functions.insert(gn, func_info);

        var sym_info = symbol_info::instance(
            symbol_kind::func_kind,
            func_info.location.file.c_str,
            func_info.is_public
        );
        defer sym_info.delete();

        self.ctx->global_symbol().insert(gn, sym_info);
        self.replace_func_type(dm.functions.get(gn), gd);
    }

    func insert_generic_type(self, g_data: generic_data&) -> i64 {
        if (g_data.generic_type.generic_depth() > self.MAX_RECURSIVE_DEPTH) {
            self.report_recursive_generic_generation(g_data.generic_type);
            return 0;
        }

        var generic_name = g_data.generic_type.generic_name(self.pkg);
        defer generic_name.delete();
            
        var domain_file: str& = g_data.generic_type.loc_file;
        if (!self.ctx->has_domain(domain_file)) {
            return 0;
        }

        var dm = self.ctx->get_domain(domain_file);
        if (dm.generic_structs.has(g_data.generic_type.name)) {
            if (dm.structs.has(generic_name)) {
                return 0;
            }
            self.insert_struct(dm, g_data, generic_name);
        } else if (dm.generic_functions.has(g_data.generic_type.name)) {
            if (dm.functions.has(generic_name)) {
                return 0;
            }
            self.insert_function(dm, g_data, generic_name);
        }

        return 1;
    }

    func replace_type(self, t: type&, g_data: generic_data&) {
        if (g_data.types.has(t.name)) {
            var real = g_data.types.get(t.name);
            t.name.clear();
            t.name.append_str(real.name);
            t.loc_file.clear();
            t.loc_file.append_str(real.loc_file);
            t.generics.clear();
            foreach (var i; real.generics) {
                t.generics.push(i.get()); // will do deep copy
            }
            // should add to t.pointer_depth, for example: func foo(a: T*) {}
            // we should replace T with bar, expected result is: bar*
            // if we do not add pointer_depth, the result will be bar
            t.pointer_depth += real.pointer_depth;
        }
        if (t.generics.empty()) {
            return;
        }
        foreach (var i; t.generics) {
            self.replace_type(i.get(), g_data);
        }
    }

    func check_is_trivial(self, n: ast_cond_compile*, g_data: generic_data&) -> bool {
        foreach (var i; n->ordered_conds) {
            var cond: str& = i.get();
            if (!n->conds.get(cond).empty()) {
                self.err->warn(
                    n->base.location.__ptr__(),
                    "condition value is ignored"
                );
            }
            if (!g_data.types.has(cond)) {
                var info = str::from("generic type \"");
                defer info.delete();
                info.append_str(cond);
                info.append("\" is not defined");

                self.err->warn(
                    n->base.location.__ptr__(),
                    info.c_str
                );
                return false;
            }

            var t = g_data.types.get(cond);
            // pointer type is trivial
            if (t.is_pointer()) {
                continue;
            }
            // primitive type is trivial
            if (t.loc_file.empty()) {
                continue;
            }

            var domain = self.ctx->get_domain(t.loc_file);
            var t_name = t.generic_name(self.pkg);
            defer t_name.delete();

            var delete_func = str::from("delete");
            defer delete_func.delete();

            if (domain.structs.has(t_name)) {
                var s = domain.structs.get(t_name);

                // with delete methopd, it's non-trivial
                if (s.method.has(delete_func)) {
                    return false;
                }
            } else if (domain.tagged_unions.has(t_name)) {
                var u = domain.tagged_unions.get(t_name);

                // with delete methopd, it's non-trivial
                if (u.method.has(delete_func)) {
                    return false;
                }
            }
        }
        return true;
    }

    func check_is_non_trivial(self, n: ast_cond_compile*, g_data: generic_data&) -> bool {
        foreach (var i; n->ordered_conds) {
            var cond: str& = i.get();
            if (!n->conds.get(cond).empty()) {
                self.err->warn(
                    n->base.location.__ptr__(),
                    "condition value is ignored"
                );
            }
            if (!g_data.types.has(cond)) {
                var info = str::from("generic type \"");
                defer info.delete();
                info.append_str(cond);
                info.append("\" is not defined");

                self.err->warn(n->base.location.__ptr__(), info.c_str);
                return false;
            }

            var t = g_data.types.get(cond);
            if (t.is_pointer()) {
                return false;
            }
            if (t.loc_file.empty()) {
                // primitive type, is trivial
                return false;
            }

            var domain = self.ctx->get_domain(t.loc_file);
            var t_name = t.generic_name(self.pkg);
            defer t_name.delete();

            var delete_func = str::from("delete");
            defer delete_func.delete();

            if (domain.structs.has(t_name)) {
                var s = domain.structs.get(t_name);

                // without delete methopd, it's trivial
                if (!s.method.has(delete_func)) {
                    return false;
                }
            } else if (domain.tagged_unions.has(t_name)) {
                var u = domain.tagged_unions.get(t_name);

                // without delete methopd, it's trivial
                if (!u.method.has(delete_func)) {
                    return false;
                }
            } else {
                return false;
            }
        }
        return true;
    }

    func check_is_pointer(self, n: ast_cond_compile*, g_data: generic_data&) -> bool {
        foreach (var i; n->ordered_conds) {
            var cond: str& = i.get();
            if (!n->conds.get(cond).empty()) {
                self.err->warn(
                    n->base.location.__ptr__(),
                    "condition value is ignored"
                );
            }
            if (!g_data.types.has(cond)) {
                var info = str::from("generic type \"");
                defer info.delete();
                info.append_str(cond);
                info.append("\" is not defined");

                self.err->warn(n->base.location.__ptr__(), info.c_str);
                return false;
            }

            if (!g_data.types.get(cond).is_pointer()) {
                return false;
            }

        }
        return true;
    }

    func check_is_non_pointer(self, n: ast_cond_compile*, g_data: generic_data&) -> bool {
        foreach (var i; n->ordered_conds) {
            var cond: str& = i.get();
            if (!n->conds.get(cond).empty()) {
                self.err->warn(
                    n->base.location.__ptr__(),
                    "condition value is ignored"
                );
            }
            if (!g_data.types.has(cond)) {
                var info = str::from("generic type \"");
                defer info.delete();
                info.append_str(cond);
                info.append("\" is not defined");

                self.err->warn(n->base.location.__ptr__(), info.c_str);
                return false;
            }

            if (g_data.types.get(cond).is_pointer()) {
                return false;
            }

        }
        return true;
    }


    func remove_cond_compile_method(self, s: colgm_struct&, g_data: generic_data&) {
        foreach (var i; s.generic_struct_impl) {
            var impl_node = i.get();
            var new_vec = vec<ast*>::instance();
            defer new_vec.delete();

            foreach (var j; impl_node->methods) {
                var func_node = j.get() => ast_func_decl*;
                if (!func_node->contain_cond()) {
                    new_vec.push(func_node => ast*);
                    continue;
                }

                var monomorphic_name = func_node->get_monomorphic_name();
                var trivial_cond = func_node->get_trivial_cond();
                if (trivial_cond != nil && !self.check_is_trivial(trivial_cond, g_data)) {
                    var n = func_node => ast*;
                    n->delete();
                    free(n => i8*);
                    continue;
                }

                var non_trivial_cond = func_node->get_non_trivial_cond();
                if (non_trivial_cond != nil && !self.check_is_non_trivial(non_trivial_cond, g_data)) {
                    var n = func_node => ast*;
                    n->delete();
                    free(n => i8*);
                    continue;
                }

                var is_pointer_cond = func_node->get_is_pointer_cond();
                if (is_pointer_cond != nil && !self.check_is_pointer(is_pointer_cond, g_data)) {
                    var n = func_node => ast*;
                    n->delete();
                    free(n => i8*);
                    continue;
                }

                var is_non_pointer_cond = func_node->get_is_non_pointer_cond();
                if (is_non_pointer_cond != nil && !self.check_is_non_pointer(is_non_pointer_cond, g_data)) {
                    var n = func_node => ast*;
                    n->delete();
                    free(n => i8*);
                    continue;
                }

                if (s.method.has(monomorphic_name)) {
                    if (s.fields.has(func_node->name) ||
                        s.method.has(func_node->name) ||
                        s.static_method.has(func_node->name)) {
                        self.err->error(
                            func_node->base.location.__ptr__(),
                            "method name conflicts"
                        );
                    } else {
                        s.method.insert(
                            func_node->name,
                            s.method.get(monomorphic_name)
                        );
                        var f = s.method.get(func_node->name).name.__ptr__();
                        f->clear();
                        f->append_str(func_node->name);
                    }
                    s.method.remove(monomorphic_name);
                } else if (s.static_method.has(monomorphic_name)) {
                    if (s.fields.has(func_node->name) ||
                        s.method.has(func_node->name) ||
                        s.static_method.has(func_node->name)) {
                        self.err->error(
                            func_node->base.location.__ptr__(),
                            "method name conflicts"
                        );
                    } else {
                        s.static_method.insert(
                            func_node->name,
                            s.static_method.get(monomorphic_name)
                        );
                        var f = s.static_method.get(func_node->name).name.__ptr__();
                        f->clear();
                        f->append_str(func_node->name);
                    }
                    s.static_method.remove(monomorphic_name);
                }
                new_vec.push(func_node => ast*);
            }
            if (new_vec.size != impl_node->methods.size) {
                impl_node->reset_methods(new_vec.__ptr__());
            }
        }
    }

    func replace_struct_type(self, s: colgm_struct&, g_data: generic_data&) {
        foreach (var i; s.fields) {
            var field = i.value();
            self.replace_type(field, g_data);
        }

        // remove method by conditonal compile config like
        // #[is_trivial(T, K)]
        // #[is_non_trivial(T, K)]
        self.remove_cond_compile_method(s, g_data);

        foreach (var i; s.static_method) {
            var method = i.value();
            self.replace_func_type(method, g_data);
        }
        foreach (var i; s.method) {
            var method = i.value();
            self.replace_func_type(method, g_data);
        }

        var trp = type_replace_pass {
            err: self.err,
            ctx: self.ctx,
            pkg: self.pkg,
            co: self.co,
            g_data: g_data.__ptr__()
        };
        if (s.generic_struct_decl != nil) {
            trp.replace_struct(s.generic_struct_decl);
            self.need_to_be_inserted.push(s.generic_struct_decl => ast*);
            // s.name is generated with generic
            // for example original name is "foo",
            // but now it should be replaced with "foo<int, bool>"
            s.generic_struct_decl->name.clear();
            s.generic_struct_decl->name.append_str(s.name);
            s.generic_struct_decl->clear_generic_types();
            s.generic_struct_decl = nil;
        }
        foreach (var i; s.generic_struct_impl) {
            var i_n = i.get();
            trp.replace_impl(i_n);
            self.need_to_be_inserted.push(i_n => ast*);
            // s.name is generated with generic
            // for example original name is "foo",
            // but now it should be replaced with "foo<int, bool>"
            i_n->name.clear();
            i_n->name.append_str(s.name);
            i_n->clear_generic_types();
        }
        s.generic_struct_impl.clear();
    }

    func replace_func_type(self, f: colgm_func&, g_data: generic_data&) {
        self.replace_type(f.return_type, g_data);
        foreach (var i; f.param_type) {
            var param_type = i.get();
            self.replace_type(param_type, g_data);
        }
        foreach (var i; f.unordered_params) {
            var param_type = i.value();
            self.replace_type(param_type, g_data);
        }

        if (f.generic_func_decl != nil) {
            var trp = type_replace_pass {
                err: self.err,
                ctx: self.ctx,
                pkg: self.pkg,
                co: self.co,
                g_data: g_data.__ptr__()
            };
            trp.replace_func(f.generic_func_decl);
            self.need_to_be_inserted.push(f.generic_func_decl => ast*);
            f.generic_func_decl->name.clear();
            f.generic_func_decl->name.append_str(f.name);
            f.generic_func_decl->clear_generic_types();
            f.generic_func_decl = nil;
        }
    }
}