use std::str::{ str };
use std::vec::{ vec };
use std::map::{  hashmap };
use std::io::{ io };
use std::panic::{ panic };

use err::span::{ span };

use util::package::{ package };
use util::levenshtein::{ levenshtein_distance };

use sema::type::{ type };
use sema::function::{ colgm_func };

pub struct colgm_tagged_union {
    name: str,
    ref_enum_type: type,
    location: span,

    members: hashmap<str, type>,
    member_int_map: hashmap<str, i64>,
    ordered_members: vec<str>,
    members_span: hashmap<str, span>,

    method: hashmap<str, colgm_func>,
    static_method: hashmap<str, colgm_func>,

    is_public: bool,
    is_extern: bool
}

impl colgm_tagged_union {
    pub func instance(name: str&, loc: span&) -> colgm_tagged_union {
        return colgm_tagged_union {
            name: name.clone(),
            ref_enum_type: type::instance("", ""),
            location: loc.clone(),
            members: hashmap<str, type>::instance(),
            member_int_map: hashmap<str, i64>::instance(),
            ordered_members: vec<str>::instance(),
            members_span: hashmap<str, span>::instance(),
            method: hashmap<str, colgm_func>::instance(),
            static_method: hashmap<str, colgm_func>::instance(),
            is_public: false,
            is_extern: false
        };
    }

    pub func delete(self) {
        self.name.delete();
        self.ref_enum_type.delete();
        self.location.delete();
        self.members.delete();
        self.member_int_map.delete();
        self.ordered_members.delete();
        self.members_span.delete();
        self.method.delete();
        self.static_method.delete();
    }

    pub func clone(self) -> colgm_tagged_union {
        return colgm_tagged_union {
            name: self.name.clone(),
            ref_enum_type: self.ref_enum_type.clone(),
            location: self.location.clone(),
            members: self.members.clone(),
            member_int_map: self.member_int_map.clone(),
            ordered_members: self.ordered_members.clone(),
            members_span: self.members_span.clone(),
            method: self.method.clone(),
            static_method: self.static_method.clone(),
            is_public: self.is_public,
            is_extern: self.is_extern
        };
    }
}

impl colgm_tagged_union {
    pub func has_ref_enum(self) -> bool {
        return !self.ref_enum_type.name.empty();
    }

    pub func check_member_exists(self, name: str&) -> bool {
        return self.members.has(name) ||
               self.method.has(name) ||
               self.static_method.has(name);
    }

    pub func get_method(self, name: str&) -> colgm_func& {
        if (self.method.has(name)) {
            return self.method.get(name);
        }
        if (!self.static_method.has(name)) {
            panic("method not found");
        }
        return self.static_method.get(name);
    }

    pub func has_member(self, name: str&) -> bool {
        return self.members.has(name) ||
               self.method.has(name) ||
               self.static_method.has(name);
    }

    // always has result, tagged union has intrinsic method:
    // pub func __ptr__(self) -> Self*;
    // pub func __size__() -> u64;
    // pub func __alloc__() -> Self*;
    pub func get_member_span(self, name: str&) -> span& {
        if (self.members_span.has(name)) {
            return self.members_span.get(name);
        }
        if (self.method.has(name)) {
            return self.method.get(name).location;
        }
        if (!self.static_method.has(name)) {
            panic("member not found");
        }
        return self.static_method.get(name).location;
    }

    pub func fuzzy_match_field(self, name: str&) -> str {
        var res = str::instance();
        var min_distance: u64 = 0xffffffffffffffff;

        var collection = vec<str>::instance();
        defer collection.delete();

        foreach (var i; self.members) {
            if (i.key().startswith(name.c_str)) {
                collection.push(i.key());
            }
        }
        foreach (var i; self.method) {
            if (i.key().startswith(name.c_str)) {
                collection.push(i.key());
            }
        }
        foreach (var i; self.static_method) {
            if (i.key().startswith(name.c_str)) {
                collection.push(i.key());
            }
        }
        if (!collection.empty()) {
            foreach (var i; collection) {
                var distance = levenshtein_distance(name, i.get());
                if (distance < min_distance) {
                    min_distance = distance;
                    res.clear();
                    res.append(i.get().c_str);
                }
            }
            return res;
        }

        foreach (var i; self.members) {
            var distance = levenshtein_distance(name, i.key());
            if (distance < min_distance) {
                min_distance = distance;
                res.clear();
                res.append_str(i.key());
            }
        }
        foreach (var i; self.method) {
            var distance = levenshtein_distance(name, i.key());
            if (distance < min_distance) {
                min_distance = distance;
                res.clear();
                res.append_str(i.key());
            }
        }
        foreach (var i; self.static_method) {
            var distance = levenshtein_distance(name, i.key());
            if (distance < min_distance) {
                min_distance = distance;
                res.clear();
                res.append_str(i.key());
            }
        }

        return res;
    }

    pub func dump(self, out: io&, pkg: package*) {
        out.out("  ");
        if (self.is_extern) {
            out.green().out("extern ").reset();
        }
        if (self.is_public) {
            out.green().out("pub ").reset();
        }
        out.cyan().out("union ").reset();
        if (self.has_ref_enum()) {
            out.light_orange().out("(").reset();
            self.ref_enum_type.dump(out, pkg);
            out.light_orange().out(") ").reset();
        }
        out.white().out(self.name.c_str).reset();

        if (self.ordered_members.empty()) {
            out.out(" {}\n");
            return;
        }
        out.out(" {\n");
        forindex (var i; self.ordered_members) {
            var member = self.ordered_members.get(i);
            out.out("    ").out(member.c_str);
            // dump mapped int
            out.light_green().out("(").out_i64(self.member_int_map.get(member));
            out.out(")").reset().out(": ");
            // dump type
            self.members.get(member).dump(out, pkg);
            out.out("\n");
        }
        foreach (var i; self.method) {
            i.value().dump(out, pkg, "  ");
        }
        foreach (var i; self.static_method) {
            i.value().dump(out, pkg, "  ");
        }
        out.out("  }\n");
    }
}