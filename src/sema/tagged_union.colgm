use std::str::{ str };
use std::vec::{ vec };
use std::map::{  hashmap };
use std::io::{ io };

use err::span::{ span };
use err::panic::{ panic };
use util::package::{ package };

use sema::type::{ type };
use sema::symbol::{ symbol };

pub struct colgm_tagged_union {
    name: str,
    location: span,

    members: hashmap<str, type>,
    ordered_members: vec<symbol>,

    is_public: bool,
    is_extern: bool
}

impl colgm_tagged_union {
    pub func new(name: str*, loc: span*) -> colgm_tagged_union* {
        var res = colgm_tagged_union::__alloc__();
        if (res == nil) {
            panic("failed to allocate memory");
        }
        res->name = name->copy_instance();
        res->location = loc->copy_instance();
        res->members = hashmap<str, type>::instance();
        res->ordered_members = vec<symbol>::instance();
        res->is_public = false;
        res->is_extern = false;
        return res;
    }

    pub func delete(self) {
        self->name.delete();
        self->location.delete();
        self->members.delete();
        self->ordered_members.delete();
    }

    pub func copy(self) -> colgm_tagged_union* {
        var res = colgm_tagged_union::__alloc__();
        if (res == nil) {
            panic("failed to allocate memory");
        }
        res->name = self->name.copy_instance();
        res->location = self->location.copy_instance();
        res->members = self->members.copy_instance();
        res->ordered_members = self->ordered_members.copy_instance();
        res->is_public = self->is_public;
        res->is_extern = self->is_extern;
        return res;
    }

    pub func copy_instance(self) -> colgm_tagged_union {
        return colgm_tagged_union {
            name: self->name.copy_instance(),
            location: self->location.copy_instance(),
            members: self->members.copy_instance(),
            ordered_members: self->ordered_members.copy_instance(),
            is_public: self->is_public,
            is_extern: self->is_extern
        };
    }
}

impl colgm_tagged_union {
    pub func dump(self, out: io, pkg: package*) {
        out.out("  ");
        if (self->is_extern) {
            out.green().out("extern ").reset();
        }
        if (self->is_public) {
            out.green().out("pub ").reset();
        }
        out.cyan().out("union ").reset();
        out.white().out(self->name.c_str).reset();

        if (self->ordered_members.empty()) {
            out.out(" {}\n");
            return;
        }
        out.out(" {\n");
        forindex (var i; self->ordered_members) {
            var member = self->ordered_members.get(i);
            out.out("    ").out(member->name.c_str).out(": ");
            member->type.dump(out, pkg);
            out.out("\n");
        }
        out.out("  }\n");
    }
}