use std::str::{ str };
use std::libc::{ free };
use std::vec::{ vec, primitive_vec };
use std::map::{ hashmap };
use std::ptr::{ ptr };
use std::io::{ io };

use err::span::{ span };
use err::panic::{ panic };
use ast::ast::{ ast, ast_struct_decl, ast_impl };
use util::package::{ package };

use sema::type::{ type, symbol };
use sema::function::{ colgm_func };

pub struct colgm_struct {
    name: str,
    location: span,
    fields: hashmap<str, type>,
    ordered_fields: vec<symbol>,
    static_method: hashmap<str, colgm_func>,
    method: hashmap<str, colgm_func>,

    generic_template: vec<str>,
    generic_struct_decl: ast_struct_decl*,
    generic_struct_impl: vec<ast_impl*>,

    is_public: bool,
    is_extern: bool
}

impl colgm_struct {
    pub func new(name: str*, loc: span*) -> colgm_struct* {
        var res = colgm_struct::__alloc__();
        if (res == nil) {
            panic("failed to allocate memory");
        }
        res->name = name->copy_instance();
        res->location = loc->copy_instance();
        res->fields = hashmap<str, type>::instance();
        res->ordered_fields = vec<symbol>::instance();
        res->static_method = hashmap<str, colgm_func>::instance();
        res->method = hashmap<str, colgm_func>::instance();
        res->generic_template = vec<str>::instance();
        res->generic_struct_decl = nil;
        res->generic_struct_impl = vec<ast_impl*>::instance();
        res->is_public = false;
        res->is_extern = false;
        return res;
    }

    pub func delete(self) {
        self->name.delete();
        self->location.delete();
        self->fields.delete();
        self->ordered_fields.delete();
        self->static_method.delete();
        self->method.delete();
        self->generic_template.delete();
        if (self->generic_struct_decl != nil) {
            var to_ast = self->generic_struct_decl => ast*;
            to_ast->delete();
            free(to_ast => i8*);
            self->generic_struct_decl = nil;
        }
        foreach (var i; self->generic_struct_impl) {
            var to_ast = i.get() => ast*;
            to_ast->delete();
            free(to_ast => i8*);
        }
        self->generic_struct_impl.delete();
    }

    pub func copy(self) -> colgm_struct* {
        var res = colgm_struct::__alloc__();
        if (res == nil) {
            panic("failed to allocate memory");
        }
        res->name = self->name.copy_instance();
        res->location = self->location.copy_instance();
        res->fields = self->fields.copy_instance();
        res->ordered_fields = self->ordered_fields.copy_instance();
        res->static_method = self->static_method.copy_instance();
        res->method = self->method.copy_instance();
        res->generic_template = self->generic_template.copy_instance();
        if (self->generic_struct_decl != nil) {
            res->generic_struct_decl = self->generic_struct_decl->copy();
        } else {
            res->generic_struct_decl = nil;
        }
        res->generic_struct_impl = vec<ast_impl*>::instance();
        foreach (var i; self->generic_struct_impl) {
            res->generic_struct_impl.push(i.get()->copy());
        }
        res->is_public = self->is_public;
        res->is_extern = self->is_extern;
        return res;
    }

    pub func copy_instance(self) -> colgm_struct {
        var res = colgm_struct {
            name: self->name.copy_instance(),
            location: self->location.copy_instance(),
            fields: self->fields.copy_instance(),
            ordered_fields: self->ordered_fields.copy_instance(),
            static_method: self->static_method.copy_instance(),
            method: self->method.copy_instance(),
            generic_template: self->generic_template.copy_instance(),
            generic_struct_decl: nil,
            generic_struct_impl: vec<ast_impl*>::instance(),
            is_public: self->is_public,
            is_extern: self->is_extern
        };
        if (self->generic_struct_decl != nil) {
            res.generic_struct_decl = self->generic_struct_decl->copy();
        }
        foreach (var i; self->generic_struct_impl) {
            res.generic_struct_impl.push(i.get()->copy());
        }
        return res;
    }

    pub func field_index(self, name: str*) -> i64 {
        foreach (var i; self->ordered_fields) {
            if (i.get()->name.eq(name)) {
                return i.index() => i64;
            }
        }
        return -1;
    }
}

impl colgm_struct {
    pub func dump(self, out: io, pkg: package*) {
        out.out("  ");
        if (self->is_extern) {
            out.green().out("extern ").reset();
        }
        if (self->is_public) {
            out.green().out("pub ").reset();
        }
        out.cyan().out("struct ").reset();
        out.white().out(self->name.c_str).reset();

        // print generic template
        if (self->generic_template.size > 0) {
            out.out("<");
            foreach (var i; self->generic_template) {
                out.out(i.get()->c_str);
                if (i.index() != self->generic_template.size - 1) {
                    out.out(", ");
                }
            }
            out.out(">");
        }

        if (self->ordered_fields.empty() &&
            self->static_method.empty() &&
            self->method.empty()) {
            out.out(" {}\n");
            return;
        }
        out.out(" {\n");
        forindex (var i; self->ordered_fields) {
            var field = self->ordered_fields.get(i);
            out.out("    ").out(field->name.c_str).out(": ");
            field->type.dump(out, pkg);
            out.out("\n");
        }
        foreach (var i; self->method) {
            i.value()->dump(out, pkg, "  ");
        }
        foreach (var i; self->static_method) {
            i.value()->dump(out, pkg, "  ");
        }
        out.out("  }\n");
    }
}