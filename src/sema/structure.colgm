use std::str::{ str };
use std::libc::{ free };
use std::vec::{ vec, primitive_vec };
use std::map::{ hashmap };
use std::ptr::{ ptr };
use std::io::{ io };

use err::span::{ span };
use err::panic::{ panic };
use ast::ast::{ ast, ast_struct_decl, ast_impl };

use sema::type::{ symbol };
use sema::function::{ colgm_func };

pub struct colgm_struct {
    name: str,
    location: span,
    fields: hashmap<str, symbol>,
    ordered_fields: vec<symbol>,
    static_methods: hashmap<str, colgm_func>,
    methods: hashmap<str, colgm_func>,

    generic_template: vec<str>,
    generic_struct_decl: ast_struct_decl*,
    generic_struct_impl: primitive_vec<ptr<ast_impl>>,

    is_public: bool,
    is_extern: bool
}

impl colgm_struct {
    pub func new(name: str*, loc: span*) -> colgm_struct* {
        var res = colgm_struct::__alloc__();
        if (res == nil) {
            panic("colgm_struct::new: failed to allocate memory");
        }
        res->name = name->copy_instance();
        res->location = loc->copy_instance();
        res->fields = hashmap<str, symbol>::instance();
        res->ordered_fields = vec<symbol>::instance();
        res->static_methods = hashmap<str, colgm_func>::instance();
        res->methods = hashmap<str, colgm_func>::instance();
        res->generic_template = vec<str>::instance();
        res->generic_struct_decl = nil;
        res->generic_struct_impl = primitive_vec<ptr<ast_impl>>::instance();
        res->is_public = false;
        res->is_extern = false;
        return res;
    }

    pub func delete(self) {
        self->name.delete();
        self->location.delete();
        self->fields.delete();
        self->ordered_fields.delete();
        self->static_methods.delete();
        self->methods.delete();
        self->generic_template.delete();
        if (self->generic_struct_decl != nil) {
            var to_ast = self->generic_struct_decl => ast*;
            to_ast->delete();
            free(to_ast => i8*);
            self->generic_struct_decl = nil;
        }
        for (var i: u64 = 0; i < self->generic_struct_impl.size; i += 1) {
            var to_ast = self->generic_struct_impl.get(i).get() => ast*;
            to_ast->delete();
            free(to_ast => i8*);
        }
        self->generic_struct_impl.delete();
    }

    pub func copy(self) -> colgm_struct* {
        var res = colgm_struct::__alloc__();
        res->name = self->name.copy_instance();
        res->location = self->location.copy_instance();
        res->fields = self->fields.copy_instance();
        res->ordered_fields = self->ordered_fields.copy_instance();
        res->static_methods = self->static_methods.copy_instance();
        res->methods = self->methods.copy_instance();
        res->generic_template = self->generic_template.copy_instance();
        if (self->generic_struct_decl != nil) {
            res->generic_struct_decl = self->generic_struct_decl->copy();
        } else {
            res->generic_struct_decl = nil;
        }
        res->generic_struct_impl = primitive_vec<ptr<ast_impl>>::instance();
        for (var i: u64 = 0; i < self->generic_struct_impl.size; i += 1) {
            res->generic_struct_impl.push(
                ptr<ast_impl>::wrap(
                    self->generic_struct_impl.get(i).get()->copy()
                )
            );
        }
        res->is_public = self->is_public;
        res->is_extern = self->is_extern;
        return res;
    }
}

impl colgm_struct {
    pub func dump(self, out: io) {
        out.out("  struct ").out(self->name.c_str);
        if (self->ordered_fields.size == 0 &&
            self->static_methods.size == 0 &&
            self->methods.size == 0) {
            out.out("\n");
            return;
        }
        out.out(":\n");
        for (var i: u64 = 0; i < self->ordered_fields.size; i += 1) {
            var field = self->ordered_fields.get(i);
            out.out("    ").out(field->name.c_str).out(": ");
            field->sym_type.dump(out);
            out.out("\n");
        }
    }
}