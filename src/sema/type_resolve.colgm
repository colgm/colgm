use err::report::{ report };
use ast::ast::{ ast_kind, ast_type_def, ast_number };
use util::package::{ package };
use util::to_num::{ to_u64 };

use sema::context::{ sema_context };
use sema::type::{ type };
use sema::symbol_info::{ symbol_kind };

use std::io::{ io };
use std::str::{ str };
use std::panic::{ panic };

pub struct type_resolve {
    err: report*,
    ctx: sema_context*,
    pkg: package*
}

impl type_resolve {
    pub func instance(e: report*, c: sema_context*, p: package*) -> type_resolve {
        return type_resolve { err: e, ctx: c, pkg: p };
    }

    func get_array_length(self, n: ast_number*) -> u64 {
        var res: u64 = 0;
        var to_u64_res = to_u64(n->literal);

        if (to_u64_res.is_ok()) {
            res = to_u64_res.unwrap();
        } else {
            self.err->error(
                n->base.location,
                "invalid number, length should be a u64 number"
            );
        }

        if (res == 0) {
            self.err->error(
                n->base.location,
                "invalid number, length should not be 0"
            );
        }

        if (res < 0 || res > 0xffffffff) {
            self.err->error(
                n->base.location,
                "invalid number, length should be in range [0, 0xffffffff]"
            );
        }

        return res;
    }

    pub func resolve(self, node: ast_type_def*) -> type {
        if (node == nil) {
            panic("node for type resolve cannot be nil");
        }
        var name: str& = node->name->content;
        var file = node->base.get_real_location_file();

        var G = self.ctx->global;

        if (!G->domain.has(file)) {
            self.err->error(node->base.location, "cannot find module");
            return type::error_type();
        }
        var DM = G->domain.get(file);
        var GN = self.ctx->generics.__ptr__();

        if (name.eq_const("void") && node->pointer_depth == 0 && node->is_reference) {
            self.err->error(node->base.location, "cannot use reference void type");
            return type::error_type();
        }

        // cannot find type
        if (!DM.global_symbol.has(name) && !GN->has(name)) {
            var info = str::from("undefined type \"");
            defer info.delete();
            info.append_str(name).append("\"");

            self.err->error(node->base.location, info.c_str);
            return type::error_type();
        }

        // find type but type is not imported as public
        // mainly occurs when import all symbols from a module
        if (DM.global_symbol.has(name) &&
            !DM.global_symbol.get(name).is_public) {
            var info = str::from("private type \"");
            defer info.delete();
            info.append_str(name).append("\" cannot be used");

            self.err->error(node->base.location, info.c_str);
            return type::error_type();
        }

        // function cannot be used as type
        if (DM.global_symbol.has(name) &&
            DM.global_symbol.get(name).kind == symbol_kind::func_kind) {
            var info =  str::from("\"");
            defer info.delete();
            info.append_str(name)
                .append("\" is a function, ")
                .append("cannot be used as a type");

            self.err->error(node->base.location, info.c_str);
            return type::error_type();
        }

        var t = type::instance(name.c_str, "");
        t.pointer_depth = node->pointer_depth;
        t.is_const = node->is_const;

        if (DM.global_symbol.has(name) &&
            DM.global_symbol.get(name).kind == symbol_kind::enum_kind) {
            t.is_enum = true;
        }

        if (node->is_array) {
            t.is_array = node->is_array;
            t.pointer_depth += 1;
            t.array_length = self.get_array_length(node->array_length);
        }
        if (node->is_reference) {
            t.is_reference = true;
        }

        if (DM.global_symbol.has(name) &&
            DM.global_symbol.get(name).kind != symbol_kind::basic_kind) {
            t.loc_file.append_str(DM.global_symbol.get(name).loc_file);
        } else if (DM.generic_symbol.has(name)) {
            t.loc_file.append_str(DM.generic_symbol.get(name).loc_file);
        }

        if (node->generic_types != nil) {
            var gtv = node->generic_types->types.__ptr__();
            foreach (var i; gtv) {
                var gt = i.get();
                if (!gt->is(ast_kind::ast_type_def)) {
                    self.err->error(
                        gt->location,
                        "invalid ast node, expect type def"
                    );
                    continue;
                }
                var gt_res = self.resolve(gt => ast_type_def*);
                defer gt_res.delete();

                t.generics.push(gt_res);                
            }
        }
        return t;
    }
}