use std::str::{ str };
use std::map::{ hashmap };

use sema::type::{ type };

pub struct generic_data {
    // generic name
    name: str,
    // generic type itself
    generic_type: type,
    // replaced types, key is the generic name, type is the real type
    types: hashmap<str, type>
}

impl generic_data {
    pub func instance() -> generic_data {
        return generic_data {
            name: str::from(""),
            generic_type: type::instance(),
            types: hashmap<str, type>::instance()
        };
    }

    pub func delete(self) {
        self->name.delete();
        self->generic_type.delete();
        self->types.delete();
    }
}