use std::str::{ str };
use std::vec::{ vec };
use std::io::{ readfile, io };
use std::fs::{ fs };
use std::string_utils::{
    is_alpha_letter,
    is_digit,
    is_hexdigit,
    is_octdigit
};
use std::panic::{ panic };

use err::report::{ report };
use err::span::{ span };

use parse::token::{ tok_kind, token };

pub struct lexer {
    err: report*,
    toks: vec<token>,
    pos: u64,
    filename: str,
    line: i64,
    column: i64
}

impl lexer {
    pub func instance(e: report*) -> lexer {
        return lexer {
            err: e,
            toks: vec<token>::instance(),
            pos: 0,
            filename: str::instance(),
            line: 0,
            column: 0
        };
    }

    pub func delete(self) {
        self.filename.delete();
        self.toks.delete();
    }

    pub func push_token(self, kind: tok_kind, content: str&, loc: span&) {
        var res = token::instance(kind, content, loc);
        defer res.delete();

        // do token::clone(), content and loc are all copied
        self.toks.push(res);
    }
}

impl lexer {
    // check if the current position is a note, begin with "//"
    func is_note(pos: u64, src: str&) -> bool {
        if (src.get(pos) != '/') {
            return false;
        }
        if (pos + 1 < src.size && src.get(pos + 1) == '/') {
            return true;
        }
        return false;
    }

    func is_identifier_head(c: i8) -> bool {
        return is_alpha_letter(c) || (c == '_');
    }

    func is_identifier_body(c: i8) -> bool {
        return lexer::is_identifier_head(c) || is_digit(c);
    }

    func is_single_char_token(c: i8) -> bool {
        return c == '(' || c == ')' || c == '[' || c == ']' ||
               c == '{' || c == '}' || c == ';' || c == ',' ||
               c == '?' || c == '#';
    }

    func need_lookahead_eq(c: i8) -> bool {
        return c == '+' || c == '-' || c == '*' || c == '/' ||
               c == '%' || c == '~' || c == '^' || c == '=' ||
               c == '<' || c == '>' || c == '!';
    }

    func need_lookahead_other(c: i8) -> bool {
        return c == '&' || c == '|';
    }

    func is_arrow(pos: u64, src: str&) -> bool {
        if (src.get(pos) != '-') {
            return false;
        }
        if (pos + 1 < src.size && src.get(pos + 1) == '>') {
            return true;
        }
        return false;
    }

    func is_wide_arrow(pos: u64, src: str&) -> bool {
        if (src.get(pos) != '=') {
            return false;
        }
        if (pos + 1 < src.size && src.get(pos + 1) == '>') {
            return true;
        }
        return false;
    }

    func is_str(c: i8) -> bool {
        return c == '"' || c == '\'';
    }

    func check_id_kind(src: str&) -> tok_kind {
        if (src.eq_const("true")) {
            return tok_kind::tok_true;
        } elsif (src.eq_const("false")) {
            return tok_kind::tok_false;
        } elsif (src.eq_const("use")) {
            return tok_kind::tok_use;
        } elsif (src.eq_const("enum")) {
            return tok_kind::tok_enum;
        } elsif (src.eq_const("union")) {
            return tok_kind::tok_union;
        } elsif (src.eq_const("for")) {
            return tok_kind::tok_for;
        } elsif (src.eq_const("forindex")) {
            return tok_kind::tok_forindex;
        } elsif (src.eq_const("foreach")) {
            return tok_kind::tok_foreach;
        } elsif (src.eq_const("while")) {
            return tok_kind::tok_while;
        } elsif (src.eq_const("var")) {
            return tok_kind::tok_var;
        } elsif (src.eq_const("struct")) {
            return tok_kind::tok_struct;
        } elsif (src.eq_const("pub")) {
            return tok_kind::tok_pub;
        } elsif (src.eq_const("extern")) {
            return tok_kind::tok_extern;
        } elsif (src.eq_const("const")) {
            return tok_kind::tok_const;
        } elsif (src.eq_const("defer")) {
            return tok_kind::tok_defer;
        } elsif (src.eq_const("impl")) {
            return tok_kind::tok_impl;
        } elsif (src.eq_const("func")) {
            return tok_kind::tok_func;
        } elsif (src.eq_const("match")) {
            return tok_kind::tok_match;
        } elsif (src.eq_const("break")) {
            return tok_kind::tok_break;
        } elsif (src.eq_const("continue")) {
            return tok_kind::tok_continue;
        } elsif (src.eq_const("return")) {
            return tok_kind::tok_return;
        } elsif (src.eq_const("if")) {
            return tok_kind::tok_if;
        } elsif (src.eq_const("elsif")) {
            return tok_kind::tok_elsif;
        } elsif (src.eq_const("else")) {
            return tok_kind::tok_else;
        } elsif (src.eq_const("nil")) {
            return tok_kind::tok_nil;
        } elsif (src.eq_const("and")) {
            return tok_kind::tok_op_and;
        } elsif (src.eq_const("or")) {
            return tok_kind::tok_op_or;
        }
        return tok_kind::tok_id;
    }
}

impl lexer {
    func generate_single_char_token(self, src: str&) {
        var loc = span::create(self.line, self.column, self.filename);
        defer loc.delete();

        var tmp = str::instance();
        var ch = src.get(self.pos);
        tmp.append_char(ch);
        defer tmp.delete();

        self.pos += 1;
        self.column += 1;

        loc.end_line = self.line;
        loc.end_column = self.column;

        if (ch == '(') {
            self.push_token(tok_kind::tok_lparen, tmp, loc);
        } elsif (ch == ')') {
            self.push_token(tok_kind::tok_rparen, tmp, loc);
        } elsif (ch == '[') {
            self.push_token(tok_kind::tok_lbracket, tmp, loc);
        } elsif (ch == ']') {
            self.push_token(tok_kind::tok_rbracket, tmp, loc);
        } elsif (ch == '{') {
            self.push_token(tok_kind::tok_lbrace, tmp, loc);
        } elsif (ch == '}') {
            self.push_token(tok_kind::tok_rbrace, tmp, loc);
        } elsif (ch == ';') {
            self.push_token(tok_kind::tok_semi, tmp, loc);
        } elsif (ch == ',') {
            self.push_token(tok_kind::tok_comma, tmp, loc);
        } elsif (ch == '?') {
            self.push_token(tok_kind::tok_quesmark, tmp, loc);
        } elsif (ch == '#') {
            self.push_token(tok_kind::tok_sharp, tmp, loc);
        }
    }

    func generate_maybe_need_eq_oprs(self, src: str&) {
        var loc = span::create(self.line, self.column, self.filename);
        defer loc.delete();

        var tmp = str::instance();
        defer tmp.delete();
        tmp.append_char(src.get(self.pos));
        self.pos += 1;
        if (self.pos < src.size && src.get(self.pos) == '=') {
            tmp.append_char(src.get(self.pos));
            self.pos += 1;
        }

        self.column += tmp.size => i64;
        loc.end_line = self.line;
        loc.end_column = self.column;

        if (tmp.eq_const("+")) {
            self.push_token(tok_kind::tok_add, tmp, loc);
        } elsif (tmp.eq_const("+=")) {
            self.push_token(tok_kind::tok_addeq, tmp, loc);
        } elsif (tmp.eq_const("-")) {
            self.push_token(tok_kind::tok_sub, tmp, loc);
        } elsif (tmp.eq_const("-=")) {
            self.push_token(tok_kind::tok_subeq, tmp, loc);
        } elsif (tmp.eq_const("*")) {
            self.push_token(tok_kind::tok_mul, tmp, loc);
        } elsif (tmp.eq_const("*=")) {
            self.push_token(tok_kind::tok_muleq, tmp, loc);
        } elsif (tmp.eq_const("/")) {
            self.push_token(tok_kind::tok_div, tmp, loc);
        } elsif (tmp.eq_const("/=")) {
            self.push_token(tok_kind::tok_diveq, tmp, loc);
        } elsif (tmp.eq_const("%")) {
            self.push_token(tok_kind::tok_rem, tmp, loc);
        } elsif (tmp.eq_const("%=")) {
            self.push_token(tok_kind::tok_remeq, tmp, loc);
        } elsif (tmp.eq_const("~")) {
            self.push_token(tok_kind::tok_floater, tmp, loc);
        } elsif (tmp.eq_const("~=")) {
            self.push_token(tok_kind::tok_floatereq, tmp, loc);
        } elsif (tmp.eq_const("^")) {
            self.push_token(tok_kind::tok_bit_xor, tmp, loc);
        } elsif (tmp.eq_const("^=")) {
            self.push_token(tok_kind::tok_bit_xor_eq, tmp, loc);
        } elsif (tmp.eq_const("=")) {
            self.push_token(tok_kind::tok_eq, tmp, loc);
        } elsif (tmp.eq_const("==")) {
            self.push_token(tok_kind::tok_cmp_eq, tmp, loc);
        } elsif (tmp.eq_const("<")) {
            self.push_token(tok_kind::tok_less, tmp, loc);
        } elsif (tmp.eq_const("<=")) {
            self.push_token(tok_kind::tok_leq, tmp, loc);
        } elsif (tmp.eq_const(">")) {
            self.push_token(tok_kind::tok_grt, tmp, loc);
        } elsif (tmp.eq_const(">=")) {
            self.push_token(tok_kind::tok_geq, tmp, loc);
        } elsif (tmp.eq_const("!")) {
            self.push_token(tok_kind::tok_op_not, tmp, loc);
        } elsif (tmp.eq_const("!=")) {
            self.push_token(tok_kind::tok_neq, tmp, loc);
        }
    }

    func generate_lookahead_other(self, src: str&) {
        var loc = span::create(self.line, self.column, self.filename);
        defer loc.delete();

        var tmp = str::instance();
        defer tmp.delete();
        var ch = src.get(self.pos);
        tmp.append_char(ch);

        self.pos += 1;
        if (ch == '&' && self.pos < src.size) {
            if (src.get(self.pos) == '&' || src.get(self.pos) == '=') {
                tmp.append_char(src.get(self.pos));
                self.pos += 1;
            }
        } elsif (ch == '|' && self.pos < src.size) {
            if (src.get(self.pos) == '|' || src.get(self.pos) == '=') {
                tmp.append_char(src.get(self.pos));
                self.pos += 1;
            }
        }

        self.column += tmp.size => i64;
        loc.end_line = self.line;
        loc.end_column = self.column;

        if (tmp.eq_const("&")) {
            self.push_token(tok_kind::tok_bit_and, tmp, loc);
        } elsif (tmp.eq_const("&=")) {
            self.push_token(tok_kind::tok_bit_and_eq, tmp, loc);
        } elsif (tmp.eq_const("&&")) {
            self.push_token(tok_kind::tok_op_and, tmp, loc);
        } elsif (tmp.eq_const("|")) {
            self.push_token(tok_kind::tok_bit_or, tmp, loc);
        } elsif (tmp.eq_const("|=")) {
            self.push_token(tok_kind::tok_bit_or_eq, tmp, loc);
        } elsif (tmp.eq_const("||")) {
            self.push_token(tok_kind::tok_op_or, tmp, loc);
        }
    }

    func generate_arrow(self, src: str&) {
        var loc = span::create(self.line, self.column, self.filename);
        defer loc.delete();

        var tmp = str::instance();
        defer tmp.delete();
        tmp.append_char(src.get(self.pos));
        self.pos += 1;
        tmp.append_char(src.get(self.pos));
        self.pos += 1;

        self.column += 2;
        loc.end_line = self.line;
        loc.end_column = self.column;

        if (tmp.get(0) == '-') {
            self.push_token(tok_kind::tok_arrow, tmp, loc);
        } else {
            self.push_token(tok_kind::tok_wide_arrow, tmp, loc);
        }
    }

    func generate_identifier(self, src: str&) {
        var loc = span::create(self.line, self.column, self.filename);
        defer loc.delete();

        var tmp = str::instance();
        defer tmp.delete();
        while (self.pos < src.size &&
              lexer::is_identifier_body(src.get(self.pos))) {
            tmp.append_char(src.get(self.pos));
            self.pos += 1;
        }

        self.column += tmp.size => i64;
        loc.end_line = self.line;
        loc.end_column = self.column;

        self.push_token(lexer::check_id_kind(tmp), tmp, loc);
    }

    func generate_number(self, src: str&) {
        var loc = span::create(self.line, self.column, self.filename);
        defer loc.delete();

        var tmp = str::instance();
        defer tmp.delete();
        if (src.get(self.pos) == '0' &&
            self.pos + 1 < src.size &&
            src.get(self.pos + 1) == 'x') {
            tmp.append("0x");
            self.pos += 2;
            while (self.pos < src.size && is_hexdigit(src.get(self.pos))) {
                tmp.append_char(src.get(self.pos));
                self.pos += 1;
            }
            if (tmp.size > 2) {
                self.column += tmp.size => i64;
                loc.end_line = self.line;
                loc.end_column = self.column;
                self.push_token(tok_kind::tok_num, tmp, loc);
            } else {
                self.column += tmp.size => i64;
                loc.end_line = self.line;
                loc.end_column = self.column;
                self.err->error(loc, "invalid hex number");
            }
            return;
        }
        if (src.get(self.pos) == '0' &&
            self.pos + 1 < src.size &&
            src.get(self.pos + 1) == 'o') {
            tmp.append("0o");
            self.pos += 2;
            while (self.pos < src.size && is_octdigit(src.get(self.pos))) {
                tmp.append_char(src.get(self.pos));
                self.pos += 1;
            }
            if (tmp.size > 2) {
                self.column += tmp.size => i64;
                loc.end_line = self.line;
                loc.end_column = self.column;
                self.push_token(tok_kind::tok_num, tmp, loc);
            } else {
                self.column += tmp.size => i64;
                loc.end_line = self.line;
                loc.end_column = self.column;
                self.err->error(loc, "invalid oct number");
            }
            return;
        }

        // get integer part
        tmp.append_char(src.get(self.pos));
        self.pos += 1;
        while (self.pos < src.size && is_digit(src.get(self.pos))) {
            tmp.append_char(src.get(self.pos));
            self.pos += 1;
        }

        // get float part
        if (self.pos < src.size && src.get(self.pos) == '.') {
            var lookahead_pos = self.pos + 1;

            // just return, this dot is not part of number
            if (lookahead_pos >= src.size) {
                self.column += tmp.size => i64;
                loc.end_line = self.line;
                loc.end_column = self.column;
                self.push_token(tok_kind::tok_num, tmp, loc);
                return;
            }

            var lookahead_ch = src.get(lookahead_pos);

            // just return, this dot is not part of number
            if (!is_digit(lookahead_ch)) {
                self.column += tmp.size => i64;
                loc.end_line = self.line;
                loc.end_column = self.column;
                self.push_token(tok_kind::tok_num, tmp, loc);
                return;
            }

            tmp.append_char('.');
            self.pos += 1;
            while (self.pos < src.size && is_digit(src.get(self.pos))) {
                tmp.append_char(src.get(self.pos));
                self.pos += 1;
            }
        }

        // get F-E part
        if (self.pos < src.size &&
            (src.get(self.pos) == 'e' || src.get(self.pos) == 'E')) {
            // just return
            if (self.pos + 1 >= src.size) {
                self.column += tmp.size => i64;
                loc.end_line = self.line;
                loc.end_column = self.column;
                self.push_token(tok_kind::tok_num, tmp, loc);
                return;
            }

            var lookahead_pos = self.pos + 1;

            if (is_digit(src.get(lookahead_pos))) {
                tmp.append_char(src.get(self.pos));
                self.pos += 1;
                while (self.pos < src.size && is_digit(src.get(self.pos))) {
                    tmp.append_char(src.get(self.pos));
                    self.pos += 1;
                }
                self.column += tmp.size => i64;
                loc.end_line = self.line;
                loc.end_column = self.column;
                self.push_token(tok_kind::tok_num, tmp, loc);
                return;
            }

            if ((src.get(lookahead_pos) == '-' || src.get(lookahead_pos) == '+') &&
                lookahead_pos + 1 < src.size &&
                is_digit(src.get(lookahead_pos + 1))) {
                tmp.append_char(src.get(self.pos));
                tmp.append_char(src.get(self.pos + 1));
                self.pos += 2;
                while (self.pos < src.size && is_digit(src.get(self.pos))) {
                    tmp.append_char(src.get(self.pos));
                    self.pos += 1;
                }
                self.column += tmp.size => i64;
                loc.end_line = self.line;
                loc.end_column = self.column;
                self.push_token(tok_kind::tok_num, tmp, loc);
                return;
            }
        }

        self.column += tmp.size => i64;
        loc.end_line = self.line;
        loc.end_column = self.column;
        self.push_token(tok_kind::tok_num, tmp, loc);
    }

    func generate_string(self, src: str&) {
        var loc = span::create(self.line, self.column, self.filename);
        defer loc.delete();

        var quote_type = src.get(self.pos);
        var tmp = str::instance();
        defer tmp.delete();
        // skip first quote
        self.pos += 1;
        self.column += 1;

        while (self.pos < src.size && src.get(self.pos) != quote_type) {
            var this_ch = src.get(self.pos);
            if (this_ch == '\n') {
                self.line += 1;
                self.column = 0;
            } else {
                self.column += 1;
            }

            if (this_ch == '\\' && self.pos + 1 < src.size) {
                self.pos += 1;
                var next_ch = src.get(self.pos);
                if (next_ch == '0') {
                    tmp.append_char('\0');
                } elsif (next_ch == 'a') {
                    tmp.append_char('\a');
                } elsif (next_ch == 'b') {
                    tmp.append_char('\b');
                } elsif (next_ch == 'e') {
                    tmp.append_char('\e');
                } elsif (next_ch == 't') {
                    tmp.append_char('\t');
                } elsif (next_ch == 'n') {
                    tmp.append_char('\n');
                } elsif (next_ch == 'v') {
                    tmp.append_char('\v');
                } elsif (next_ch == 'f') {
                    tmp.append_char('\f');
                } elsif (next_ch == 'r') {
                    tmp.append_char('\r');
                } elsif (next_ch == '?') {
                    tmp.append_char('\?');
                } elsif (next_ch == '\\') {
                    tmp.append_char('\\');
                } elsif (next_ch == '\'') {
                    tmp.append_char('\'');
                } elsif (next_ch == '\"') {
                    tmp.append_char('\"');
                } else {
                    tmp.append_char(next_ch);
                }
                if (next_ch == '\n') {
                    self.line += 1;
                    self.column = 0;
                } else {
                    self.column += 1;
                }
            } else {
                tmp.append_char(this_ch);
            }
            self.pos += 1;
        }

        if (self.pos >= src.size) {
            loc.end_line = self.line;
            loc.end_column = self.column;
            self.err->error(loc, "expected end of string but reached eof");
            return;
        }

        // skip last quote
        self.pos += 1;
        self.column += 1;

        loc.end_line = self.line;
        loc.end_column = self.column;

        if (quote_type == '"') {
            self.push_token(tok_kind::tok_str, tmp, loc);
        } else {
            if (tmp.size != 1) {
                self.err->error(loc, "should only contain one character");
            }
            self.push_token(tok_kind::tok_ch, tmp, loc);
        }
    }

    func generate_coloncolon(self, src: str&) {
        var loc = span::create(self.line, self.column, self.filename);
        defer loc.delete();

        var tmp = str::instance();
        defer tmp.delete();
        tmp.append_char(':');
        self.pos += 1;
        self.column += 1;

        if (self.pos < src.size && src.get(self.pos) == ':') {
            tmp.append_char(':');
            self.pos += 1;
            self.column += 1;
            loc.end_line = self.line;
            loc.end_column = self.column;

            self.push_token(tok_kind::tok_coloncolon, tmp, loc);
        } else {
            loc.end_line = self.line;
            loc.end_column = self.column;
            self.push_token(tok_kind::tok_colon,  tmp, loc);
        }
    }

    func generate_ellipsis(self, src: str&) {
        var loc = span::create(self.line, self.column, self.filename);
        defer loc.delete();

        var tmp = str::from(".");
        defer tmp.delete();

        self.pos += 1;
        self.column += 1;

        if (self.pos + 1 < src.size &&
            src.get(self.pos) == '.' &&
            src.get(self.pos + 1) == '.') {
            tmp.append_char('.').append_char('.');
            self.pos += 2;
            self.column += 2;
            loc.end_line = self.line;
            loc.end_column = self.column;

            self.push_token(tok_kind::tok_ellipsis, tmp, loc);
        } else {
            loc.end_line = self.line;
            loc.end_column = self.column;

            self.push_token(tok_kind::tok_dot, tmp, loc);
        }
    }

    func skip_note(self, src: str&) {
        while (self.pos < src.size && src.get(self.pos) != '\n') {
            self.pos += 1;
            self.column += 1;
        }
    }

    func generate_eof_token(self) {
        var eof_span = span::create_full(
            self.line,
            self.column,
            self.line,
            self.column,
            self.filename
        );
        defer eof_span.delete();

        var eof_content = str::from("<eof>");
        defer eof_content.delete();

        self.push_token(tok_kind::tok_eof, eof_content, eof_span);
    }

    pub func scan(self, filename: const i8*) {
        self.filename.clear();
        self.filename.copy_const(filename);
        self.err->load_file_source(filename);

        var src = readfile(filename);
        defer src.delete();

        self.pos = 0;
        self.line = 0;
        self.column = 0;
        while (self.pos < src.size) {
            if (lexer::is_note(self.pos, src)) {
                self.skip_note(src);
            } elsif (lexer::is_identifier_head(src.get(self.pos))) {
                self.generate_identifier(src);
            } elsif (is_digit(src.get(self.pos))) {
                self.generate_number(src);
            } elsif (lexer::is_str(src.get(self.pos))) {
                self.generate_string(src);
            } elsif (lexer::is_arrow(self.pos, src) ||
                     lexer::is_wide_arrow(self.pos, src)) {
                // need to be put before normal operator scan process
                // otherwise `=>` will be recognized as `=` `>`
                self.generate_arrow(src);
            } elsif (lexer::is_single_char_token(src.get(self.pos))) {
                self.generate_single_char_token(src);
            } elsif (lexer::need_lookahead_eq(src.get(self.pos))) {
                self.generate_maybe_need_eq_oprs(src);
            } elsif (lexer::need_lookahead_other(src.get(self.pos))) {
                self.generate_lookahead_other(src);
            } elsif (src.get(self.pos) == ':') {
                self.generate_coloncolon(src);
            } elsif (src.get(self.pos) == '.') {
                self.generate_ellipsis(src);
            } else {
                if (src.get(self.pos) == '\n') {
                    self.line += 1;
                    self.column = 0;
                } else {
                    self.column += 1;
                }
                self.pos += 1;
            }
        }

        self.generate_eof_token();
    }

    pub func dump(self, out: io&) {
        foreach (var i; self.toks) {
            var loc = i.get().location;
            out.out(i.get().tok_kind_to_str())
               .out(" [").out(loc.file.c_str)
               .out(":").out_i64(loc.begin_line + 1)
               .out(":").out_i64(loc.begin_column + 1)
               .out(" ~ ").out(loc.file.c_str)
               .out(":").out_i64(loc.end_line + 1)
               .out(":").out_i64(loc.end_column + 1)
               .out("] \"")
               .out(i.get().content.c_str)
               .out("\"")
               .endln();
        }
    }
}
