use ast::ast::{ ast_kind, ast, root, ast_cond_compile };
use std::str::{ str };
use std::io::{ io };
use util::misc::{ get_platform, get_arch };
use std::vec::{ primitive_vec };
use std::ptr::{ ptr };
use std::libc::{ free };
use util::cli::{ cli_option };

pub func check_enable_if(acc: ast_cond_compile*, co: cli_option*) -> bool {
    if (!acc->cond_name.eq_const("enable_if")) {
        return false;
    }

    var key_arch = str::from("arch");
    var key_target_os = str::from("target_os");
    var arch = get_arch();
    var platform = get_platform();

    if (co->arch != nil) {
        arch = co->arch;
    }
    if (co->platform != nil) {
        platform = co->platform;
    }

    for (var i = acc->conds.iter(); !i.is_end(); i = i.next()) {
        if (!i.key()->eq(key_target_os.__ptr__()) &&
            !i.key()->eq(key_arch.__ptr__())) {
            return false;
        }
    }

    if (acc->conds.has(key_target_os.__ptr__()) &&
        acc->conds.has(key_arch.__ptr__())) {
        var target_os = acc->conds.get(key_target_os.__ptr__());
        var target_arch = acc->conds.get(key_arch.__ptr__());
        key_target_os.delete();
        key_arch.delete();
        return target_os->eq_const(platform) && target_arch->eq_const(arch);
    }

    if (acc->conds.has(key_target_os.__ptr__())) {
        var target_os = acc->conds.get(key_target_os.__ptr__());
        key_target_os.delete();
        key_arch.delete();
        return target_os->eq_const(platform);
    }

    if (acc->conds.has(key_arch.__ptr__())) {
        var target_arch = acc->conds.get(key_arch.__ptr__());
        key_target_os.delete();
        key_arch.delete();
        return target_arch->eq_const(arch);
    }
    return false;
}

pub func remove_disabled_node(node: root*, co: cli_option*) {
    var remove_count = 0;
    var new_vec = primitive_vec<ptr<ast>>::instance();

    for (var i: u64 = 0; i < node->decls.size; i += 1) {
        var d = node->decls.get(i).get();
        if (!d->is(ast_kind::ast_cond_compile)) {
            new_vec.push(ptr<ast>::wrap(d));
            continue;
        }

        if (check_enable_if(d => ast_cond_compile*, co)) {
            var acc = d => ast_cond_compile*;
            new_vec.push(ptr<ast>::wrap(acc->enabled_decl));

            acc->enabled_decl = nil;
            acc->delete();
            free(acc => i8*);
        } else {
            remove_count += 1;

            d->delete();
            free(d => i8*);
        }
    }

    // should clear first, because ptr_vec delete will free each data[i]
    var old_vec = node->decls;
    old_vec.delete();

    node->decls = new_vec;

    if (remove_count > 0) {
        io::stdout().out("[").green().out("ast").reset().out("]");
        io::stdout().out(" run remove disabled node pass: ");
        io::stdout().out_i64(remove_count).out(" node(s) removed\n");
    }
    return;
}