use ast::ast::{
    ast_kind,
    ast,
    root,
    ast_cond_compile,
    ast_enum_decl,
    ast_struct_decl,
    ast_func_decl,
    ast_impl
};

use err::report::{ report };

use std::str::{ str };
use std::io::{ io };
use std::vec::{ vec };
use std::libc::{ free };

use util::platform::{ get_platform, get_arch };
use util::cli::{ cli_option };

func check_enable_if(err: report*, acc: ast_cond_compile*, co: cli_option*) -> bool {
    var key_arch = str::from("arch");
    var key_target_os = str::from("target_os");
    defer {
        key_arch.delete();
        key_target_os.delete();
    }

    var arch = get_arch();
    var platform = get_platform();

    if (co->arch != nil) {
        arch = co->arch;
    }
    if (co->platform != nil) {
        platform = co->platform;
    }

    foreach (var i; acc->conds) {
        if (!i.key()->eq(key_target_os.__ptr__()) &&
            !i.key()->eq(key_arch.__ptr__())) {
            var info = str::from("invalid enable_if condition \"");
            defer info.delete();

            info.append_str(i.key());
            info.append("\", may cause this node disabled");
            err->warn(acc->base.location.__ptr__(), info.c_str);
        }
    }

    if (acc->conds.has(key_target_os.__ptr__()) &&
        acc->conds.has(key_arch.__ptr__())) {
        var target_os = acc->conds.get(key_target_os.__ptr__());
        var target_arch = acc->conds.get(key_arch.__ptr__());
        return target_os->eq_const(platform) && target_arch->eq_const(arch);
    }

    if (acc->conds.has(key_target_os.__ptr__())) {
        var target_os = acc->conds.get(key_target_os.__ptr__());
        return target_os->eq_const(platform);
    }

    if (acc->conds.has(key_arch.__ptr__())) {
        var target_arch = acc->conds.get(key_arch.__ptr__());
        return target_arch->eq_const(arch);
    }

    return false;
}

func check_conds(err: report*,
                 conds: vec<ast_cond_compile*>&,
                 co: cli_option*) -> bool {
    foreach (var i; conds) {
        var acc = i.get();
        if (!acc->cond_name.eq_const("enable_if")) {
            err->error(
                acc->base.location.__ptr__(),
                "this compile condition is not supported"
            );
            continue;
        }
        return check_enable_if(err, acc, co);
    }
    return true;
}

func check_is_supported_condition(name: str&) -> bool {
    var supported_cond = [
        "is_trivial",
        "is_non_trivial",
        "is_pointer",
        "is_non_pointer",
        nil
    ];
    for (var i = 0; supported_cond[i] != nil; i += 1) {
        if (name.eq_const(supported_cond[i])) {
            return true;
        }
    }
    return false;
}

func report_not_supported_condition(err: report*, node: ast_impl*) {
    foreach (var i; node->methods) {
        var mn = i.get() => ast_func_decl*;
        foreach (var j; mn->conds) {
            var acc = j.get();
            if (!check_is_supported_condition(acc->cond_name)) {
                err->error(
                    acc->base.location.__ptr__(),
                    "this compile condition is not supported"
                );
            }
        }
    }
}

pub func remove_disabled_node(err: report*, node: root*, co: cli_option*) {
    var new_vec = vec<ast*>::instance();

    foreach (var i; node->decls) {
        var d = i.get();
        match (d->kind) {
            ast_kind::ast_enum_decl => {
                var n = d => ast_enum_decl*;
                if (check_conds(err, n->conds, co)) {
                    new_vec.push(d);
                } else {
                    d->delete();
                    free(d => i8*);
                }
            }
            ast_kind::ast_struct_decl => {
                var n = d => ast_struct_decl*;
                if (check_conds(err, n->conds, co)) {
                    new_vec.push(d);
                } else {
                    d->delete();
                    free(d => i8*);
                }
            }
            ast_kind::ast_func_decl => {
                var n = d => ast_func_decl*;
                if (check_conds(err, n->conds, co)) {
                    new_vec.push(d);
                } else {
                    d->delete();
                    free(d => i8*);
                }
            }
            ast_kind::ast_impl => {
                var n = d => ast_impl*;
                if (check_conds(err, n->conds, co)) {
                    new_vec.push(d);
                    report_not_supported_condition(err, n);
                } else {
                    d->delete();
                    free(d => i8*);
                }
            }
            _ => {
                new_vec.push(d);
            }
        }
    }

    // should clear first, because ptr_vec delete will free each data[i]
    var old_vec = node->decls;
    old_vec.delete();

    node->decls = new_vec;
    return;
}