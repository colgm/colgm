use std::libc::{ free, itoa, time, srand, rand };
use std::list::{ list, primitive_list };
use std::vec::{ vec, primitive_vec };
use std::map::{ hashmap };
use std::str::{ str };
use std::io::{ io };

func test_hashmap() {
    var buff = [i8; 1024];
    var map = hashmap<str, str>::instance();
    for(var i = 0; i < 16; i += 1) {
        itoa(i, buff, 10);
        var k = str::instance();
        var v = str::instance();
        k.append_i8_vec(buff);
        v.append_i8_vec("test hashmap<str, str> ");
        v.append_i8_vec(buff);
        map.insert(k.__ptr__(), v.__ptr__());
        k.delete();
        v.delete();
    }

    for(var i = 0; i < 16; i += 1) {
        itoa(i, buff, 10);
        var k = str::instance();
        k.append_i8_vec(buff);
        if (map.has(k.__ptr__())) {
            io::stdout().out("[").green().out("test").reset().out("] hashmap: ");
            io::stdout().out(map.get(k.__ptr__())->c_str).endln();
        }
        k.delete();
    }

    map.delete();
}

func list_dump(list: list<str>*) {
    var temp = list->head;
    while (temp => i8* != nil) {
        io::stdout().out("[").green().out("test").reset().out("] list: ");
        io::stdout().out(temp->elem->c_str).endln();
        temp = temp->next;
    }
}

func primitive_list_dump(list: primitive_list<i64>*) {
    var temp = list->head;
    while (temp => i8* != nil) {
        io::stdout().out("[").green().out("test").reset().out("] vec: ");
        io::stdout().out_i64(temp->elem).endln();
        temp = temp->next;
    }
}

func test_list() {
    var s = str::instance();
    var str_list = list<str>::instance();
    var int_list = primitive_list<i64>::instance();

    for(var i = 0; i < 16; i += 1) {
        var num = rand() % (4096 => i32);
        var buff = [i8; 1024];
        itoa(num => i64, buff, 10);
        s.clear();
        s.append_i8_vec("test list<str> ");
        s.append_i8_vec(buff);
        str_list.insert(s.__ptr__());
        int_list.insert(num => i64);
    }
    list_dump(str_list.__ptr__());
    primitive_list_dump(int_list.__ptr__());

    s.delete();
    str_list.delete();
    int_list.delete();
}

func vec_dump(vec: vec<str>*) {
    for(var i = 0 => u64; i < vec->size; i += 1 => u64) {
        io::stdout().out("[").green().out("test").reset().out("] vec: ");
        io::stdout().out(vec->get(i)->c_str).endln();
    }
}

func primitive_vec_dump(vec: primitive_vec<i64>*) {
    for(var i = 0 => u64; i < vec->size; i += 1 => u64) {
        io::stdout().out("[").green().out("test").reset().out("] vec: ");
        io::stdout().out_i64(vec->get(i)).endln();
    }
}

func test_vector() {
    var s = str::instance();
    var str_vec = vec<str>::instance();
    var int_vec = primitive_vec<i64>::instance();
    for(var i = 0; i < 16; i += 1) {
        var num = rand() % (4096 => i32);
        var buff = [i8; 1024];
        itoa(num => i64, buff, 10);
        s.clear();
        s.append_i8_vec("test vec<str> ");
        s.append_i8_vec(buff);
        str_vec.push(s.__ptr__());
        int_vec.push(num => i64);
    }
    vec_dump(str_vec.__ptr__());
    primitive_vec_dump(int_vec.__ptr__());

    s.delete();
    str_vec.delete();
    int_vec.delete();
}

func TEST_ALL() {
    srand(time(nil => u64*) => u32);
    test_hashmap();
    test_list();
    test_vector();
}

func main() -> i32 {
    TEST_ALL();
    return 0 => i32;
}