use std::vec::{ vec };
use std::str::{ str };
use std::map::{ pair };
use std::ptr::{ basic };
use std::libc::{ free };
use std::io::{ io };

use err::span::{ span };
use err::panic::{ print_backtrace };
use sema::type::{ type };
use mir::mir::*;

use package::{ package };

pub struct mir_struct {
    name: str,
    location: span,
    field_type: vec<type>
}

impl mir_struct {
    pub func instance(name: str*, loc: span*) -> mir_struct {
        return mir_struct {
            name: name->copy_instance(),
            location: loc->copy_instance(),
            field_type: vec<type>::instance()
        };
    }

    pub func copy(self) -> mir_struct* {
        var res = mir_struct::__alloc__();
        res->name = self->name.copy_instance();
        res->location = self->location.copy_instance();
        res->field_type = self->field_type.copy_instance();
        return res;
    }

    pub func delete(self) {
        self->name.delete();
        self->location.delete();
        self->field_type.delete();
    }
}

pub struct mir_func {
    name: str,
    location: span,
    params: vec<pair<str, type>>,
    with_va_args: bool,
    attributes: vec<str>,
    return_type: type,
    block: mir_block*
}

impl mir_func {
    pub func instance(name: str*, loc: span*, ret_ty: type*) -> mir_func {
        return mir_func {
            name: name->copy_instance(),
            location: loc->copy_instance(),
            params: vec<pair<str, type>>::instance(),
            with_va_args: false,
            attributes: vec<str>::instance(),
            return_type: ret_ty->copy_instance(),
            block: nil
        };
    }

    pub func copy(self) -> mir_func* {
        var res = mir_func::__alloc__();
        res->name = self->name.copy_instance();
        res->location = self->location.copy_instance();
        res->params = self->params.copy_instance();
        res->with_va_args = self->with_va_args;
        res->attributes = self->attributes.copy_instance();
        res->return_type = self->return_type.copy_instance();
        
        res->block = self->block; // shallow copy
        self->block = nil; // clear source func block
        return res;
    }

    pub func delete(self) {
        self->name.delete();
        self->location.delete();
        self->params.delete();
        self->attributes.delete();
        self->return_type.delete();
        if (self->block != nil) {
            var n = self->block => mir*;
            n->delete();
            free(n => i8*);
        }
    }
}

pub struct mir_context {
    structs: vec<mir_struct>,
    decls: vec<mir_func>,
    impls: vec<mir_func>
}

impl mir_context {
    pub func instance() -> mir_context {
        return mir_context {
            structs: vec<mir_struct>::instance(),
            decls: vec<mir_func>::instance(),
            impls: vec<mir_func>::instance()
        };
    }

    pub func delete(self) {
        self->structs.delete();
        self->decls.delete();
        self->impls.delete();
    }

    pub func dump(self, out: io, pkg: package*) {
        for (var i = self->decls.iter(); !i.is_end(); i = i.next()) {
            out.out("<").out(i.get()->name.c_str).out(">").endln();
        }
        for (var i = self->impls.iter(); !i.is_end(); i = i.next()) {
            out.out("<").out(i.get()->name.c_str).out(">:").endln();
            if (i.get()->block != nil) {
                var m = i.get()->block => mir*;
                m->dump(out, pkg, 1);
            }
            out.endln();
        }
    }
}
