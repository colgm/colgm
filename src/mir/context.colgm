use std::vec::{ vec };
use std::str::{ str };
use std::map::{ pair };
use std::ptr::{ basic };
use std::libc::{ free };
use std::io::{ io };
use std::ptr::{ ptr };

use err::span::{ span };
use err::panic::{ panic };
use sema::type::{ type };
use mir::mir::*;
use util::timestamp::{ maketimestamp };

use package::{ package };

pub struct mir_struct {
    name: str,
    location: span,
    field_type: vec<type>
}

impl mir_struct {
    pub func instance(name: str*, loc: span*) -> mir_struct {
        return mir_struct {
            name: name->copy_instance(),
            location: loc->copy_instance(),
            field_type: vec<type>::instance()
        };
    }

    pub func copy(self) -> mir_struct* {
        var res = mir_struct::__alloc__();
        if (res == nil) {
            panic("failed to allocate memory");
        }
        res->name = self->name.copy_instance();
        res->location = self->location.copy_instance();
        res->field_type = self->field_type.copy_instance();
        return res;
    }

    pub func delete(self) {
        self->name.delete();
        self->location.delete();
        self->field_type.delete();
    }
}

pub struct mir_func {
    name: str,
    location: span,
    params: vec<pair<str, type>>,
    with_va_args: bool,
    attributes: vec<str>,
    return_type: type,
    block: mir_block*
}

impl mir_func {
    pub func instance(name: str*, loc: span*, ret_ty: type*) -> mir_func {
        return mir_func {
            name: name->copy_instance(),
            location: loc->copy_instance(),
            params: vec<pair<str, type>>::instance(),
            with_va_args: false,
            attributes: vec<str>::instance(),
            return_type: ret_ty->copy_instance(),
            block: nil
        };
    }

    pub func copy(self) -> mir_func* {
        var res = mir_func::__alloc__();
        if (res == nil) {
            panic("failed to allocate memory");
        }
        res->name = self->name.copy_instance();
        res->location = self->location.copy_instance();
        res->params = self->params.copy_instance();
        res->with_va_args = self->with_va_args;
        res->attributes = self->attributes.copy_instance();
        res->return_type = self->return_type.copy_instance();
        
        res->block = self->block; // shallow copy
        self->block = nil; // clear source func block
        return res;
    }

    pub func delete(self) {
        self->name.delete();
        self->location.delete();
        self->params.delete();
        self->attributes.delete();
        self->return_type.delete();
        if (self->block != nil) {
            var n = self->block => mir*;
            n->delete();
            free(n => i8*);
        }
    }
}

pub struct mir_context {
    structs: vec<mir_struct>,
    decls: vec<mir_func>,
    impls: vec<mir_func>
}

impl mir_context {
    pub func instance() -> mir_context {
        return mir_context {
            structs: vec<mir_struct>::instance(),
            decls: vec<mir_func>::instance(),
            impls: vec<mir_func>::instance()
        };
    }

    pub func delete(self) {
        self->structs.delete();
        self->decls.delete();
        self->impls.delete();
    }

    pub func dump(self, out: io, pkg: package*) {
        foreach (var i; self->decls) {
            out.out("<").out(i.get()->name.c_str).out(">").endln();
        }
        if (self->decls.size > 0) {
            out.endln();
        }
        foreach (var i; self->impls) {
            out.out("<").out(i.get()->name.c_str).out(">:").endln();
            if (i.get()->block != nil) {
                var m = i.get()->block => mir*;
                m->dump(out, pkg, 1);
            }
            out.endln();
        }
    }

    pub func adjust_posix_open(self, verbose: bool) {
        var ts = maketimestamp();
        ts.stamp();

        foreach (var i; self->decls) {
            if (!i.get()->name.eq_const("open")) {
                continue;
            }

            var open_func = i.get();
            while (open_func->params.size > 2) {
                open_func->params.pop_back();
            }
            open_func->with_va_args = true;
            break;
        }

        if (verbose) {
            io::stdout().green().out("[ MIR-PASS ] ").reset();
            io::stdout().out("Run adjust posix open: ");
            io::stdout().light_cyan().out("success ").reset();
            io::stdout().out_f64(ts.elapsed_msec()).out(" ms\n");
        }
    }

    func add_malloc_decl(self) {
        foreach (var i; self->decls) {
            if (i.get()->name.eq_const("malloc")) {
                return;
            }
        }

        var name = str::from("malloc");
        var null_loc = span::instance();
        var ret_type = type::i8_type(1);

        var arg_type = type::i64_type();
        var size = str::from("size");
        var arg_pair = pair<str, type>::instance(
            size.__ptr__(),
            arg_type.__ptr__()
        );

        var malloc_decl = mir_func::instance(
            name.__ptr__(),
            null_loc.__ptr__(),
            ret_type.__ptr__()
        );
        var nounwind_attr = str::from("nounwind");
        malloc_decl.attributes.push(nounwind_attr.__ptr__());
        malloc_decl.params.push(arg_pair.__ptr__());
        self->decls.push(malloc_decl.__ptr__());
        malloc_decl.delete();

        name.delete();
        null_loc.delete();
        ret_type.delete();
        arg_type.delete();
        size.delete();
        arg_pair.delete();
        nounwind_attr.delete();
    }

    func add_free_decl(self) {
        foreach (var i; self->decls) {
            if (i.get()->name.eq_const("free")) {
                return;
            }
        }

        var name = str::from("free");
        var null_loc = span::instance();
        var ret_type = type::void_type();

        var arg_type = type::i8_type(1);
        var p = str::from("ptr");
        var arg_pair = pair<str, type>::instance(
            p.__ptr__(),
            arg_type.__ptr__()
        );

        var free_decl = mir_func::instance(
            name.__ptr__(),
            null_loc.__ptr__(),
            ret_type.__ptr__()
        );
        var nounwind_attr = str::from("nounwind");
        free_decl.attributes.push(nounwind_attr.__ptr__());
        free_decl.params.push(arg_pair.__ptr__());
        self->decls.push(free_decl.__ptr__());
        free_decl.delete();

        name.delete();
        null_loc.delete();
        ret_type.delete();
        arg_type.delete();
        p.delete();
        arg_pair.delete();
        nounwind_attr.delete();
    }

    func add_main_impl(self) {
        foreach (var i; self->decls) {
            if (i.get()->name.eq_const("main")) {
                return;
            }
        }
        foreach (var i; self->impls) {
            if (i.get()->name.eq_const("main")) {
                return;
            }
        }

        var name = str::from("main");
        var null_loc = span::instance();
        var ret_type = type::i32_type();

        var main_impl = mir_func::instance(
            name.__ptr__(),
            null_loc.__ptr__(),
            ret_type.__ptr__()
        );
        main_impl.block = mir_block::new(null_loc.__ptr__());
        var ret_stmt = mir_return::new(
            null_loc.__ptr__(),
            mir_block::new(null_loc.__ptr__())
        );
        var zero = str::from("0");
        ret_stmt->value->content.push(ptr<mir>::wrap(
            mir_number::new(null_loc.__ptr__(), zero.__ptr__(), ret_type.__ptr__()) => mir*
        ));
        main_impl.block->content.push(ptr<mir>::wrap(ret_stmt => mir*));
        self->impls.push(main_impl.__ptr__());
        main_impl.delete();

        name.delete();
        null_loc.delete();
        ret_type.delete();
        zero.delete();
    }

    pub func add_default_func(self, verbose: bool) {
        var ts = maketimestamp();
        ts.stamp();

        self->add_malloc_decl();
        self->add_free_decl();
        self->add_main_impl();

        if (verbose) {
            io::stdout().green().out("[ MIR-PASS ] ").reset();
            io::stdout().out("Run add default function: ");
            io::stdout().light_cyan().out("success ").reset();
            io::stdout().out_f64(ts.elapsed_msec()).out(" ms\n");
        }
    }
}
