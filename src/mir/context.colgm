use std::vec::{ vec };
use std::str::{ str };
use std::pair::{ pair };
use std::libc::{ free };
use std::io::{ io };

use err::span::{ span };
use ast::tree_maker::{ tree_maker };
use sema::type::{ type };
use mir::mir::*;
use util::timestamp::{ maketimestamp };
use util::package::{ package };

pub struct mir_struct {
    name: str,
    location: span,
    field_name: vec<str>,
    field_type: vec<type>,

    size_calculated: bool,
    size: u64,
    align: u64
}

impl mir_struct {
    pub func instance(name: str*, loc: span*) -> mir_struct {
        return mir_struct {
            name: name->clone(),
            location: loc->clone(),
            field_name: vec<str>::instance(),
            field_type: vec<type>::instance(),
            size_calculated: false,
            size: 0,
            align: 0
        };
    }

    pub func clone(self) -> mir_struct {
        return mir_struct {
            name: self.name.clone(),
            location: self.location.clone(),
            field_name: self.field_name.clone(),
            field_type: self.field_type.clone(),
            size_calculated: self.size_calculated,
            size: self.size,
            align: self.align
        };
    }

    pub func delete(self) {
        self.name.delete();
        self.location.delete();
        self.field_name.delete();
        self.field_type.delete();
    }
}

pub struct mir_tagged_union {
    name: str,
    location: span,
    member_type: vec<type>,

    size_calculated: bool,
    total_size: u64,
    union_size: u64,
    align: u64,

    max_align_type: type,
    max_align_type_size: u64
}

impl mir_tagged_union {
    pub func instance(name: str*, loc: span*) -> mir_tagged_union {
        return mir_tagged_union {
            name: name->clone(),
            location: loc->clone(),
            member_type: vec<type>::instance(),
            size_calculated: false,
            total_size: 0,
            union_size: 0,
            align: 0,
            max_align_type: type::instance("", ""),
            max_align_type_size: 0
        };
    }

    pub func clone(self) -> mir_tagged_union {
        return mir_tagged_union {
            name: self.name.clone(),
            location: self.location.clone(),
            member_type: self.member_type.clone(),
            size_calculated: self.size_calculated,
            total_size: self.total_size,
            union_size: self.union_size,
            align: self.align,
            max_align_type: self.max_align_type.clone(),
            max_align_type_size: self.max_align_type_size
        };
    }

    pub func delete(self) {
        self.name.delete();
        self.location.delete();
        self.member_type.delete();
        self.max_align_type.delete();
    }
}

pub struct mir_func {
    name: str,
    location: span,
    params: vec<pair<str, type>>,
    with_va_args: bool,
    attributes: vec<str>,
    return_type: type,
    block: mir_block*
}

impl mir_func {
    pub func instance(name: const i8*, loc: span*, ret_ty: type*) -> mir_func {
        return mir_func {
            name: str::from(name),
            location: loc->clone(),
            params: vec<pair<str, type>>::instance(),
            with_va_args: false,
            attributes: vec<str>::instance(),
            return_type: ret_ty->clone(),
            block: nil
        };
    }

    pub func clone(self) -> mir_func {
        var res = mir_func {};
        res.name = self.name.clone();
        res.location = self.location.clone();
        res.params = self.params.clone();
        res.with_va_args = self.with_va_args;
        res.attributes = self.attributes.clone();
        res.return_type = self.return_type.clone();
        
        res.block = self.block; // shallow copy
        self.block = nil; // clear source func block
        return res;
    }

    pub func delete(self) {
        self.name.delete();
        self.location.delete();
        self.params.delete();
        self.attributes.delete();
        self.return_type.delete();
        if (self.block != nil) {
            var n = self.block => mir*;
            n->delete();
            free(n => i8*);
        }
    }
}

pub struct mir_context {
    structs: vec<mir_struct>,
    tagged_unions: vec<mir_tagged_union>,
    decls: vec<mir_func>,
    impls: vec<mir_func>
}

impl mir_context {
    pub func instance() -> mir_context {
        return mir_context {
            structs: vec<mir_struct>::instance(),
            tagged_unions: vec<mir_tagged_union>::instance(),
            decls: vec<mir_func>::instance(),
            impls: vec<mir_func>::instance()
        };
    }

    pub func delete(self) {
        self.structs.delete();
        self.tagged_unions.delete();
        self.decls.delete();
        self.impls.delete();
    }

    pub func dump(self, out: io&, pkg: package&) {
        var tm = tree_maker::instance();
        defer tm.delete();

        foreach (var i; self.impls) {
            out.blue().out("<").out(i.get().name.c_str).out(">:").reset().endln();
            if (i.get().block != nil) {
                var m = i.get().block => mir*;
                m->dump(out, pkg, tm);
            }
            out.endln();
        }
    }

    pub func adjust_posix_open(self, verbose: bool) {
        var ts = maketimestamp();
        ts.stamp();

        foreach (var i; self.decls) {
            if (!i.get().name.eq_const("open")) {
                continue;
            }

            var open_func = i.get();
            while (open_func.params.size > 2) {
                open_func.params.pop_back();
            }
            open_func.with_va_args = true;
            break;
        }

        if (verbose) {
            io::stdout().green().out("  MIR-PASS ").reset();
            io::stdout().out("Run MIR pass");
            io::stdout().blue().out(" <adjust posix open>").reset().out(": ");
            io::stdout().cyan().out("success ").reset();
            io::stdout().out_f64(ts.elapsed_msec()).out(" ms\n");
        }
    }

    func add_malloc_decl(self) {
        foreach (var i; self.decls) {
            if (i.get().name.eq_const("malloc")) {
                return;
            }
        }

        var null_loc = span::null();
        var ret_type = type::i8_type(1);
        var arg_type = type::i64_type();
        var size = str::from("size");
        var arg_pair = pair<str, type>::instance(size, arg_type);
        defer {
            null_loc.delete();
            ret_type.delete();
            arg_type.delete();
            size.delete();
            arg_pair.delete();
        }

        var malloc_decl = mir_func::instance(
            "malloc",
            null_loc.__ptr__(),
            ret_type.__ptr__()
        );
        defer malloc_decl.delete();

        var nounwind_attr = str::from("nounwind");
        defer nounwind_attr.delete();

        malloc_decl.attributes.push(nounwind_attr.__ptr__());
        malloc_decl.params.push(arg_pair.__ptr__());
        self.decls.push(malloc_decl.__ptr__());
    }

    func add_free_decl(self) {
        foreach (var i; self.decls) {
            if (i.get().name.eq_const("free")) {
                return;
            }
        }

        var null_loc = span::null();
        var ret_type = type::void_type();
        var arg_type = type::i8_type(1);
        var p = str::from("ptr");
        var arg_pair = pair<str, type>::instance(p, arg_type);
        defer {
            null_loc.delete();
            ret_type.delete();
            arg_type.delete();
            p.delete();
            arg_pair.delete();
        }

        var free_decl = mir_func::instance(
            "free",
            null_loc.__ptr__(),
            ret_type.__ptr__()
        );
        defer free_decl.delete();

        var nounwind_attr = str::from("nounwind");
        defer nounwind_attr.delete();

        free_decl.attributes.push(nounwind_attr.__ptr__());
        free_decl.params.push(arg_pair.__ptr__());
        self.decls.push(free_decl.__ptr__());
    }

    func add_main_impl(self) {
        foreach (var i; self.decls) {
            if (i.get().name.eq_const("main")) {
                return;
            }
        }
        foreach (var i; self.impls) {
            if (i.get().name.eq_const("main")) {
                return;
            }
        }

        var null_loc = span::null();
        var ret_type = type::i32_type();
        defer {
            null_loc.delete();
            ret_type.delete();
        }

        var main_impl = mir_func::instance(
            "main",
            null_loc.__ptr__(),
            ret_type.__ptr__()
        );
        defer main_impl.delete();

        main_impl.block = mir_block::new(null_loc.__ptr__());
        var ret_stmt = mir_return::new(
            null_loc.__ptr__(),
            mir_block::new(null_loc.__ptr__()),
            false
        );

        var zero = str::from("0");
        defer zero.delete();

        ret_stmt->value->add(mir_number::new(
            null_loc.__ptr__(),
            zero.__ptr__(),
            ret_type.__ptr__()
        ) => mir*);
        main_impl.block->add(ret_stmt => mir*);
        self.impls.push(main_impl.__ptr__());
    }

    pub func add_default_func(self, verbose: bool) {
        var ts = maketimestamp();
        ts.stamp();

        self.add_malloc_decl();
        self.add_free_decl();
        self.add_main_impl();

        if (verbose) {
            io::stdout().green().out("  MIR-PASS ").reset();
            io::stdout().out("Run MIR pass");
            io::stdout().blue().out(" <insert default function>").reset().out(": ");
            io::stdout().cyan().out("success ").reset();
            io::stdout().out_f64(ts.elapsed_msec()).out(" ms\n");
        }
    }
}
