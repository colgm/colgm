use std::str::{ str };
use std::libc::{ free };
use std::io::{ io };
use std::pair::{ pair };
use std::panic::{ panic, assert, unreachable };

use err::report::{ report };
use err::span::{ span };

use ast::ast::*;
use ast::dumper::{ ast_dumper };

use sema::type::{ type };
use sema::context::{ sema_context };
use sema::type_resolve::{ type_resolve };

use mir::mir::*;
use mir::context::{
    mir_context,
    mir_struct,
    mir_tagged_union,
    mir_func
};

use util::package::{ package };

pub struct ast2mir {
    err: report*,
    ctx: sema_context*,
    tr: type_resolve,
    pkg: package*,

    mctx: mir_context*,
    impl_struct_name: str,
    block: mir_block*
}

impl ast2mir {
    pub func instance(e: report*,
                      c: sema_context*,
                      p: package*,
                      m: mir_context*) -> ast2mir {
        return ast2mir {
            err: e,
            ctx: c,
            tr: type_resolve::instance(e, c, p),
            pkg: p,
            mctx: m,
            impl_struct_name: str::instance(),
            block: nil
        };
    }

    pub func delete(self) {
        self.impl_struct_name.delete();
        if (self.block != nil) {
            var n = self.block => mir*;
            n->delete();
            free(n => i8*);
        }
    }
}

impl ast2mir {
    func visit(self, a: ast*) {
        match (a->kind) {
            ast_kind::ast_null => {}
            ast_kind::ast_root => unreachable();
            ast_kind::ast_unary_operator => {
                self.visit_unary_operator(a => ast_unary_operator*);
            }
            ast_kind::ast_binary_operator => {
                self.visit_binary_operator(a => ast_binary_operator*);
            }
            ast_kind::ast_type_convert => {
                self.visit_type_convert(a => ast_type_convert*);
            }
            ast_kind::ast_nil => self.visit_nil(a => ast_nil*);
            ast_kind::ast_number => self.visit_number(a => ast_number*);
            ast_kind::ast_string => self.visit_string(a => ast_string*);
            ast_kind::ast_char => self.visit_char(a => ast_char*);
            ast_kind::ast_bool => self.visit_bool(a => ast_bool*);
            ast_kind::ast_array_list => {
                self.visit_array_list(a => ast_array_list*);
            }
            ast_kind::ast_call_index => {
                self.visit_call_index(a => ast_call_index*);
            }
            ast_kind::ast_call_func_args => {
                self.visit_call_func_args(a => ast_call_func_args*);
            }
            ast_kind::ast_get_field => {
                self.visit_get_field(a => ast_get_field*);
            }
            ast_kind::ast_ptr_get_field => {
                self.visit_ptr_get_field(a => ast_ptr_get_field*);
            }
            ast_kind::ast_initializer => {
                self.visit_initializer(a => ast_initializer*);
            }
            ast_kind::ast_call_path => self.visit_call_path(a => ast_call_path*);
            ast_kind::ast_call => self.visit_call(a => ast_call*);
            ast_kind::ast_definition => self.visit_definition(a => ast_definition*);
            ast_kind::ast_assignment => self.visit_assignment(a => ast_assignment*);
            ast_kind::ast_cond_stmt => self.visit_cond_stmt(a => ast_cond_stmt*);
            ast_kind::ast_match_stmt => self.visit_match_stmt(a => ast_match_stmt*);
            ast_kind::ast_while_stmt => self.visit_while_stmt(a => ast_while_stmt*);
            ast_kind::ast_for_stmt => self.visit_for_stmt(a => ast_for_stmt*);
            ast_kind::ast_forindex => self.visit_forindex(a => ast_forindex*);
            ast_kind::ast_foreach => self.visit_foreach(a => ast_foreach*);
            ast_kind::ast_in_stmt_expr => self.visit_in_stmt_expr(a => ast_in_stmt_expr*);
            ast_kind::ast_ret_stmt => self.visit_ret_stmt(a => ast_ret_stmt*);
            ast_kind::ast_continue_stmt => self.visit_continue_stmt(a => ast_continue_stmt*);
            ast_kind::ast_break_stmt => self.visit_break_stmt(a => ast_break_stmt*);
            _ => {
                var info = str::from("[ast2mir] unsupported ast: ");
                info.append(ast_kind_name(a->kind));
                panic(info.c_str);
            }
        }
    }

    func visit_unary_operator(self, n: ast_unary_operator*) {
        var temp = self.block;

        var unary_operator_block = mir_block::new(n->value->location);
        self.block = unary_operator_block;
        self.visit(n->value);
        self.block = temp;

        var op = mir_unary_opr::neg;
        match (n->kind) {
            unary_kind::neg => op = mir_unary_opr::neg;
            unary_kind::bnot => op = mir_unary_opr::bnot;
            unary_kind::lnot => op = mir_unary_opr::lnot;
        }

        self.block->add(mir_unary::new(
            n->base.location,
            op,
            n->base.resolved_type,
            unary_operator_block
        ) => mir*);
    }

    func visit_binary_operator(self, n: ast_binary_operator*) {
        var temp = self.block;

        var lhs = mir_block::new(n->left->location);
        self.block = lhs;
        self.visit(n->left);
        self.block = temp;

        var rhs = mir_block::new(n->right->location);
        self.block = rhs;
        self.visit(n->right);
        self.block = temp;

        var op = mir_binary_opr::add;
        match (n->kind) {
            binary_kind::add => op = mir_binary_opr::add;
            binary_kind::sub => op = mir_binary_opr::sub;
            binary_kind::mul => op = mir_binary_opr::mul;
            binary_kind::div => op = mir_binary_opr::div;
            binary_kind::rem => op = mir_binary_opr::rem;
            binary_kind::cmpeq => op = mir_binary_opr::cmpeq;
            binary_kind::cmpne => op = mir_binary_opr::cmpne;
            binary_kind::less => op = mir_binary_opr::less;
            binary_kind::leq => op = mir_binary_opr::leq;
            binary_kind::grt => op = mir_binary_opr::grt;
            binary_kind::geq => op = mir_binary_opr::geq;
            binary_kind::cmpand => op = mir_binary_opr::cmpand;
            binary_kind::cmpor => op = mir_binary_opr::cmpor;
            binary_kind::band => op = mir_binary_opr::band;
            binary_kind::bor => op = mir_binary_opr::bor;
            binary_kind::bxor => op = mir_binary_opr::bxor;
        }

        self.block->add(mir_binary::new(
            n->base.location,
            op,
            n->base.resolved_type,
            lhs,
            rhs
        ) => mir*);
    }

    func visit_type_convert(self, n: ast_type_convert*) {
        var new_block = mir_block::new(n->base.location);
        var temp = self.block;
        self.block = new_block;
        self.visit(n->from);
        self.block = temp;

        var target_type = self.tr.resolve(n->to);
        defer target_type.delete();

        if (self.ctx->has_domain(target_type.loc_file)) {
            var dm = self.ctx->get_domain(target_type.loc_file);
            if (dm.enums.has(target_type.name)) {
                target_type.is_enum = true;
            }
        }

        self.block->add(mir_type_convert::new(
            n->base.location,
            new_block,
            target_type
        ) => mir*);
    }

    func visit_nil(self, n: ast_nil*) {
        self.block->add(mir_nil::new(
            n->base.location,
            n->base.resolved_type
        ) => mir*);
    }

    func visit_number(self, n: ast_number*) {
        self.block->add(mir_number::new(
            n->base.location,
            n->literal.__ptr__(),
            n->base.resolved_type
        ) => mir*);
    }

    func visit_string(self, n: ast_string*) {
        self.block->add(mir_string::new(
            n->base.location,
            n->literal.__ptr__(),
            n->base.resolved_type
        ) => mir*);
    }

    func visit_char(self, n: ast_char*) {
        self.block->add(mir_char::new(
            n->base.location,
            n->literal.__ptr__(),
            n->base.resolved_type
        ) => mir*);
    }

    func visit_bool(self, n: ast_bool*) {
        self.block->add(mir_bool::new(
            n->base.location,
            n->flag,
            n->base.resolved_type
        ) => mir*);
    }

    func visit_array_list(self, n: ast_array_list*) {
        var new_block = mir_block::new(n->base.location);
        var temp = self.block;
        self.block = new_block;
        foreach (var i; n->value) {
            self.visit(i.get());
        }
        self.block = temp;

        var new_array = mir_array::new(
            n->base.location,
            n->base.resolved_type.array_length,
            n->base.resolved_type
        );
        new_array->value = new_block;
        self.block->add(new_array => mir*);
    }

    func visit_call_index(self, n: ast_call_index*) {
        var new_block = mir_block::new(n->base.location);
        var temp = self.block;
        self.block = new_block;
        self.visit(n->index);
        self.block = temp;

        self.block->add(mir_call_index::new(
            n->base.location,
            new_block,
            n->base.resolved_type
        ) => mir*);
    }

    func visit_call_func_args(self, n: ast_call_func_args*) {
        var new_block = mir_block::new(n->base.location);
        var temp = self.block;
        self.block = new_block;
        foreach (var i; n->args) {
            self.visit(i.get());
        }
        self.block = temp;

        self.block->add(mir_call_func::new(
            n->base.location,
            new_block,
            n->args_is_ref.__ptr__(),
            n->base.resolved_type
        ) => mir*);
    }

    func visit_get_field(self, n: ast_get_field*) {
        self.block->add(mir_get_field::new(
            n->base.location,
            n->name.__ptr__(),
            n->base.resolved_type
        ) => mir*);
    }

    func visit_ptr_get_field(self, n: ast_ptr_get_field*) {
        self.block->add(mir_ptr_get_field::new(
            n->base.location,
            n->name.__ptr__(),
            n->base.resolved_type
        ) => mir*);
    }

    func visit_initializer(self, n: ast_initializer*) {
        var temp = self.block;
        var m = mir_struct_init::new(
            n->base.location,
            n->base.resolved_type
        );
        foreach (var i; n->pairs) {
            var p = i.get() => ast_init_pair*;
            self.block = mir_block::new(p->base.location);
            self.visit(p->value);
            m->add_field(
                p->field->content.__ptr__(),
                self.block,
                p->value->resolved_type
            );
        }
        self.block = temp;
        self.block->add(m => mir*);
    }

    func visit_call_path(self, n: ast_call_path*) {
        self.block->add(mir_get_path::new(
            n->base.location,
            n->name.__ptr__(),
            n->base.resolved_type
        ) => mir*);
    }

    func visit_call(self, n: ast_call*) {
        var new_block = mir_block::new(n->base.location);
        var temp = self.block;
        self.block = new_block;
        if (n->head->generic_types != nil) {
            var ht = n->head->base.resolved_type.full_path_name(self.pkg);
            defer ht.delete();

            var m = mir_call_id::new(
                n->head->base.location,
                ht.__ptr__(),
                n->head->base.resolved_type
            );
            self.block->add(m => mir*);
        } else {
            var m = mir_call_id::new(
                n->head->base.location,
                n->head->id->content.__ptr__(),
                n->head->base.resolved_type
            );
            self.block->add(m => mir*);
        }
        foreach (var i; n->chain) {
            self.visit(i.get());
        }
        self.block = temp;

        self.block->add(mir_call::new(
            n->base.location,
            new_block,
            n->base.resolved_type
        ) => mir*);
    }
}

impl ast2mir {
    func visit_definition(self, n: ast_definition*) {
        var new_block = mir_block::new(n->base.location);
        var temp = self.block;
        self.block = new_block;
        self.visit(n->value);
        self.block = temp;

        self.block->add(mir_define::new(
            n->base.location,
            n->name.__ptr__(),
            new_block,
            n->base.resolved_type
        ) => mir*);
    }

    func visit_assignment(self, n: ast_assignment*) {
        var temp = self.block;

        var lhs = mir_block::new(n->left->base.location);
        self.block = lhs;
        self.visit_call(n->left);
        self.block = temp;

        var rhs = mir_block::new(n->right->location);
        self.block = rhs;
        self.visit(n->right);
        self.block = temp;

        var ty = mir_assign_opr::eq;
        match (n->kind) {
            assignment_kind::eq => ty = mir_assign_opr::eq;
            assignment_kind::addeq => ty = mir_assign_opr::addeq;
            assignment_kind::subeq => ty = mir_assign_opr::subeq;
            assignment_kind::muleq => ty = mir_assign_opr::muleq;
            assignment_kind::diveq => ty = mir_assign_opr::diveq;
            assignment_kind::remeq => ty =mir_assign_opr::remeq;
            assignment_kind::andeq => ty = mir_assign_opr::andeq;
            assignment_kind::oreq => ty = mir_assign_opr::oreq;
            assignment_kind::xoreq => ty = mir_assign_opr::xoreq;
        }

        self.block->add(mir_assign::new(n->base.location, ty, lhs, rhs) => mir*);
    }

    func generate_if_stmt(self, n: ast_if_stmt*) -> mir_if* {
        // else branch
        if (n->condition == nil) {
            var new_block = mir_block::new(n->body->base.location);
            var temp = self.block;
            self.block = new_block;
            self.generate_code_block(n->body);
            self.block = temp;

            return mir_if::new(n->base.location, nil, new_block);
        }

        var cond_block = mir_block::new(n->condition->location);
        var temp = self.block;
        self.block = cond_block;
        self.visit(n->condition);
        self.block = temp;

        var body_block = mir_block::new(n->body->base.location);
        self.block = body_block;
        self.generate_code_block(n->body);
        self.block = temp;

        return mir_if::new(
            n->base.location,
            cond_block,
            body_block
        );
    }

    func visit_cond_stmt(self, n: ast_cond_stmt*) {
       var m = mir_branch::new(n->base.location);
       foreach (var i; n->stmts) {
           var c = i.get() => ast_if_stmt*;
           m->branch.push(self.generate_if_stmt(c));
       }
       self.block->add(m => mir*);
    }

    func generate_match_case(self, n: ast_match_case*) -> mir_switch_case* {
        var temp = self.block;
        
        var ty = n->pattern->base.resolved_type.__ptr__();
        var dm = self.ctx->get_domain(ty->loc_file);
        var index: i64 = 0;
        if (dm.enums.has(ty->name)) {
            var em = dm.enums.get(ty->name);
            var path_node = n->pattern->chain.get(0);
            var p = path_node => ast_call_path*;
            index = em.members.get(p->name);
        } else if (dm.tagged_unions.has(ty->name)) {
            var un = dm.tagged_unions.get(ty->name);
            if (un.ref_enum_type.is_empty()) {
                index = un.member_int_map.get(n->pattern->head->id->content);
            } else {
                var path_node = n->pattern->chain.get(0);
                var p = path_node => ast_call_path*;
                index = un.member_int_map.get(p->name);
            }
        }

        var body_block = mir_block::new(n->body->base.location);
        self.block = body_block;
        self.generate_code_block(n->body);
        self.block = temp;
        
        return mir_switch_case::new(n->base.location, index, body_block);
    }

    func visit_match_stmt(self, n: ast_match_stmt*) {
        var cond_block = mir_block::new(n->value->location);
        var temp = self.block;
        self.block = cond_block;
        self.visit(n->value);
        self.block = temp;

        var switch_block = mir_switch::new(n->base.location, cond_block);
        self.block->add(switch_block => mir*);

        var default_case: ast_match_case* = nil;
        foreach (var i; n->cases) {
            var t = i.get() => ast_match_case*;
            if (t->pattern->base.resolved_type.is_default_match()) {
                default_case = t;
                continue;
            }
            switch_block->cases.push(self.generate_match_case(t));
        }

        if (default_case != nil) {
            var default_block = mir_block::new(default_case->base.location);
            self.block = default_block;
            self.generate_code_block(default_case->body);
            self.block = temp;
            switch_block->default_case = default_block;
        }
    }

    func visit_while_stmt(self, n: ast_while_stmt*) {
        var cond_block = mir_block::new(n->condition->location);
        var temp = self.block;
        self.block = cond_block;
        self.visit(n->condition);
        self.block = temp;

        var body_block = mir_block::new(n->body->base.location);
        self.block = body_block;
        self.generate_code_block(n->body);
        self.block = temp;

        self.block->add(mir_loop::new(
            n->base.location,
            cond_block,
            body_block,
            nil // no update stage in while loop
        ) => mir*);
    }

    func visit_for_stmt(self, n: ast_for_stmt*) {
        var temp = self.block;

        // for top level block will keep defined variable in live range
        // util for loop exit
        var for_top_level = mir_block::new(n->base.location);
        self.block->add(for_top_level => mir*);

        if (n->init != nil) {
            self.block = for_top_level;
            self.visit(n->init => ast*);
            self.block = temp;
        }

        var cond_block: mir_block* = nil;
        if (n->condition != nil) {
            cond_block = mir_block::new(n->condition->location);
            self.block = cond_block;
            self.visit(n->condition);
            self.block = temp;
        } else {
            cond_block = mir_block::new(n->base.location);

            // generate 1 == 1
            var bt = type::bool_type();
            var it = type::i64_type();
            var one = str::from("1");
            defer {
                bt.delete();
                it.delete();
                one.delete();
            }

            var cond = mir_binary::new(
                n->base.location,
                mir_binary_opr::cmpeq,
                bt,
                mir_block::new(n->base.location),
                mir_block::new(n->base.location)
            );

            cond->left->add(mir_number::new(
                n->base.location,
                one.__ptr__(),
                it
            ) => mir*);
            cond->right->add(mir_number::new(
                n->base.location,
                one.__ptr__(),
                it
            ) => mir*);
            cond_block->add(cond => mir*);
        }

        var update_block: mir_block* = nil;
        if (n->update != nil) {
            update_block = mir_block::new(n->update->location);
            self.block = update_block;
            self.visit(n->update);
            self.block = temp;
        }

        var body_block = mir_block::new(n->body->base.location);
        self.block = body_block;
        self.generate_code_block(n->body);
        self.block = temp;

        for_top_level->add(mir_loop::new(
            n->base.location,
            cond_block,
            body_block,
            update_block
        ) => mir*);
    }

    func visit_forindex(self, n: ast_forindex*) {
        var temp = self.block;

        // for top level block will keep defined variable in live range
        // util for loop exit
        var for_top_level = mir_block::new(n->base.location);
        self.block->add(for_top_level => mir*);

        self.block = for_top_level;
        self.visit(n->lowered_init => ast*);
        self.block = temp;

        var cond_block = mir_block::new(n->lowered_condition->location);
        self.block = cond_block;
        self.visit(n->lowered_condition);
        self.block = temp;

        var update_block = mir_block::new(n->lowered_update->location);
        self.block = update_block;
        self.visit(n->lowered_update);
        self.block = temp;

        var body_block = mir_block::new(n->body->base.location);
        self.block = body_block;
        self.generate_code_block(n->body);
        self.block = temp;

        for_top_level->add(mir_loop::new(
            n->base.location,
            cond_block,
            body_block,
            update_block
        ) => mir*);
    }

    func visit_foreach(self, n: ast_foreach*) {
        var temp = self.block;

        // for top level block will keep defined variable in live range
        // util for loop exit
        var for_top_level = mir_block::new(n->base.location);
        self.block->add(for_top_level => mir*);

        self.block = for_top_level;
        self.visit(n->lowered_init => ast*);
        self.block = temp;

        var cond_block = mir_block::new(n->lowered_condition->location);
        self.block = cond_block;
        self.visit(n->lowered_condition);
        self.block = temp;

        var update_block = mir_block::new(n->lowered_update->location);
        self.block = update_block;
        self.visit(n->lowered_update);
        self.block = temp;

        var body_block = mir_block::new(n->body->base.location);
        self.block = body_block;
        self.generate_code_block(n->body);
        self.block = temp;

        for_top_level->add(mir_loop::new(
            n->base.location,
            cond_block,
            body_block,
            update_block
        ) => mir*);
    }

    func visit_in_stmt_expr(self, n: ast_in_stmt_expr*) {
        self.visit(n->value);
    }

    func visit_ret_stmt(self, n: ast_ret_stmt*) {
        var new_block = mir_block::new(n->base.location);
        var temp = self.block;
        self.block = new_block;
        if (n->value != nil) {
            self.visit(n->value);
        }
        self.block = temp;

        // expect only one mir node or nothing inside the block
        assert(new_block->content.size <= 1, "ret stmt can only have one value or less");

        self.block->add(mir_return::new(
            n->base.location,
            new_block,
            n->return_ref_type
        ) => mir*);
    }

    func visit_continue_stmt(self, n: ast_continue_stmt*) {
        self.block->add(mir_continue::new(n->base.location) => mir*);
    }

    func visit_break_stmt(self, n: ast_break_stmt*) {
        self.block->add(mir_break::new(n->base.location) => mir*);
    }
}

impl ast2mir {
    func generate_full_name(self, n: str&, loc: span&) -> str {
        var ty = type::instance(n.c_str, loc.file.c_str);
        defer ty.delete();

        var name = ty.full_path_name(self.pkg);
        return name;
    }

    func visit_struct_decl(self, n: ast_struct_decl*) {
        if (n->generic_types != nil) {
            return;
        }

        var st = mir_struct::instance(n->name, n->base.location);
        defer st.delete();

        foreach (var i; n->fields) {
            var t = self.tr.resolve(i.get()->type);
            defer t.delete();

            st.field_name.push(i.get()->name->content);
            st.field_type.push(t);
        }
        self.mctx->structs.push(st);
    }

    func visit_tagged_union_decl(self, n: ast_tagged_union_decl*) {
        var un = mir_tagged_union::instance(n->name, n->base.location);
        defer un.delete();

        foreach (var i; n->members) {
            var t = self.tr.resolve(i.get()->type);
            defer t.delete();

            un.member_type.push(t);            
        }
        self.mctx->tagged_unions.push(un);
    }

    func visit_impl(self, n: ast_impl*) {
        if (n->generic_types != nil) {
            return;
        }
        self.impl_struct_name.clear();
        self.impl_struct_name.append_str(n->name);
        foreach (var i; n->methods) {
            var m = i.get() => ast_func_decl*;
            self.visit_func_decl(m);
        }
        self.impl_struct_name.clear();
    }
    
    func visit_func_decl(self, n: ast_func_decl*) {
        if (n->generic_types != nil) {
            return;
        }

        var name = n->name.clone();
        defer name.delete();
        if (!self.impl_struct_name.empty()) {
            var tmp_ty_name = self.generate_full_name(
                self.impl_struct_name,
                n->base.location
            );
            defer tmp_ty_name.delete();

            name.clear();
            name.append_str(tmp_ty_name).append(".").append_str(n->name);
        }

        // global function with is not extern
        if (self.impl_struct_name.empty() && !n->is_extern) {
            var tmp_ty_name = self.generate_full_name(
                n->name,
                n->base.location
            );
            defer tmp_ty_name.delete();

            name.clear();
            name.append_str(tmp_ty_name);            
        }

        
        var ret_ty = type::instance("", "");
        defer ret_ty.delete();

        if (n->return_type != nil) {
            var t = self.tr.resolve(n->return_type);
            defer t.delete();

            ret_ty.reset_with(t);
        } else {
            var t = type::void_type();
            defer t.delete();

            ret_ty.reset_with(t);
        }

        var f = mir_func::instance(name.c_str, n->base.location, ret_ty);
        defer f.delete();

        foreach (var i; n->params->params) {
            var p = i.get() => ast_param*;

            var t = self.tr.resolve(p->type);
            defer t.delete();

            var p_pair = pair<str, type>::instance(p->name->content, t);
            defer p_pair.delete();

            f.params.push(p_pair);
        }

        if (n->body == nil) {
            self.mctx->decls.push(f);
            return;
        }

        self.block = mir_block::new(n->body->base.location);
        f.block = self.block;
        self.generate_code_block(n->body);
        self.block = nil;

        self.mctx->impls.push(f);
    }

    func generate_code_block(self, n: ast_code_block*) {
        foreach (var i; n->stmts) {
            var stmt = i.get();
            self.visit(stmt);
            if (stmt->is(ast_kind::ast_ret_stmt) ||
                stmt->is(ast_kind::ast_break_stmt) ||
                stmt->is(ast_kind::ast_continue_stmt)) {
                break;
            }
        }
    }
}

impl ast2mir {
    pub func generate(self, r: root*) {
        foreach (var i; r->decls) {
            var n = i.get();
            match (n->kind) {
                ast_kind::ast_enum_decl => {} // do nothing
                ast_kind::ast_struct_decl => {
                    self.visit_struct_decl(n => ast_struct_decl*);
                }
                ast_kind::ast_tagged_union_decl => {
                    self.visit_tagged_union_decl(n => ast_tagged_union_decl*);
                }
                ast_kind::ast_impl => {
                    self.visit_impl(n => ast_impl*);
                }
                ast_kind::ast_func_decl => {
                    self.visit_func_decl(n => ast_func_decl*);
                }
                _ => { unreachable(); }
            }
        }
    }
}