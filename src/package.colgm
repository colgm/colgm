use std::str::{ str };
use std::io::{ io };
use std::map::{ hashmap };

use err::report::{ report };
use err::panic::{ panic };

pub enum package_status {
    not_used,
    not_exist,
    analysed,
    analysing
}

pub struct package_info {
    path: str,
    status: package_status
}

impl package_info {
    pub func delete(self) {
        self->path.delete();
    }

    pub func copy(self) -> package_info* {
        var res = package_info::__alloc__();
        res->path = self->path.copy_instance();
        res->status = self->status;
        return res;
    }
}

pub struct package {
    err: report*,
    library_path: str,
    file_mapper: hashmap<str, package_info>
}

impl package {
    pub func new(e: report*) -> package* {
        var res = package::__alloc__();
        if (res == nil) {
            panic("package::new: failed to allocate memory");
        }
        res->err = e;
        res->library_path = str::instance();
        res->file_mapper = hashmap<str, package_info>::instance();
        return res;
    }

    pub func delete(self) {
        self->library_path.delete();
        self->file_mapper.delete();
    }

    pub func insert(self, name: str*, path: str*) {
        if (self->file_mapper.has(name)) {
            return;
        }

        var info = package_info {
            path: path->copy_instance(),
            status: package_status::not_used
        };
        self->file_mapper.insert(name, info.__ptr__());
        info.delete();
    }

    pub func get_status(self, name: str*) -> package_status {
        if (!self->file_mapper.has(name)) {
            return package_status::not_exist;
        }
        return self->file_mapper.get(name)->status;
    }

    pub func get_package_info(self, name: str*) -> package_info* {
        if (!self->file_mapper.has(name)) {
            panic("package info not found");
        }
        return self->file_mapper.get(name);
    }
}