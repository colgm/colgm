use std::libc::{ free };
use lex::lexer::{ lexer };
use parse::parser::{ parser };
use package::{ package };
use sema::sema::{ sema };
use err::report::{ report };

pub struct compiler {
    rep: report*,
    pkg: package*,
    lex: lexer*,
    par: parser*,
    sema: sema*
}

impl compiler {
    pub func instance() -> compiler {
        var rep = report::new();
        var pkg = package::new(rep);
        var lex = lexer::new(rep);
        var par = parser::new(rep, lex);
        var semantic = sema::new(rep, pkg);
        return compiler {
            rep: rep,
            pkg: pkg,
            lex: lex,
            par: par,
            sema: semantic
        };
    }

    pub func delete(self) {
        if (self->rep => i8* != nil) {
            self->rep->delete();
            free(self->rep => i8*);
        }
        if (self->pkg => i8* != nil) {
            self->pkg->delete();
            free(self->pkg => i8*);
        }
        if (self->lex => i8* != nil) {
            self->lex->delete();
            free(self->lex => i8*);
        }
        if (self->par => i8* != nil) {
            self->par->delete();
            free(self->par => i8*);
        }
        if (self->sema => i8* != nil) {
            self->sema->delete();
            free(self->sema => i8*);
        }
    }
}