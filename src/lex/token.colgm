use std::str::{ str };
use std::libc::{ free };

use err::span::{ span };
use err::panic::{ panic };

pub enum tok_kind {
    tok_null,       // reserved
    tok_num,        // number literal
    tok_str,        // string literal
    tok_ch,         // character literal
    tok_id,         // identifier
    tok_true,       // keyword true
    tok_false,      // keyword false
    tok_use,        // keyword use
    tok_enum,       // keyword enum
    tok_for,        // keyword for
    tok_forindex,   // keyword forindex
    tok_foreach,    // keyword foreach
    tok_while,      // keyword while
    tok_var,        // keyword var
    tok_struct,     // keyword struct
    tok_pub,        // keyword pub
    tok_extern,     // keyword extern
    tok_const,      // keyword const
    tok_impl,       // keyword impl
    tok_func,       // keyword func
    tok_match,      // keyword match
    tok_break,      // keyword break
    tok_continue,   // keyword continue
    tok_return,     // keyword return
    tok_if,         // keyword if
    tok_elsif,      // keyword elsif
    tok_else,       // keyword else
    tok_nil,        // keyword nil
    tok_lparen,     // (
    tok_rparen,     // )
    tok_lbracket,   // [
    tok_rbracket,   // ]
    tok_lbrace,     // {
    tok_rbrace,     // }
    tok_semi,       // ;
    tok_op_and,     // conditional binary operator and/&&
    tok_op_or,      // conditional binary operator or/||
    tok_comma,      // ,
    tok_dot,        // .
    tok_ellipsis,   // ...
    tok_quesmark,   // ?
    tok_colon,      // :
    tok_coloncolon, // ::
    tok_add,        // +
    tok_sub,        // -
    tok_mul,        // *
    tok_div,        // /
    tok_rem,        // %
    tok_floater,    // bitwise operator not '~'
    tok_bit_and,    // bitwise operator &
    tok_bit_or,     // bitwise operator |
    tok_bit_xor,    // bitwise operator ^
    tok_op_not,     // conditional binary operator !
    tok_eq,         // =
    tok_addeq,      // +=
    tok_subeq,      // -=
    tok_muleq,      // *=
    tok_diveq,      // /=
    tok_remeq,      // %=
    tok_floatereq,  // bitwise operator ~=
    tok_bit_and_eq, // bitwise operator &=
    tok_bit_or_eq,  // bitwise operator |=
    tok_bit_xor_eq, // bitwise operator ^=
    tok_cmp_eq,     // ==
    tok_neq,        // !=
    tok_less,       // <
    tok_leq,        // <=
    tok_grt,        // >
    tok_geq,        // >=
    tok_arrow,      // ->
    tok_wide_arrow, // =>
    tok_sharp,      // #
    tok_eof         // <eof> token
}

pub struct token {
    kind: tok_kind,
    content: str*,
    location: span*
}

impl token {
    pub func copy(self) -> token* {
        var res = token::__alloc__();
        if (res == nil) {
            panic("token::copy: failed to allocate memory");
        }
        res->kind = self->kind;
        res->content = self->content->copy();
        res->location = self->location->copy();
        return res;
    }

    pub func delete(self) {
        self->content->delete();
        free(self->content => i8*);
        self->location->delete();
        free(self->location => i8*);
    }
}