use std::str::{ str };

use err::span::{ span };
use err::panic::{ panic };

pub enum tok_kind {
    tok_null,       // reserved
    tok_num,        // number literal
    tok_str,        // string literal
    tok_ch,         // character literal
    tok_id,         // identifier
    tok_true,       // keyword true
    tok_false,      // keyword false
    tok_use,        // keyword use
    tok_enum,       // keyword enum
    tok_union,      // keyword union
    tok_for,        // keyword for
    tok_forindex,   // keyword forindex
    tok_foreach,    // keyword foreach
    tok_while,      // keyword while
    tok_var,        // keyword var
    tok_struct,     // keyword struct
    tok_pub,        // keyword pub
    tok_extern,     // keyword extern
    tok_const,      // keyword const
    tok_impl,       // keyword impl
    tok_func,       // keyword func
    tok_match,      // keyword match
    tok_break,      // keyword break
    tok_continue,   // keyword continue
    tok_return,     // keyword return
    tok_if,         // keyword if
    tok_elsif,      // keyword elsif
    tok_else,       // keyword else
    tok_nil,        // keyword nil
    tok_lparen,     // (
    tok_rparen,     // )
    tok_lbracket,   // [
    tok_rbracket,   // ]
    tok_lbrace,     // {
    tok_rbrace,     // }
    tok_semi,       // ;
    tok_op_and,     // conditional binary operator and/&&
    tok_op_or,      // conditional binary operator or/||
    tok_comma,      // ,
    tok_dot,        // .
    tok_ellipsis,   // ...
    tok_quesmark,   // ?
    tok_colon,      // :
    tok_coloncolon, // ::
    tok_add,        // +
    tok_sub,        // -
    tok_mul,        // *
    tok_div,        // /
    tok_rem,        // %
    tok_floater,    // bitwise operator not '~'
    tok_bit_and,    // bitwise operator &
    tok_bit_or,     // bitwise operator |
    tok_bit_xor,    // bitwise operator ^
    tok_op_not,     // conditional binary operator !
    tok_eq,         // =
    tok_addeq,      // +=
    tok_subeq,      // -=
    tok_muleq,      // *=
    tok_diveq,      // /=
    tok_remeq,      // %=
    tok_floatereq,  // bitwise operator ~=
    tok_bit_and_eq, // bitwise operator &=
    tok_bit_or_eq,  // bitwise operator |=
    tok_bit_xor_eq, // bitwise operator ^=
    tok_cmp_eq,     // ==
    tok_neq,        // !=
    tok_less,       // <
    tok_leq,        // <=
    tok_grt,        // >
    tok_geq,        // >=
    tok_arrow,      // ->
    tok_wide_arrow, // =>
    tok_sharp,      // #
    tok_eof         // <eof> token
}

pub struct token {
    kind: tok_kind,
    content: str,
    location: span
}

impl token {
    pub func instance(k: tok_kind, c: str*, loc: span*) -> token {
        return token {
            kind: k,
            content: c->copy_instance(),
            location: loc->copy_instance()
        };
    }

    pub func copy_instance(self) -> token {
        return token {
            kind: self->kind,
            content: self->content.copy_instance(),
            location: self->location.copy_instance()
        };
    }

    pub func delete(self) {
        self->content.delete();
        self->location.delete();
    }

    pub func is_keyword(self) -> bool {
        match (self->kind) {
            tok_kind::tok_true =>     return true;
            tok_kind::tok_false =>    return true;
            tok_kind::tok_use =>      return true;
            tok_kind::tok_enum =>     return true;
            tok_kind::tok_union =>    return true;
            tok_kind::tok_for =>      return true;
            tok_kind::tok_forindex => return true;
            tok_kind::tok_foreach =>  return true;
            tok_kind::tok_while =>    return true;
            tok_kind::tok_var =>      return true;
            tok_kind::tok_struct =>   return true;
            tok_kind::tok_pub =>      return true;
            tok_kind::tok_extern =>   return true;
            tok_kind::tok_const =>    return true;
            tok_kind::tok_impl =>     return true;
            tok_kind::tok_func =>     return true;
            tok_kind::tok_match =>    return true;
            tok_kind::tok_break =>    return true;
            tok_kind::tok_continue => return true;
            tok_kind::tok_return =>   return true;
            tok_kind::tok_if =>       return true;
            tok_kind::tok_elsif =>    return true;
            tok_kind::tok_else =>     return true;
            tok_kind::tok_nil =>      return true;
            tok_kind::tok_op_and =>   return self->content.eq_const("and");
            tok_kind::tok_op_or =>    return self->content.eq_const("or");
            _ => return false;
        }
        return false;
    }

    pub func tok_kind_to_str(self) -> const i8* {
        match (self->kind) {
            tok_kind::tok_null =>       return "[null      ]";
            tok_kind::tok_num =>        return "[num       ]";
            tok_kind::tok_str =>        return "[str       ]";
            tok_kind::tok_ch =>         return "[ch        ]";
            tok_kind::tok_id =>         return "[id        ]";
            tok_kind::tok_true =>       return "[true      ]";
            tok_kind::tok_false =>      return "[false     ]";
            tok_kind::tok_use =>        return "[use       ]";
            tok_kind::tok_enum =>       return "[enum      ]";
            tok_kind::tok_union =>      return "[union     ]";
            tok_kind::tok_for =>        return "[for       ]";
            tok_kind::tok_forindex =>   return "[forindex  ]";
            tok_kind::tok_foreach =>    return "[foreach   ]";
            tok_kind::tok_while =>      return "[while     ]";
            tok_kind::tok_var =>        return "[var       ]";
            tok_kind::tok_struct =>     return "[struct    ]";
            tok_kind::tok_pub =>        return "[pub       ]";
            tok_kind::tok_extern =>     return "[extern    ]";
            tok_kind::tok_const =>      return "[const     ]";
            tok_kind::tok_impl =>       return "[impl      ]";
            tok_kind::tok_func =>       return "[func      ]";
            tok_kind::tok_match =>      return "[match     ]";
            tok_kind::tok_break =>      return "[break     ]";
            tok_kind::tok_continue =>   return "[continue  ]";
            tok_kind::tok_return =>     return "[return    ]";
            tok_kind::tok_if =>         return "[if        ]";
            tok_kind::tok_elsif =>      return "[elsif     ]";
            tok_kind::tok_else =>       return "[else      ]";
            tok_kind::tok_nil =>        return "[nil       ]";
            tok_kind::tok_lparen =>     return "[lparen    ]";
            tok_kind::tok_rparen =>     return "[rparen    ]";
            tok_kind::tok_lbracket =>   return "[lbracket  ]";
            tok_kind::tok_rbracket =>   return "[rbracket  ]";
            tok_kind::tok_lbrace =>     return "[lbrace    ]";
            tok_kind::tok_rbrace =>     return "[rbrace    ]";
            tok_kind::tok_semi =>       return "[semi      ]";
            tok_kind::tok_op_and =>     return "[op_and    ]";
            tok_kind::tok_op_or =>      return "[op_or     ]";
            tok_kind::tok_comma =>      return "[comma     ]";
            tok_kind::tok_dot =>        return "[dot       ]";
            tok_kind::tok_ellipsis =>   return "[ellipsis  ]";
            tok_kind::tok_quesmark =>   return "[quesmark  ]";
            tok_kind::tok_colon =>      return "[colon     ]";
            tok_kind::tok_coloncolon => return "[coloncolon]";
            tok_kind::tok_add =>        return "[add       ]";
            tok_kind::tok_sub =>        return "[sub       ]";
            tok_kind::tok_mul =>        return "[mul       ]";
            tok_kind::tok_div =>        return "[div       ]";
            tok_kind::tok_rem =>        return "[rem       ]";
            tok_kind::tok_floater =>    return "[floater   ]";
            tok_kind::tok_bit_and =>    return "[bit_and   ]";
            tok_kind::tok_bit_or =>     return "[bit_or    ]";
            tok_kind::tok_bit_xor =>    return "[bit_xor   ]";
            tok_kind::tok_op_not =>     return "[op_not    ]";
            tok_kind::tok_eq =>         return "[eq        ]";
            tok_kind::tok_addeq =>      return "[addeq     ]";
            tok_kind::tok_subeq =>      return "[subeq     ]";
            tok_kind::tok_muleq =>      return "[muleq     ]";
            tok_kind::tok_diveq =>      return "[diveq     ]";
            tok_kind::tok_remeq =>      return "[remeq     ]";
            tok_kind::tok_floatereq =>  return "[floatereq ]";
            tok_kind::tok_bit_and_eq => return "[bit_and_eq]";
            tok_kind::tok_bit_or_eq =>  return "[bit_or_eq ]";
            tok_kind::tok_bit_xor_eq => return "[bit_xor_eq]";
            tok_kind::tok_cmp_eq =>     return "[cmp_eq    ]";
            tok_kind::tok_neq =>        return "[neq       ]";
            tok_kind::tok_less =>       return "[less      ]";
            tok_kind::tok_leq =>        return "[leq       ]";
            tok_kind::tok_grt =>        return "[grt       ]";
            tok_kind::tok_geq =>        return "[geq       ]";
            tok_kind::tok_arrow =>      return "[arrow     ]";
            tok_kind::tok_wide_arrow => return "[wide_arrow]";
            tok_kind::tok_sharp =>      return "[sharp     ]";
            tok_kind::tok_eof =>        return "[eof       ]";
        }
        return "[unknown   ]";
    }
}