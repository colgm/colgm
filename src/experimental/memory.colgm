use std::libc::{ malloc, free };
use err::panic::{ panic };

struct f_ptr<T> {
    in_use: bool,
    ptr: T*
}

impl f_ptr<T> {
    pub func alloc(size: u64) -> f_ptr<T>* {
        var f = f_ptr<T>::__alloc__();
        f->in_use = true;
        f->ptr = malloc(size * T::__size__()) => T*;
        return f;
    }

    pub func delete(self) {
        if (!self->in_use) {
            panic("double free");
        } else {
            self->in_use = false;
            free(self->ptr => i8*);
        }
    }
}

pub struct safe_ptr<T> {
    ptr: f_ptr<T>*,
    size: u64
}

impl safe_ptr<T> {
    pub func alloc(size: u64) -> safe_ptr<T> {
        return safe_ptr<T> {
            ptr: f_ptr<T>::alloc(size),
            size: size
        };
    }

    pub func delete(self) {
        if (!self->ptr->in_use) {
            panic("double free");
        } else {
            self->ptr->in_use = false;
            self->ptr->delete();
            free(self->ptr => i8*);
        }
    }
}

func main() -> i32 {
    var ptr = safe_ptr<i32>::alloc(4);
    ptr.delete();
    ptr.delete();
    return 0;
}