func malloc(s: i64) -> i8*;
func free(s: i8*) -> void;
func puts(s: i8*) -> i32;


func to_str(num: i64) -> i8* {
    var zero: i8 = i64::to_i8(48);

    var result: i8* = malloc(128);
    var i: i64 = 0;
    while(num > 0) {
        result[i] = zero + i64::to_i8(num % 10);
        num /= 10;
        i += 1;
    }
    result[i] = i64::to_i8(0);

    var s_begin: i64 = 0;
    var s_end: i64 = i;
    var s_mid: i64 = (s_begin + s_end) / 2;
    i = 0;
    while(i < s_mid) {
        var tmp: i8 = result[i];
        result[i] = result[s_end - i - 1];
        result[s_end - i - 1] = tmp;
        i += 1;
    }
    return result;
}

func main() -> i64 {
    var result: i8* = to_str(114514);
    puts(result);
    free(result);
    var index: i64 = 0;
    while(index <= 2147483647) {
        if (index % 50000000 == 0 and index > 0) {
            result = to_str(index);
            puts(result);
            free(result);
        } elsif (index == 2147483647 and index > 0) {
            result = to_str(index);
            puts(result);
            free(result);
        }
        index += 1;
    }
    puts("  -> from to_str.colgm");
    return 0;
}
