use std::io::{ io };
use std::panic::{ panic };

struct structure_for_test {
    freed: bool
}

impl structure_for_test {
    pub func new() -> structure_for_test {
        return structure_for_test {
            freed: false
        };
    }

    pub func delete(self) {
        if (self->freed) {
            panic("double free");
        }
        self->freed = true;
    }
}

// output:
// test 0: delete a
func test_0() {
    var a = structure_for_test::new();
    defer {
        io::stdout().out("test 0: delete a\n");
        a.delete();
    }

    if (1 == 1) {}
    if (1 != 1) {} else {}

    for (var i = 0; i < 10; i += 1) {
        if (i == 5) {
            return;
        }
    }
}

// output:
// test 1: delete a
func test_1() {
    var a = structure_for_test::new();
    defer {
        io::stdout().out("test 1: delete a\n");
        a.delete();
    }

    if (1 == 1) {}
    if (1 != 1) {} else {}
}

// output:
// test 2: delete a
func test_2() {
    var a = structure_for_test::new();
    defer io::stdout().out("test 2: delete a\n");
    defer a.delete();

    if (1 == 1) {}
    if (1 != 1) {} else {}
}

// output:
// test 3: delete _c (0)
// test 3: delete _b (0)
// test 3: delete _a (0)
// test 3: delete _c (1)
// test 3: delete _b (1)
// test 3: delete _a (1)
// test 3: delete _c (2)
// test 3: delete _b (2)
// test 3: delete _a (2)
// test 3: delete c (0)
// test 3: delete b (0)
// test 3: delete a (0)
// test 3: delete _c (0)
// test 3: delete _b (0)
// test 3: delete _a (0)
// test 3: delete _c (1)
// test 3: delete _b (1)
// test 3: delete _a (1)
// test 3: delete _c (2)
// test 3: delete _b (2)
// test 3: delete _a (2)
// test 3: delete c (1)
// test 3: delete b (1)
// test 3: delete a (1)
// test 3: delete _c (0)
// test 3: delete _b (0)
// test 3: delete _a (0)
// test 3: delete _c (1)
// test 3: delete _b (1)
// test 3: delete _a (1)
// test 3: delete _c (2)
// test 3: delete _b (2)
// test 3: delete _a (2)
// test 3: delete c (2)
// test 3: delete b (2)
// test 3: delete a (2)
func test_3() {
    for (var i = 0; i < 3; i += 1) {
        var a = structure_for_test::new();
        defer io::stdout().out("test 3: delete a (").out_i64(i).out(")\n");
        defer a.delete();
        ;; // test ast_null

        if (1 == 1) {
            var b = structure_for_test::new();
            defer io::stdout().out("test 3: delete b (").out_i64(i).out(")\n");
            defer b.delete();
            if (1 != 1) {} else {
                for (var j  = 0; j < 3; j += 1) {
                    var _a = structure_for_test::new();
                    defer io::stdout().out("test 3: delete _a (").out_i64(j).out(")\n");
                    defer _a.delete();

                    if (1 == 1) {
                        var _b = structure_for_test::new();
                        defer io::stdout().out("test 3: delete _b (").out_i64(j).out(")\n");
                        defer _b.delete();
                        if (1 == 1) {
                            var _c = structure_for_test::new();
                            defer io::stdout().out("test 3: delete _c (").out_i64(j).out(")\n");
                            defer _c.delete();
                        }
                    }
                }
                var c = structure_for_test::new();
                defer io::stdout().out("test 3: delete c (").out_i64(i).out(")\n");
                defer c.delete();
            }
        }
        if (1 != 1) {} else {}
    }
}

// output:
// test 4: output when v == 1
// test 4: output when return
// test 4: output when v == 2
// test 4: output when return
// test 4: output when top scope exits
// test 4: output when return
func test_4(v: i64) {
    defer io::stdout().out("test 4: output when return\n");

    if (v == 1) {
        io::stdout().out("test 4: output when v == 1\n");
        return;
    } else if (v == 2) {
        io::stdout().out("test 4: output when v == 2\n");
        return;
    }
    io::stdout().out("test 4: output when top scope exits\n");
}

// output:
// test 5: output when loop exits
// test 5: output when loop exits
// test 5: output when loop exits
// test 5: output when loop exits
// test 5: output when i == 5
// test 5: output when loop exits
// test 5: output when loop exits
// test 5: output when i == 7
// test 5: output when loop exits
// test 5: --------------
// test 5: output when top scope exits (0)
// test 5: output when loop exits
// test 5: output when top scope exits (1)
// test 5: output when loop exits
// test 5: output when top scope exits (2)
// test 5: output when loop exits
// test 5: output when top scope exits (3)
// test 5: output when loop exits
// test 5: output when top scope exits (4)
// test 5: output when loop exits
// test 5: output when i == 5
// test 5: output when loop exits
// test 5: output when top scope exits (6)
// test 5: output when loop exits
// test 5: output when i == 7
// test 5: output when loop exits
// test 5: output when loop exits
// test 5: output when top scope exits (8)
// test 5: output when loop exits
// test 5: output when top scope exits (9)
// test 5: output when loop exits
func test_5() {
    for (var i = 0; i < 10; i += 1) {
        defer io::stdout().out("test 5: output when loop exits\n");

        if (i == 5) {
            io::stdout().out("test 5: output when i == 5\n");
            continue;
        } else if (i == 7) {
            io::stdout().out("test 5: output when i == 7\n");
            break;
        }
    }

    io::stdout().out("test 5: --------------\n");

    for (var i = 0; i < 10; i += 1) {
        defer io::stdout().out("test 5: output when loop exits\n");

        if (i == 5) {
            io::stdout().out("test 5: output when i == 5\n");
            continue;
        } else if (i == 7) {
            io::stdout().out("test 5: output when i == 7\n");
            continue;
        }

        io::stdout().out("test 5: output when top scope exits (").out_i64(i).out(")\n");
    }
}

// output:
// test 6: delete a
func test_6() {
    if (1 == 1) {
        var a = structure_for_test::new();
        defer io::stdout().out("test 6: delete a\n");
        defer a.delete();
        return;
    }
}

// output:
// main: ( loop     ) 0 delete a
// main: ( loop     ) 1 delete a
// main: ( loop     ) 2 delete a
// main: ( loop     ) 3 delete a
// main: ( loop     ) 4 delete a
// main: ( loop     ) 5 delete a
// main: ( continue ) 6 delete a
// main: ( continue ) 7 delete a
// main: ( loop     ) 8 delete a
// main: ( break    ) 9 delete a
// main: delete outer
func main() -> i32 {
    test_0();
    test_1();
    test_2();
    test_3();

    test_4(1);
    test_4(2);
    test_4(3);

    test_5();
    test_6();

    var outer = structure_for_test::new();
    defer io::stdout().out("main: delete outer").endln();
    defer outer.delete();

    for (var i = 0; i < 10; i += 1) {
        var a = structure_for_test::new();
        defer io::stdout().out("delete a\n");
        defer a.delete();

        if (i == 9) {
            io::stdout().out("main: ( break    ) ").out_i64(i).out(" ");
            break;
        }
        if (i == 6 || i == 7) {
            io::stdout().out("main: ( continue ) ").out_i64(i).out(" ");
            continue;
        }

        io::stdout().out("main: ( loop     ) ").out_i64(i).out(" ");
    }
    return 0;
}