use std::io::{ io };
use std::libc::{ streq };
use err::panic::{ assert };

func test(v: i32*) {
    v[0] = 31415;
}

func main() -> i32 {
    var a: [i32; 10] = [114514 => i32, 1, '\0' => i32];
    var b = [114514, 1, 1919810];
    var c: [i8; 10] = []; // empty array test

    assert(a[0] == 114514,  "a[0] != 114514");
    assert(a[1] == 1     ,  "a[1] != 1");
    assert(b[0] == 114514,  "b[0] != 114514");
    assert(b[1] == 1     ,  "b[1] != 1");
    assert(b[2] == 1919810, "b[2] != 1919810");

    test(a);
    assert(a[0] == 31415,  "a[0] != 31415");

    var const_str_table_decl: [const i8*; 10] = [
        "hello", "world", "!"
    ];
    assert(streq(const_str_table_decl[0], "hello"), "const_str_table_decl[0] != \"hello\"");
    assert(streq(const_str_table_decl[1], "world"), "const_str_table_decl[1] != \"world\"");
    assert(streq(const_str_table_decl[2], "!"), "const_str_table_decl[2] != \"!\"");

    var const_str_table = [
        "hello", "world", "!"
    ];
    assert(streq(const_str_table[0], "hello"), "const_str_table[0] != \"hello\"");
    assert(streq(const_str_table[1], "world"), "const_str_table[1] != \"world\"");
    assert(streq(const_str_table[2], "!"), "const_str_table[2] != \"!\"");

    io::stdout().out("[array.colgm] test passed").endln();
    return 0;
}