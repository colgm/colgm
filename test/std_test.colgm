use std::libc::{ srand, rand };
use std::time::{ time };
use std::list::{ list, primitive_list };
use std::vec::{ vec, primitive_vec };
use std::map::{ hashmap };
use std::set::{ hashset };
use std::queue::{ queue, primitive_queue };
use std::str::{ str };
use std::string_utils::{
    is_ascii_letter,
    is_ascii_lowercase,
    is_ascii_uppercase,
    is_digit,
    is_hexdigit,
    is_octdigit,
    is_punctuation,
};
use std::range::{ range };
use std::io::{ io };

func test_set() -> bool {
    var set = hashset<str>::instance();
    for (var i = 0; i < 128; i += 1) {
        var n = str::instance();
        n.append_i64(i);
        set.insert(n.__ptr__());
        n.delete();
    }

    var result = true;
    foreach (var i; set) {
        var n = i.elem();
        if (set.has(n)) {
            io::stdout().green().out("[test]").reset().out(" hashset: \"");
            io::stdout().out(n->c_str).out("\" found in bucket ");
            io::stdout().out_u64(i.bucket_index).out(" hash: ");
            io::stdout().out_u64(n->hash()).endln();
        } else {
            io::stdout().red().out("[test]").reset().out(" hashset: ");
            io::stdout().out(n->c_str).out(" not found\n");
            result = false;
        }
    }

    set.delete();
    return result;
}

func test_hashmap() -> bool {
    var map = hashmap<str, str>::instance();
    var stored = vec<str>::instance();

    foreach (var i; range(0, 128)) {
        var num = rand() % 4096;
        var k = str::instance();
        var v = str::instance();
        k.append_i64(num => i64);
        v.append_i8_vec("[test ");
        v.append_i64(num => i64)->append_i8_vec("]");
        map.insert(k.__ptr__(), v.__ptr__());
        stored.push(k.__ptr__());
        k.delete();
        v.delete();
    }

    var result = true;
    for (var i = 0; i < 128; i += 1) {
        var key = stored.get(i => u64);
        if (map.has(key)) {
            io::stdout().green().out("[test]").reset().out(" hashmap: \"");
            io::stdout().out(key->c_str).out("\" found -> \"");
            io::stdout().out(map.get(key)->c_str).out("\" hash: ");
            io::stdout().out_u64(key->hash()).endln();
        } else {
            io::stdout().red().out("[test]").reset().out(" hashmap: \"");
            io::stdout().out(key->c_str).out("\" not found\n");
            result = false;
        }
    }

    foreach (var i; map) {
        io::stdout().green().out("[test]").reset();
        io::stdout().out(" hashmap::iter \"");
        io::stdout().out(i.key()->c_str).out("\" -> \"").out(i.value()->c_str);
        io::stdout().out("\" in bucket ").out_u64(i.bucket_index).out(" hash: ");
        io::stdout().out_u64(i.key()->hash()).endln();
    }

    map.delete();
    stored.delete();
    return result;
}

func list_dump(list: list<str>*) {
    foreach (var i; list) {
        io::stdout().green().out("[test]").reset().out(" list: ");
        io::stdout().out(i.elem()->c_str).endln();
    }
}

func primitive_list_dump(list: primitive_list<i64>*) {
    var temp = list->head;
    while (temp != nil) {
        io::stdout().green().out("[test]").reset().out(" list: ");
        io::stdout().out_i64(temp->elem).endln();
        temp = temp->next;
    }
}

func test_list() {
    var s = str::instance();
    var str_list = list<str>::instance();
    var int_list = primitive_list<i64>::instance();

    for (var i = 0; i < 32; i += 1) {
        var num = rand() % 4096;
        s.clear();
        s.append_i8_vec("test list<str> ");
        s.append_i64(num => i64);
        str_list.insert(s.__ptr__());
        int_list.insert(num => i64);
    }

    list_dump(str_list.__ptr__());
    primitive_list_dump(int_list.__ptr__());

    s.delete();
    str_list.delete();
    int_list.delete();
}

func vec_dump(vec: vec<str>*) {
    foreach (var i; vec) {
        io::stdout().green().out("[test]").reset().out(" vec[");
        io::stdout().out_u64(i.index()).out("]: ");
        io::stdout().out(i.get()->c_str).endln();
    }
}

func primitive_vec_dump(vec: primitive_vec<i64>*) {
    foreach (var i; vec) {
        io::stdout().green().out("[test]").reset().out(" vec[");
        io::stdout().out_u64(i.index()).out("]: ");
        io::stdout().out_i64(i.get()).endln();
    }
}

func test_vector() {
    var s = str::instance();
    var str_vec = vec<str>::instance();
    var int_vec = primitive_vec<i64>::instance();
    for (var i = 0; i < 32; i += 1) {
        var num = rand() % 4096;
        s.clear();
        s.append_i8_vec("test vec<str> ");
        s.append_i64(num => i64);
        str_vec.push(s.__ptr__());
        int_vec.push(num => i64);
    }

    vec_dump(str_vec.__ptr__());
    primitive_vec_dump(int_vec.__ptr__());

    s.delete();
    str_vec.delete();
    int_vec.delete();
}

func test_string_utils() {
    is_digit('f');
    is_digit('0');
    is_hexdigit('0');
    is_hexdigit('a');
    is_octdigit('0');
    
    is_ascii_letter('a');
    is_ascii_letter('A');

    is_ascii_lowercase('b');
    is_ascii_lowercase('B');

    is_ascii_uppercase('c');
    is_ascii_uppercase('C');

    is_punctuation(';');
    is_punctuation('"');
    is_punctuation('0');
    is_punctuation('1');
}

func TEST_ALL() -> bool {
    srand(time(nil).to_u32());

    var result = true;
    if (!test_hashmap()) {
        result = false;
    }
    test_list();
    test_vector();
    if (!test_set()) {
        result = false;
    }
    test_string_utils();
    return result;
}

func main() -> i32 {
    if (!TEST_ALL()) {
        return -1;
    }
    return 0;
}