use data::{ A, B, Test, EmbedTest, PublicStruct, test_i32 };
use libc::{ puts, malloc, free };

struct Vec<T> {
    __size: i64,
    __data: T*
}

impl Vec<T> {
    pub func create() -> Vec<T> {
        puts("[generic.colgm] Vec<T>::create");
        var res = Vec<T> {
            __size: 0,
            __data: nil => T*
        };
        res.__size = 1024;
        res.__data = malloc(T::__size__() * (1024 => u64)) => T*;
        return res;
    }
    pub func delete(self) {
        free(self->__data => i8*);
    }
    func c_data(self) -> T* {
        return self->__data;
    }
}

pub func new<T>(size: i64) -> Vec<T> {
    return Vec<T> {
        __size: size,
        __data: malloc((size => u64) * T::__size__()) => T*
    };
}

struct Base<TA, TB, TC> {
    a: TA,
    b: TB,
    c: TC
}

impl Base<TA, TB, TC> {
    pub func new(a: TA, b: TB, c: TC) -> Base<TA, TB, TC> {
        return Base<TA, TB, TC> {
            a: a,
            b: b,
            c: c
        };
    }

    pub func get(self) -> TA {
        puts("[generic.colgm] Base<TA, TB, TC> get success");
        return self->a;
    }
}

struct TestAddStruct<T> {
    x: T,
    y: T
}

pub func add_test<T>(a: T, b: T) -> T {
    var tmp = TestAddStruct<T> { x: a, y: b };
    return tmp.x + tmp.y;
}

struct BaseFloats {
    head: Base<f32, f32, f32>,
    tail: Base<f64, f64, f64>,
    next: BaseFloats*
}

struct BaseFloatsPtr {
    head_ptr: Base<f32, f32, f32>*,
    tail_ptr: Base<f64, f64, f64>*,
    next_ptr: BaseFloatsPtr*
}

func another_test(a: Base<bool, bool, bool>) {
    return;
}

func main() -> i64 {
    var a = Base<i64, i64, i64> { a: 1, b: 2, c: 3 };
    var b = Base<i32, i64, f32> { a: 4 => i32, b: 5, c: 6.0 => f32 };
    a.get();
    b.get();

    var c = Vec<i32>::create();
    puts("[generic.colgm] Vec<i32>::create success");
    var d = Vec<A>::create();
    puts("[generic.colgm] Vec<A>::create success");
    var e = Vec<B>::create();
    puts("[generic.colgm] Vec<B>::create success");

    a.a = 2;
    c.__data[0] = b.a;
    d.__data[0] = A {a: 1, b: 2 => i32};
    e.__data[0] = B {a: 3 => i32, b: 4};
    var f = new<A>(1024);

    var test = Test<i32> { test: 1 => i32 };
    test.get_test();

    var embed_test = EmbedTest<i32> { test: test };
    embed_test.test.get_test();

    // FIXME
    // var pub_stct = PublicStruct<i32>::instance();

    test_i32();

    add_test<i8>('a', '\0');
    puts("[generic.colgm] add_test<i8> success");

    add_test<i64>(1, 2);
    puts("[generic.colgm] add_test<i64> success");

    add_test<f64>(1.0, 2.0);
    puts("[generic.colgm] add_test<f64> success");

    puts("[generic.colgm] success");
    return 0;
}