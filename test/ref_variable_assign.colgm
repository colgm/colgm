use std::panic::{ assert };
use std::io::{ io };

func test_sub(a: i64&) {
    a -= 1;
}

func test_add(a: i64&) {
    a += 1;
}

func test_mul(a: i64&) {
    a *= 2;
}

func test_div(a: i64&) {
    a /= 2;
}

func test_assign(a: i64&) {
    a = 114;
}

struct s {
    a: i64
}

func main() -> i32 {
    var a = 1;
    test_sub(a);
    assert(a == 0, "a != 0");
    test_add(a);
    assert(a == 1, "a != 1");
    test_mul(a);
    assert(a == 2, "a != 2");
    test_div(a);
    assert(a == 1, "a != 1");
    test_assign(a);
    assert(a == 114, "a != 114");

    var b = s { a: 1 };
    test_sub(b.a);
    assert(b.a == 0, "b.a != 0");
    test_add(b.a);
    assert(b.a == 1, "b.a != 1");
    test_mul(b.a);
    assert(b.a == 2, "b.a != 2");
    test_div(b.a);
    assert(b.a == 1, "b.a != 1");
    test_assign(b.a);
    assert(b.a == 114, "b.a != 114");

    io::stdout().out("[ref_variable_assign] ok\n");
    return 0;
}