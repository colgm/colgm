use std::libc::{ puts, strlen, memcpy, malloc, free, itoa };

struct Test {
    field_a: i64,
    field_b: i64
}

func put_info(test: Test) {
    var info_field_a = "[initializer.colgm] field_a: ";
    var info_field_b = "[initializer.colgm] field_b: ";

    var buff: [i8; 256] = [];
    memcpy(buff, info_field_a, strlen(info_field_a) => u64);
    var buff_num_begin = (buff => u64 + strlen(info_field_a) => u64) => i8*;
    itoa(test.field_a, buff_num_begin, 10);
    puts(buff);

    memcpy(buff, info_field_b, strlen(info_field_b) => u64);
    buff_num_begin = (buff => u64 + strlen(info_field_b) => u64) => i8*;
    itoa(test.field_b, buff_num_begin, 10);
    puts(buff);
}

func main() -> i32 {
    var test = Test {};
    var test_with_value_a = Test { field_a: 1 };
    var test_with_value_all = Test { field_a: 1, field_b: 2 };
    put_info(test);
    put_info(test_with_value_a);
    put_info(test_with_value_all);
    return 0;
}