use libc::{ write, itoa, strlen };

pub struct io {
    fd: i32
}

impl io {
    pub func stdin() -> io {
        return io { fd: 0 };
    }

    pub func stdout() -> io {
        return io { fd: 1 };
    }

    pub func stderr() -> io {
        return io { fd: 2 };
    }

    pub func out(self, info: i8*) -> io {
        // do nothing if is stdin
        if (self->fd == 0) {
            return self[0];
        }
        write(self->fd, info, strlen(info));
        return self[0];
    }

    pub func out_ch(self, info: i8) -> io {
        // do nothing if is stdin
        if (self->fd == 0) {
            return self[0];
        }

        var buff = [i8; 8];
        buff[0] = info;
        write(self->fd, buff, 1);
        return self[0];
    }

    pub func out_i64(self, info: i64) -> io {
        // do nothing if is stdin
        if (self->fd == 0) {
            return self[0];
        }

        var buff = [i8; 256];
        itoa(info, buff, 10);
        write(self->fd, buff, strlen(buff));
        return self[0];
    }

    pub func out_hex(self, info: i64) -> io {
        // do nothing if is stdin
        if (self->fd == 0) {
            return self[0];
        }

        var buff = [i8; 256];
        itoa(info, buff, 16);
        write(self->fd, buff, strlen(buff));
        return self[0];
    }

    pub func endln(self) {
        if (self->fd != 0) {
            write(self->fd, "\n", 1);
        }
    }
}