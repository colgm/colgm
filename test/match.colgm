
use libc::puts;

pub enum TestEnum {
    aaa,
    bbb,
    ccc,
    ddd,
    eee
}

func switch_return(v: TestEnum) -> TestEnum {
    match (v) {
        TestEnum::aaa => { return TestEnum::bbb; }
        TestEnum::bbb => { return TestEnum::ccc; }
        TestEnum::ccc => { return TestEnum::ddd; }
        _ => { return TestEnum::eee;}
    }
    puts("[match.colgm] unreachable code");
    return TestEnum::aaa;
}

func main() -> i32 {
    var value = [TestEnum; 16];
    value[0] = TestEnum::aaa;
    value[1] = TestEnum::bbb;
    value[2] = TestEnum::ccc;
    value[3] = TestEnum::ddd;
    value[4] = TestEnum::eee;
    for (var i = 0; i < 5; i += 1) {
        match (value[i]) {
            TestEnum::aaa => { puts("[match.colgm] TestEnum::aaa"); }
            TestEnum::bbb => { puts("[match.colgm] TestEnum::bbb"); }
            TestEnum::ccc => { puts("[match.colgm] TestEnum::ccc"); }
            _ => { puts("[match.colgm] default case"); }
        }
        switch_return(value[i]);
    }

    match (TestEnum::eee) {
        TestEnum::aaa => { puts("[match.colgm] TestEnum::aaa"); }
        TestEnum::bbb => { puts("[match.colgm] TestEnum::bbb"); }
        TestEnum::ccc => { puts("[match.colgm] TestEnum::ccc"); }
        TestEnum::ddd => { puts("[match.colgm] TestEnum::ddd"); }
        TestEnum::eee => { puts("[match.colgm] TestEnum::eee"); }
    }
    return 0;
}