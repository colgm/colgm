use libc::{ write, puts, strlen };

pub func itoa(num: i64, buf: i8*, base: i64) -> i8* {
    if (base < 2 or base > 16) {
        buf[0] = '\0';
        return buf;
    }
    if (num == 0) {
        buf[0] = '0';
        buf[1] = '\0';
        return buf;
    }
    var i = 0;
    var neg_flag = num < 0;
    if (neg_flag) {
        num = -num;
    }
    while(num > 0) {
        var tmp_bit = (num % base) => i8;
        if (tmp_bit < (10 => i8)) {
            buf[i] = '0' + tmp_bit;
        } else {
            buf[i] = 'a' + tmp_bit - (10 => i8);
        }
        num /= base;
        i += 1;
    }
    buf[i] = '\0';

    var s_begin = 0;
    var s_end = i;
    var s_mid = (s_begin + s_end) / 2;
    i = 0;
    while(i < s_mid) {
        var tmp = buf[i];
        buf[i] = buf[s_end - i - 1];
        buf[s_end - i - 1] = tmp;
        i += 1;
    }
    if (neg_flag and base==10) {
        var j = i;
        while (j>=0) {
            buf[j+1] = buf[j];
            j -= 1;
        }
        buf[0] = '-';
    }
    return buf;
}

pub func hexdump(buf: i8*) {
    var stdout = 1 => i32;
    write(stdout, "[bitwise.colgm] ", 16);
    write(stdout, "0x", 2);
    write(stdout, buf, strlen(buf));
    write(stdout, "\n", 1);
    return;
}

pub func main() -> i64 {
    var i = 0x1;
    var total = 0x0;
    var buf = [i8; 128];
    while(i < 0x80000000) {
        total = total | i;
        itoa(total => i64, buf, 16);
        hexdump(buf);
        i *= 0x2;
    }
    i = 0x1;
    total = 0x0;
    while(i < 0x80000000) {
        total |= i;
        itoa(total => i64, buf, 16);
        hexdump(buf);
        i *= 0x2;
    }

    i = 0x1;
    puts("[bitwise.colgm] bnot test begin...");
    while (i < 0x80000000) {
        var res = i ^ ((-1) => u64);
        if (res!=~i) {
            puts("[bitwise.colgm] bnot test failed!");
        }
        i += (1 => u64);
    }
    puts("[bitwise.colgm] bnot test passed!");
    return 0;
}