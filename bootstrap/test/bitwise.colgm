func write(fd: i32, buf: i8*, count: i64) -> i64;
func strlen(s: i8*) -> i64;
func malloc(s: i64) -> i8*;
func free(s: i8*);

func itoa(num: i64, buf: i8*, base: i64) -> i8* {
    if (base < 2 or base > 16) {
        buf[0] = '\0';
        return buf;
    }
    if (num == 0) {
        buf[0] = '0';
        buf[1] = '\0';
        return buf;
    }
    var i = 0;
    while(num > 0) {
        var tmp_bit = i64::i8(num % base);
        if (tmp_bit < i64::i8(10)) {
            buf[i] = '0' + tmp_bit;
        } else {
            buf[i] = 'a' + tmp_bit - i64::i8(10);
        }
        num /= base;
        i += 1;
    }
    buf[i] = '\0';

    var s_begin = 0;
    var s_end = i;
    var s_mid = (s_begin + s_end) / 2;
    i = 0;
    while(i < s_mid) {
        var tmp = buf[i];
        buf[i] = buf[s_end - i - 1];
        buf[s_end - i - 1] = tmp;
        i += 1;
    }
    return buf;
}

func hexdump(buf: i8*) {
    var stdout = i64::i32(1);
    write(stdout, "0x", 2);
    write(stdout, buf, strlen(buf));
    write(stdout, "\n", 1);
    return;
}

func main() -> i64 {
    var i = 0x1;
    var total = 0x0;
    var buf = malloc(128);
    while(i < 0x80000000) {
        total = total | i;
        itoa(u64::i64(total), buf, 16);
        hexdump(buf);
        i *= 0x2;
    }
    i = 0x1;
    total = 0x0;
    while(i < 0x80000000) {
        total |= i;
        itoa(u64::i64(total), buf, 16);
        hexdump(buf);
        i *= 0x2;
    }
    free(buf);
    write(i64::i32(1), "  -> from bitwise.colgm\n", 24);
    return 0;
}