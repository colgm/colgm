func puts(s: i8*);
func malloc(size: i64) -> i8*;
func free(ptr: i8*);
func strlen(s: i8*) -> i64;
func memcpy(dest: i8*, src: i8*, n: i64);

func itoa(num: i64, buf: i8*, base: i64) -> i8* {
    if (base < 2 or base > 16) {
        buf[0] = '\0';
        return buf;
    }
    if (num == 0) {
        buf[0] = '0';
        buf[1] = '\0';
        return buf;
    }
    var i = 0;
    while(num > 0) {
        var tmp_bit = (num % base) => i8;
        if (tmp_bit < (10 => i8)) {
            buf[i] = '0' + tmp_bit;
        } else {
            buf[i] = 'a' + tmp_bit - (10 => i8);
        }
        num /= base;
        i += 1;
    }
    buf[i] = '\0';

    var s_begin = 0;
    var s_end = i;
    var s_mid = (s_begin + s_end) / 2;
    i = 0;
    while(i < s_mid) {
        var tmp = buf[i];
        buf[i] = buf[s_end - i - 1];
        buf[s_end - i - 1] = tmp;
        i += 1;
    }
    return buf;
}

struct Test {
    field_a: i64,
    field_b: i64
}

func put_info(test: Test) {
    var info_field_a = "[initializer.colgm] field_a: ";
    var info_field_b = "[initializer.colgm] field_b: ";

    var buff = malloc(256);
    memcpy(buff, info_field_a, strlen(info_field_a));
    var buff_num_begin = (buff => u64 + strlen(info_field_a) => u64) => i8*;
    itoa(test.field_a, buff_num_begin, 10);
    puts(buff);
    free(buff);

    buff = malloc(256);
    memcpy(buff, info_field_b, strlen(info_field_b));
    buff_num_begin = (buff => u64 + strlen(info_field_b) => u64) => i8*;
    itoa(test.field_b, buff_num_begin, 10);
    puts(buff);
    free(buff);
}

func main() {
    var test = Test {};
    var test_with_value_a = Test { field_a: 1 };
    var test_with_value_all = Test { field_a: 1, field_b: 2 };
    put_info(test);
    put_info(test_with_value_a);
    put_info(test_with_value_all);
}