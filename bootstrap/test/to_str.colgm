func malloc(s: i64) -> i8*;
func free(s: i8*) -> void;
func puts(s: i8*) -> i32;
func write(fd: i32, buf: i8*, count: i64) -> i64;

func itoa(num: i64, buf: i8*, base: i64) -> i8* {
    if (base < 2 or base > 16) {
        buf[0] = '\0';
        return buf;
    }
    var i = 0;
    while(num > 0) {
        var tmp_bit = i64::i8(num % base);
        if (tmp_bit < i64::i8(10)) {
            buf[i] = '0' + tmp_bit;
        } else {
            buf[i] = 'a' + tmp_bit - i64::i8(10);
        }
        num /= base;
        i += 1;
    }
    buf[i] = '\0';

    var s_begin = 0;
    var s_end = i;
    var s_mid = (s_begin + s_end) / 2;
    i = 0;
    while(i < s_mid) {
        var tmp = buf[i];
        buf[i] = buf[s_end - i - 1];
        buf[s_end - i - 1] = tmp;
        i += 1;
    }
    return buf;
}

func main() -> i64 {
    var result = malloc(128);
    write(i64::i32(1), "[to_str.colgm] ", 15);
    puts(itoa(114514, result, 2));
    write(i64::i32(1), "[to_str.colgm] ", 15);
    puts(itoa(114514, result, 8));
    write(i64::i32(1), "[to_str.colgm] ", 15);
    puts(itoa(114514, result, 10));
    write(i64::i32(1), "[to_str.colgm] ", 15);
    puts(itoa(114514, result, 16));

    var index = 0;
    while(index <= 2147483647) {
        if (index % 50000000 == 0 and index > 0) {
            write(i64::i32(1), "[to_str.colgm] ", 15);
            puts(itoa(index, result, 2));
            write(i64::i32(1), "[to_str.colgm] ", 15);
            puts(itoa(index, result, 8));
            write(i64::i32(1), "[to_str.colgm] ", 15);
            puts(itoa(index, result, 10));
            write(i64::i32(1), "[to_str.colgm] ", 15);
            puts(itoa(index, result, 16));
        } elsif (index == 2147483647 and index > 0) {
            write(i64::i32(1), "[to_str.colgm] ", 15);
            puts(itoa(index, result, 2));
            write(i64::i32(1), "[to_str.colgm] ", 15);
            puts(itoa(index, result, 8));
            write(i64::i32(1), "[to_str.colgm] ", 15);
            puts(itoa(index, result, 10));
            write(i64::i32(1), "[to_str.colgm] ", 15);
            puts(itoa(index, result, 16));
        }
        index += 1;
    }
    free(result);
    return 0;
}
