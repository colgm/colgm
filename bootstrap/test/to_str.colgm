extern func malloc(s: i64) -> i8*;
extern func free(s: i8*) -> void;
extern func puts(s: i8*) -> i32;
extern func memcpy(dst: i8*, src: i8*, size: u64) -> i8*;

func itoa(num: i64, buf: i8*, base: i64) -> i8* {
    if (base < 2 or base > 16) {
        buf[0] = '\0';
        return buf;
    }
    var i = 0;
    while(num > 0) {
        var tmp_bit = (num % base) => i8;
        if (tmp_bit < (10 => i8)) {
            buf[i] = '0' + tmp_bit;
        } else {
            buf[i] = 'a' + tmp_bit - (10 => i8);
        }
        num /= base;
        i += 1;
    }
    buf[i] = '\0';

    var s_begin = 0;
    var s_end = i;
    var s_mid = (s_begin + s_end) / 2;
    i = 0;
    while(i < s_mid) {
        var tmp = buf[i];
        buf[i] = buf[s_end - i - 1];
        buf[s_end - i - 1] = tmp;
        i += 1;
    }
    return buf;
}

func main() -> i64 {
    var result = [i8; 256];
    memcpy(result, "[to_str.colgm] ", 15 => u64);

    var buff_begin = ((result => u64) + (15 => u64)) => i8*;

    itoa(114514, buff_begin, 2);
    puts(result);
    itoa(114514, buff_begin, 8);
    puts(result);
    itoa(114514, buff_begin, 10);
    puts(result);
    itoa(114514, buff_begin, 16);
    puts(result);

    var index = 0;
    while(index <= 2147483647) {
        if (index % 50000000 == 0 and index > 0) {
            itoa(index, buff_begin, 2);
            puts(result);
            itoa(index, buff_begin, 8);
            puts(result);
            itoa(index, buff_begin, 10);
            puts(result);
            itoa(index, buff_begin, 16);
            puts(result);
        } elsif (index == 2147483647 and index > 0) {
            itoa(index, buff_begin, 2);
            puts(result);
            itoa(index, buff_begin, 8);
            puts(result);
            itoa(index, buff_begin, 10);
            puts(result);
            itoa(index, buff_begin, 16);
            puts(result);
        }
        index += 1;
    }
    return 0;
}
