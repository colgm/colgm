func malloc(s: i64) -> i8*;
func free(s: i8*) -> void;
func puts(s: i8*) -> i32;

func itoa(num: i64, buf: i8*, base: i64) {
    var zero = '0';#i64::i8(48);
    var i = 0;
    while(num > 0) {
        buf[i] = zero + i64::i8(num % base);
        num /= base;
        i += 1;
    }
    buf[i] = i64::i8(0);

    var s_begin = 0;
    var s_end = i;
    var s_mid = (s_begin + s_end) / 2;
    i = 0;
    while(i < s_mid) {
        var tmp = buf[i];
        buf[i] = buf[s_end - i - 1];
        buf[s_end - i - 1] = tmp;
        i += 1;
    }
    return;
}

func main() -> i64 {
    var result: i8* = malloc(128);
    itoa(114514, result, 10);
    puts(result);

    var index: i64 = 0;
    while(index <= 2147483647) {
        if (index % 50000000 == 0 and index > 0) {
            itoa(index, result, 10);
            puts(result);
        } elsif (index == 2147483647 and index > 0) {
            itoa(index, result, 10);
            puts(result);
        }
        index += 1;
    }
    puts("  -> from to_str.colgm");
    free(result);
    return 0;
}
