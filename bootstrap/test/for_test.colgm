func malloc(s: i64) -> i8*;
func free(s: i8*) -> void;
func puts(s: i8*) -> i32;

func itoa(num: i64, buf: i8*, base: i64) -> i8* {
    if (base < 2 or base > 16) {
        buf[0] = '\0';
        return buf;
    }
    if (num == 0) {
        buf[0] = '0';
        buf[1] = '\0';
        return buf;
    }
    var i = 0;
    while(num > 0) {
        var tmp_bit = (num % base) => i8;
        if (tmp_bit < (10 => i8)) {
            buf[i] = '0' + tmp_bit;
        } else {
            buf[i] = 'a' + tmp_bit - (10 => i8);
        }
        num /= base;
        i += 1;
    }
    buf[i] = '\0';

    var s_begin = 0;
    var s_end = i;
    var s_mid = (s_begin + s_end) / 2;
    i = 0;
    while(i < s_mid) {
        var tmp = buf[i];
        buf[i] = buf[s_end - i - 1];
        buf[s_end - i - 1] = tmp;
        i += 1;
    }
    return buf;
}

func main() -> i64 {
    var buff = [i8; 128];
    for (var i = 0; i < 100; i += 1) {
        itoa(i, buff, 10);
        if (i == 5) {
            puts("[for_test.colgm] should continue when i == 5");
            continue;
        } else if (i == 11) {
            puts("[for_test.colgm] should break when i == 11");
            break;
        }
        puts(buff);
    }

    for (var i = 0; ; i += 1) {
        if (i == 65536) {
            puts("[for_test.colgm] should break when i == 65536");
            break;
        }
    }

    var i = 0;
    for(;;) {
        if (i == 65536) {
            puts("[for_test.colgm] should break when i == 65536");
            break;
        }
        i += 1;
    }
    return 0;
}