use data::{ A, B };

extern func malloc(size: u64) -> i8*;
extern func free(ptr: i8*);

struct Vec<T> {
    __size: u64,
    __data: T*
}

impl Vec<T> {
    func create() -> Vec<T> {
        var res = Vec<T> {
            __size: 0,
            __data: nil => T*
        };
        res.__size = 1024;
        res.__data = malloc(T::__size__() * 1024) => T*;
        return res;
    }
    func delete(self) {
        free(self->__data => i8*);
    }
    func c_data() -> T* {
        return __data;
    }
}

pub extern func new<T>(size: u64) -> Vec<T> {
    return Vec<T> {
        __size: size,
        __data: malloc(size * T::__size__()) => T*
    };
}

struct Base<A, B, C> {
    a: A,
    b: B,
    c: C
}

func main() -> i64 {
    var a = Base<i64, i64, i64> { a: 1, b: 2, c: 3 };
    var b = Base<i32, i64, f32> { a: 4 => i32, b: 5, c: 6.0 };
    var c = Vec<i32>::create();
    var d = Vec<A>::create();
    var e = Vec<B>::create();
    c.c_data()[0] = b.a;
    return a.a;
}